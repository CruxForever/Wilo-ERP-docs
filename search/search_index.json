{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"INDEX","text":"<p>Generated: 2025-10-28 12:14 (local) Commit: 74b0a98</p>"},{"location":"#company-docs","title":"Company docs","text":"<ul> <li>About Wilo</li> <li>Wilo Controlling</li> <li>Production</li> </ul>"},{"location":"#erp-docs","title":"ERP docs","text":"<ul> <li>Architecture summary</li> <li>Project Overview</li> <li>DB Schema</li> <li>Rules Coverage</li> </ul>"},{"location":"#_1","title":"\u041f\u0440\u043e \u0443\u0447\u0451\u0442 \u0438 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044e","text":"<ul> <li>\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0443\u0447\u0451\u0442\u0430</li> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438: \u043d\u0430\u0441\u043e\u0441\u043d\u0430\u044f \u0441\u0442\u0430\u043d\u0446\u0438\u044f</li> </ul>"},{"location":"#_2","title":"\u0427\u0442\u043e \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430\u043c","text":"<ul> <li>Code: \u0441\u043c. \u0432 Project Overview \u2014 \u0440\u0430\u0437\u0434\u0435\u043b \u201cMaterials-related\u201d</li> <li>DB: VIEW v_price_by_scenario</li> </ul>"},{"location":"ARCHITECTURE_SUMMARY/","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438","text":"<p>\u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442, \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043e\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 staging \u0434\u043e \u0432\u0438\u0442\u0440\u0438\u043d <code>v_*</code>. \u041a\u043e\u043d\u0442\u0443\u0440\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 \u0442\u0440\u0438 \u0431\u043b\u043e\u043a\u0430: \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u043f\u0440\u044f\u043c\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u043d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 (overhead). \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0438\u0442\u0440\u0438\u043d\u0430 <code>v_cogs_unit</code> \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0442\u0440\u0451\u0445.</p>"},{"location":"ARCHITECTURE_SUMMARY/#_2","title":"\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0443\u0440","text":"<ul> <li>Excel/CSV \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u043f\u0438\u0448\u0443\u0442 \u0432 staging-\u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f <code>load_id</code> \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.</li> <li>\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b (<code>upsert_*</code>, <code>materialize_*</code>, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 <code>db/schema.py</code>) \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a \u0440\u0430\u0431\u043e\u0447\u0438\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c.</li> <li>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f <code>v_bom_costs_scenario</code>, <code>v_routing_costs_scenario</code> \u0438 <code>v_ovh_costs_scenario</code> \u0434\u0430\u044e\u0442 \u0435\u0434\u0438\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 <code>v_cogs_unit</code>.</li> </ul> <pre><code>flowchart LR\n    subgraph Materials[\"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b\"]\n        stage_bom[\"bom_specs_stage\\nbom_components_stage\"]\n        price_stage[\"rm_price_load\\nrm_prices\"]\n        bom_core[\"bom_specs\\nbom_spec_components\"]\n        bom_flat[\"bom_flat\"]\n        price_view[\"price_scenarios\\nv_price_by_scenario\"]\n        v_bom[\"v_bom_costs_scenario\"]\n        stage_bom --&gt; bom_core\n        bom_core --&gt; bom_flat\n        price_stage --&gt; price_view\n        bom_flat --&gt; v_bom\n        price_view --&gt; v_bom\n    end\n    subgraph Direct[\"\u041f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b\"]\n        rout_core[\"routings\\nrouting_operations\"]\n        routing_flat[\"routing_flat\"]\n        rates[\"cost_rates\"]\n        v_routing[\"v_routing_costs_scenario\"]\n        rout_core --&gt; routing_flat\n        routing_flat --&gt; v_routing\n        rates --&gt; v_routing\n    end\n    subgraph Indirect[\"\u041d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b\"]\n        opex_stage[\"opex_staging\"]\n        opex_budget[\"opex_budget\"]\n        ovh_flat[\"ovh_flat\"]\n        tariffs[\"ovh_tariffs\"]\n        v_ovh[\"v_ovh_costs_scenario\"]\n        opex_stage --&gt; opex_budget\n        opex_budget --&gt; ovh_flat\n        ovh_flat --&gt; v_ovh\n        tariffs --&gt; v_ovh\n    end\n    v_bom --&gt; v_cogs[\"v_cogs_unit\"]\n    v_routing --&gt; v_cogs\n    v_ovh --&gt; v_cogs</code></pre>"},{"location":"ARCHITECTURE_SUMMARY/#bom","title":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (BOM + \u0446\u0435\u043d\u044b)","text":"<p>\u0412\u0445\u043e\u0434 - <code>bom_specs_stage</code>, <code>bom_components_stage</code> \u2014 staging \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 <code>loaders.bom_loader</code>. - <code>rm_price_load</code> \u2014 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0437\u0430\u043a\u0443\u043f\u043e\u0447\u043d\u044b\u0445 \u0446\u0435\u043d, \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438 \u0434\u0430\u0442\u0443. - <code>rm_prices</code> \u2014 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0446\u0435\u043d \u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a <code>load_id</code>, \u0432\u0430\u043b\u044e\u0442\u0435 \u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u0443. - <code>price_scenarios</code> \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0440\u0435\u0437\u043e\u0432 (BG26, FC3 \u0438 \u0442.\u0434.), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 <code>v_price_by_scenario</code>.</p> <p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f</p> \u042d\u0442\u0430\u043f \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0421\u0443\u0442\u044c \u0448\u0430\u0433\u0430 \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f BOM <code>bom_specs</code>, <code>bom_spec_components</code> <code>upsert_bom_specs_from_stage</code> \u0438 <code>upsert_bom_components_from_stage</code> \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044f\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 staging \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b <code>bom</code>, <code>bom_flat</code> <code>materialize_bom_flat</code> \u0441\u0442\u0440\u043e\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u044b\u0439, \u043c\u043d\u043e\u0433\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439 BOM \u0438 \u043f\u0438\u0448\u0435\u0442 \u043f\u043b\u043e\u0441\u043a\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e <code>parent \u2192 component</code>. \u0420\u0430\u0441\u0447\u0451\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 <code>mo_cost_unit</code>, <code>mo_cost_unit_monthly</code> SQL \u0438\u0437 <code>sql/materialize</code> \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u0435\u0442 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0441 \u043e\u0431\u044a\u0451\u043c\u0430\u043c\u0438 \u0434\u043b\u044f \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u044b\u0445 \u043e\u0442\u0447\u0451\u0442\u043e\u0432. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0446\u0435\u043d <code>v_price_by_scenario</code>, <code>mo_last_price_current</code> <code>ensure_rm_prices</code> \u0438 <code>ensure_scenario_cost_views</code> \u0432\u044b\u0431\u0438\u0440\u0430\u044e\u0442 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0446\u0435\u043d\u0443 \u2264 <code>price_scenarios.asof_date</code> \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0432\u0430\u043b\u044e\u0442\u0435. <p>\u0412\u044b\u0445\u043e\u0434 - <code>v_bom_costs_scenario</code> \u2014 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0432\u0438\u0442\u0440\u0438\u043d\u0430 \u00ab\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u00d7 \u0446\u0435\u043d\u0430\u00bb \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u0438\u0437\u0434\u0435\u043b\u0438\u044f \u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f. - \u042d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 <code>calc.mo_materials</code>, \u0432 budget-\u043e\u0442\u0447\u0451\u0442\u0430\u0445 \u0438 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 <code>v_cogs_unit</code> \u043a\u0430\u043a \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 <code>MATCOST</code>.</p>"},{"location":"ARCHITECTURE_SUMMARY/#_3","title":"\u041f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b (\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0438 \u0441\u0442\u0430\u0432\u043a\u0438)","text":"<p>\u0412\u0445\u043e\u0434 - <code>routings</code>, <code>routing_operations</code> \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043d\u044b\u0445 \u043a\u0430\u0440\u0442 (<code>loaders.upsert_routings</code>), \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442. - <code>items</code> \u2014 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0438\u0437\u0434\u0435\u043b\u0438\u0439 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 <code>routing_group</code> \u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0432\u044b\u043f\u0443\u0441\u043a\u0430. - <code>cost_rates</code> \u2014 \u0441\u0442\u0430\u0432\u043a\u0438 \u0442\u0440\u0443\u0434\u0430/\u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438/\u041e\u041f\u0420 \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 <code>component_code</code> (LABOR_DIRECT, OPR_DIRECT, DEPR_DIRECT), \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f <code>loaders.direct_cost_loader</code>.</p> <p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f</p> \u042d\u0442\u0430\u043f \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0421\u0443\u0442\u044c \u0448\u0430\u0433\u0430 \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 <code>routing_tree</code>, <code>routing_nodes</code> SQL \u0432 <code>sql/materialize/routing_tree_build.sql</code> \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u044c <code>routing_group \u2192 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</code>. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043d\u0430 \u0438\u0437\u0434\u0435\u043b\u0438\u0435 <code>routing_flat</code> <code>materialize_routing_flat</code> \u0440\u0430\u0441\u043a\u0440\u044b\u0432\u0430\u0435\u0442 <code>routing_operations</code> \u0434\u043e \u0443\u0440\u043e\u0432\u043d\u044f <code>product_id \u00d7 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f</code>, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 <code>hours_per_unit</code> \u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b. \u0412\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0432\u043e\u043a <code>cost_rates</code> \u041b\u043e\u0430\u0434\u0435\u0440 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 Excel \u0432 \u00ab\u0434\u043b\u0438\u043d\u043d\u0443\u044e\u00bb \u0444\u043e\u0440\u043c\u0443 \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438, \u0432\u0430\u043b\u044e\u0442\u0443 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u044b \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f. <p>\u0412\u044b\u0445\u043e\u0434 - <code>v_routing_costs_scenario</code> \u2014 \u043f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0430\u0435\u0442 <code>routing_flat.hours_per_unit</code> \u043d\u0430 <code>cost_rates.rate_value</code>, \u043e\u0442\u0434\u0430\u0451\u0442 \u043f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u043e \u0438\u0437\u0434\u0435\u043b\u0438\u044e, \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u0443 \u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e. - \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430\u0445 (<code>calc.cost_tree</code>, <code>calc.budget</code>) \u0438 \u0434\u0430\u0451\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 <code>LABOR_DIRECT/OPR_DIRECT/DEPR_DIRECT</code> \u0432 <code>v_cogs_unit</code>.</p>"},{"location":"ARCHITECTURE_SUMMARY/#overhead","title":"\u041d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b (overhead)","text":"<p>\u0412\u0445\u043e\u0434 - <code>opex_staging</code> \u2014 \u0441\u044b\u0440\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043c\u0430\u043f\u043f\u0438\u043d\u0433\u043e\u043c \u043d\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432. - <code>opex_budget</code> \u2014 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0431\u044e\u0434\u0436\u0435\u0442 \u043f\u043e\u0441\u043b\u0435 <code>commit_opex</code>, \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043a <code>elem_id</code> \u0438 \u0433\u043e\u0434\u0443. - <code>prod_budget</code> \u2014 \u043e\u0431\u044a\u0451\u043c\u044b \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043f\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e, \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0431\u0430\u0437 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f. - <code>ovh_tariffs</code> \u2014 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a \u0434\u043e\u043b\u0435\u0439 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e <code>overhead_group</code>, <code>cost_type</code>, \u0433\u043e\u0434\u0443 \u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e (\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>calc.ovh_rates_calc</code> \u0438\u043b\u0438 \u0440\u0443\u0447\u043d\u043e\u0439 \u0432\u0432\u043e\u0434).</p> <p>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f</p> \u042d\u0442\u0430\u043f \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0421\u0443\u0442\u044c \u0448\u0430\u0433\u0430 \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 <code>ovh_nodes</code>, <code>ovh_tree</code> \u0421\u043a\u0440\u0438\u043f\u0442\u044b \u0432 <code>sql/materialize/ovh_tree_build.sql</code> \u0432\u044b\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u044e\u0442 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044e \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442. \u0420\u0430\u0441\u0447\u0451\u0442 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 <code>ovh_flat</code> <code>materialize_ovh_flat</code> \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 <code>driver_value_per_unit</code> \u043f\u043e \u0438\u0437\u0434\u0435\u043b\u0438\u044f\u043c \u0438 \u0433\u0440\u0443\u043f\u043f\u0430\u043c, \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u044f <code>prod_budget</code>, <code>mo_cost_unit</code>, <code>items</code>. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 <code>personnel_monthly</code>, <code>personnel_yearly</code> \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f \u0441 \u0442\u0440\u0443\u0434\u043e\u0432\u044b\u043c\u0438 \u0431\u0430\u0437\u0430\u043c\u0438. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 <code>ovh_tariffs</code>, <code>ovh_tariffs_wide_compat</code> \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u0434\u043e\u043b\u0438 \u043a tall-\u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u0443\u044e \u0432\u044c\u044e\u0445\u0443. <p>\u0412\u044b\u0445\u043e\u0434 - <code>v_ovh_costs_scenario</code> \u2014 \u0431\u0435\u0440\u0451\u0442 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0433\u043e\u0434 \u0438\u0437 <code>active_scenarios</code>, \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u0442 <code>ovh_flat.driver_value_per_unit</code> \u043d\u0430 \u0434\u043e\u043b\u0438 \u0438\u0437 <code>ovh_tariffs</code> \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043f\u043e \u0438\u0437\u0434\u0435\u043b\u0438\u044f\u043c. - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 <code>calc.ovh_rates_calc</code> \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u0438 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 <code>v_cogs_unit</code> \u043a\u0430\u043a <code>OVH_*</code> \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b.</p>"},{"location":"ARCHITECTURE_SUMMARY/#_4","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0432\u0438\u0442\u0440\u0438\u043d\u044b","text":"<ul> <li><code>active_scenarios</code> \u0445\u0440\u0430\u043d\u0438\u0442 \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u043f\u0430\u0440\u044b <code>vol_scenario</code>/<code>price_scenario</code>; \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 <code>v_prod_budget_active</code>, <code>v_ovh_costs_scenario</code> \u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0442\u0430\u0440\u0438\u0444\u043e\u0432.</li> <li><code>v_cogs_unit</code> \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (<code>MATCOST</code>), \u043f\u0440\u044f\u043c\u044b\u0435 (<code>LABOR_DIRECT</code>, <code>OPR_DIRECT</code>, <code>DEPR_DIRECT</code>), \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 (<code>OVH_*</code>) \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 <code>cost_allocations</code>.</li> <li>\u0414\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0435 \u0432\u044c\u044e\u0445\u0438 (<code>v_ovh_flat_compat</code>, <code>mo_last_price_current</code>) \u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 SQL \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 <code>sql/materialize</code>.</li> </ul>"},{"location":"DB_SCHEMA/","title":"DB_SCHEMA","text":"<p>Generated: 2025-10-28 12:14 (local) Commit: 74b0a98</p> <p>Schema built by: <code>db.schema.ensure_schema</code></p>"},{"location":"DB_SCHEMA/#objects","title":"Objects","text":"<ul> <li>Tables:</li> <li>TABLE: active_alloc_sets</li> <li>TABLE: active_periods</li> <li>TABLE: active_scenarios</li> <li>TABLE: activity_to_routing</li> <li>TABLE: bom</li> <li>TABLE: bom_spec_components</li> <li>TABLE: bom_specs</li> <li>TABLE: bom_specs_new</li> <li>TABLE: commodity_map</li> <li>TABLE: cost_allocations</li> <li>TABLE: cost_rates</li> <li>TABLE: dep_cc_map</li> <li>TABLE: depr_rates_snapshot</li> <li>TABLE: driver_sets</li> <li>TABLE: driver_values</li> <li>TABLE: drivers</li> <li>TABLE: elem_to_ovh</li> <li>TABLE: fact_measures</li> <li>TABLE: item_nodes</li> <li>TABLE: items</li> <li>TABLE: lineage_links</li> <li>TABLE: mfc_cc_set_items</li> <li>TABLE: mfc_cc_sets</li> <li>TABLE: mfc_elem_set_items</li> <li>TABLE: mfc_elem_sets</li> <li>TABLE: mfc_report_defs</li> <li>TABLE: mfc_report_line_rules</li> <li>TABLE: mfc_report_lines</li> <li>TABLE: mo_catalog</li> <li>TABLE: mo_cost_unit</li> <li>TABLE: mo_prices_history</li> <li>TABLE: opex_budget</li> <li>TABLE: opex_cycle_batches</li> <li>TABLE: opex_cycle_defs</li> <li>TABLE: opex_cycle_rules</li> <li>TABLE: opex_staging (materials pipeline)</li> <li>TABLE: opr_rates_snapshot</li> <li>TABLE: ovh_bases_year</li> <li>TABLE: ovh_cost_unit</li> <li>TABLE: ovh_flat</li> <li>TABLE: ovh_nodes</li> <li>TABLE: ovh_tariffs</li> <li>TABLE: personnel_monthly</li> <li>TABLE: price_scenarios (materials pipeline)</li> <li>TABLE: prod_budget</li> <li>TABLE: rm_price_load (materials pipeline)</li> <li>TABLE: rm_prices (materials pipeline)</li> <li>TABLE: routing_nodes</li> <li>TABLE: routing_operations</li> <li>TABLE: routing_tree</li> <li>TABLE: routings</li> <li>TABLE: rule_scope</li> <li>TABLE: rule_sets</li> <li>TABLE: rules</li> <li>TABLE: run_history</li> <li>TABLE: run_log</li> <li>TABLE: schema_version</li> <li>TABLE: scrap_cost_unit</li> <li>TABLE: sqlite_sequence</li> <li>TABLE: transfer_batches</li> <li>TABLE: transfer_opex_items</li> <li>TABLE: transfer_personnel_items</li> <li>TABLE: transfer_rule_recipients</li> <li>TABLE: transfer_rules</li> <li>Views:</li> <li>VIEW: mo_last_price_current</li> <li>VIEW: opex_budget_effective</li> <li>VIEW: ovh_tariffs_wide_compat</li> <li>VIEW: personnel_yearly</li> <li>VIEW: personnel_yearly_effective</li> <li>VIEW: v_alloc_lineage</li> <li>VIEW: v_allocation_rule_effective</li> <li>VIEW: v_cogs_unit</li> <li>VIEW: v_component_pools</li> <li>VIEW: v_driver_catalog</li> <li>VIEW: v_driver_values</li> <li>VIEW: v_elem_component_map</li> <li>VIEW: v_item_cg</li> <li>VIEW: v_labor_cost_unit_total</li> <li>VIEW: v_opr_cost_unit_total</li> <li>VIEW: v_ovh_cost_unit</li> <li>VIEW: v_ovh_flat_compat</li> <li>VIEW: v_price_by_article</li> <li>VIEW: v_price_by_scenario (materials pipeline)</li> <li>VIEW: v_prod_budget_active</li> <li>VIEW: v_rate_parity</li> <li>VIEW: v_recon_checks</li> </ul>"},{"location":"DB_SCHEMA/#table-active_alloc_sets","title":"TABLE: active_alloc_sets","text":"<pre><code>CREATE TABLE active_alloc_sets(\n          scenario TEXT PRIMARY KEY,\n          rule_set_id TEXT NOT NULL,\n          valid_from TEXT,\n          valid_to   TEXT\n        )\n</code></pre> # name type notnull default pk 0 scenario TEXT 0 1 1 rule_set_id TEXT 1 0 2 valid_from TEXT 0 0 3 valid_to TEXT 0 0"},{"location":"DB_SCHEMA/#table-active_periods","title":"TABLE: active_periods","text":"<pre><code>CREATE TABLE active_periods(\n          id INTEGER PRIMARY KEY CHECK(id=1),\n          month_code TEXT NOT NULL -- 'YYYY-MM'\n        )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 month_code TEXT 1 0"},{"location":"DB_SCHEMA/#table-active_scenarios","title":"TABLE: active_scenarios","text":"<pre><code>CREATE TABLE active_scenarios(\n      id INTEGER PRIMARY KEY CHECK (id=1),\n      vol_scenario   TEXT,  -- \u0420\u0405\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402 'BG26_VOL'\n      price_scenario TEXT   -- \u0420\u0405\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402 'FC3' \u0420\u0451\u0420\u00bb\u0420\u0451 'BG26' (\u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u00b1\u0421\u0453\u0420\u0491\u0420\u00b5\u0421\u20ac\u0421\u040a \u0420\u0451\u0420\u0458\u0420\u00b5\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u00b0\u0421\u201a\u0421\u040a price-\u0421\u0403\u0421\u2020\u0420\u00b5\u0420\u0405\u0420\u00b0\u0421\u0402\u0420\u0451\u0420\u0451 \u0420\u0454\u0420\u00b0\u0420\u0454 \u0420\u0406 price-loads)\n    )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 vol_scenario TEXT 0 0 2 price_scenario TEXT 0 0"},{"location":"DB_SCHEMA/#table-activity_to_routing","title":"TABLE: activity_to_routing","text":"<pre><code>CREATE TABLE activity_to_routing (\n            activity_code   TEXT NOT NULL,\n            routing_node_id TEXT NOT NULL,\n            PRIMARY KEY (activity_code, routing_node_id)\n        )\n</code></pre> # name type notnull default pk 0 activity_code TEXT 1 1 1 routing_node_id TEXT 1 2"},{"location":"DB_SCHEMA/#table-bom","title":"TABLE: bom","text":"<pre><code>CREATE TABLE bom(\n      parent_item_id    TEXT NOT NULL,\n      component_item_id TEXT NOT NULL,\n      qty_per_unit      REAL NOT NULL CHECK(qty_per_unit&gt;=0),\n      valid_from        TEXT NOT NULL,\n      valid_to          TEXT NOT NULL,\n      level             INTEGER NOT NULL,\n      path              TEXT,\n      PRIMARY KEY(parent_item_id, component_item_id, valid_from)\n    )\n</code></pre> # name type notnull default pk 0 parent_item_id TEXT 1 1 1 component_item_id TEXT 1 2 2 qty_per_unit REAL 1 0 3 valid_from TEXT 1 3 4 valid_to TEXT 1 0 5 level INTEGER 1 0 6 path TEXT 0 0"},{"location":"DB_SCHEMA/#table-bom_spec_components","title":"TABLE: bom_spec_components","text":"<pre><code>CREATE TABLE bom_spec_components(\n      spec_code    TEXT NOT NULL,\n      line_no      INTEGER NOT NULL,\n      component_id TEXT NOT NULL,\n      qty_per_spec REAL NOT NULL CHECK(qty_per_spec&gt;=0),\n      uom          TEXT,\n      operation    TEXT,\n      stage        TEXT,\n      valid_from   TEXT NOT NULL DEFAULT '1900-01-01',\n      valid_to     TEXT NOT NULL DEFAULT '2999-12-31',\n      PRIMARY KEY(spec_code, line_no, valid_from)\n    )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 1 1 1 line_no INTEGER 1 2 2 component_id TEXT 1 0 3 qty_per_spec REAL 1 0 4 uom TEXT 0 0 5 operation TEXT 0 0 6 stage TEXT 0 0 7 valid_from TEXT 1 '1900-01-01' 3 8 valid_to TEXT 1 '2999-12-31' 0"},{"location":"DB_SCHEMA/#table-bom_specs","title":"TABLE: bom_specs","text":"<pre><code>CREATE TABLE bom_specs(\n      spec_code  TEXT PRIMARY KEY,\n      product_id TEXT NOT NULL,\n      batch_size REAL NOT NULL DEFAULT 1 CHECK(batch_size&gt;0),\n      batch_uom  TEXT,\n      valid_from TEXT NOT NULL DEFAULT '1900-01-01',\n      valid_to   TEXT NOT NULL DEFAULT '2999-12-31',\n      is_default INTEGER NOT NULL DEFAULT 1 CHECK(is_default IN (0,1))\n    )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 0 1 1 product_id TEXT 1 0 2 batch_size REAL 1 1 0 3 batch_uom TEXT 0 0 4 valid_from TEXT 1 '1900-01-01' 0 5 valid_to TEXT 1 '2999-12-31' 0 6 is_default INTEGER 1 1 0"},{"location":"DB_SCHEMA/#table-bom_specs_new","title":"TABLE: bom_specs_new","text":"<pre><code>CREATE TABLE bom_specs_new(\n              spec_code   TEXT NOT NULL,\n              product_id  TEXT NOT NULL,\n              batch_size  REAL NOT NULL DEFAULT 1.0,\n              batch_uom   TEXT,\n              valid_from  TEXT NOT NULL,\n              valid_to    TEXT NOT NULL DEFAULT '2999-12-31',\n              is_default  INTEGER NOT NULL DEFAULT 1,\n              PRIMARY KEY (spec_code, valid_from)\n            )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 1 1 1 product_id TEXT 1 0 2 batch_size REAL 1 1.0 0 3 batch_uom TEXT 0 0 4 valid_from TEXT 1 2 5 valid_to TEXT 1 '2999-12-31' 0 6 is_default INTEGER 1 1 0"},{"location":"DB_SCHEMA/#table-commodity_map","title":"TABLE: commodity_map","text":"<pre><code>CREATE TABLE commodity_map (\n        matl_prefix            TEXT PRIMARY KEY,   -- \u0420\u0405\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402 '123'\n        matl_group_text_opt    TEXT,               -- \u0420\u0455\u0420\u0457\u0421\u2020\u0420\u0451\u0420\u0455\u0420\u0405\u0420\u00b0\u0420\u00bb\u0421\u040a\u0420\u0405\u0420\u0455: \u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0420\u0455\u0420\u00b5 \u0420\u0451\u0420\u0458\u0421\u040f Matl Group\n        commodity_group        TEXT NOT NULL,      -- \u0420\u0405\u0420\u0455\u0420\u0458\u0420\u00b5\u0421\u0402 CG, \u0420\u0405\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402 '123'\n        commodity_group_text   TEXT                -- \u0420\u0455\u0420\u0457\u0420\u0451\u0421\u0403\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u00b5 CG\n    )\n</code></pre> # name type notnull default pk 0 matl_prefix TEXT 0 1 1 matl_group_text_opt TEXT 0 0 2 commodity_group TEXT 1 0 3 commodity_group_text TEXT 0 0"},{"location":"DB_SCHEMA/#table-cost_allocations","title":"TABLE: cost_allocations","text":"<pre><code>CREATE TABLE cost_allocations (\n            period         TEXT NOT NULL,              -- 'YYYY-MM'\n            scenario       TEXT NOT NULL DEFAULT 'BASE',\n            component_code TEXT NOT NULL,              -- e.g., 'LABOR_DIRECT'\n            product_id     TEXT NOT NULL,\n            cc_id          TEXT NOT NULL,\n            rule_id        INTEGER NOT NULL,\n            amount         REAL NOT NULL,\n            weight         REAL,\n            run_id         TEXT,\n            PRIMARY KEY (period, scenario, component_code, product_id, cc_id, rule_id)\n        )\n</code></pre> # name type notnull default pk 0 period TEXT 1 1 1 scenario TEXT 1 'BASE' 2 2 component_code TEXT 1 3 3 product_id TEXT 1 4 4 cc_id TEXT 1 5 5 rule_id INTEGER 1 6 6 amount REAL 1 0 7 weight REAL 0 0 8 run_id TEXT 0 0"},{"location":"DB_SCHEMA/#table-cost_rates","title":"TABLE: cost_rates","text":"<pre><code>CREATE TABLE cost_rates (\n            period_or_year TEXT NOT NULL,\n            scenario       TEXT NOT NULL DEFAULT '',\n            component_code TEXT NOT NULL,\n            cc_id          TEXT NOT NULL DEFAULT '',\n            product_id     TEXT NOT NULL DEFAULT '',\n            rate_value     REAL NOT NULL,\n            unit           TEXT,\n            source         TEXT,\n            run_id         TEXT,\n            PRIMARY KEY (period_or_year, scenario, component_code, cc_id, product_id)\n        )\n</code></pre> # name type notnull default pk 0 period_or_year TEXT 1 1 1 scenario TEXT 1 '' 2 2 component_code TEXT 1 3 3 cc_id TEXT 1 '' 4 4 product_id TEXT 1 '' 5 5 rate_value REAL 1 0 6 unit TEXT 0 0 7 source TEXT 0 0 8 run_id TEXT 0 0"},{"location":"DB_SCHEMA/#table-dep_cc_map","title":"TABLE: dep_cc_map","text":"<pre><code>CREATE TABLE dep_cc_map (\n      department_code TEXT PRIMARY KEY,  \n      cc_id           TEXT NOT NULL      \n    )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 1 1 cc_id TEXT 1 0"},{"location":"DB_SCHEMA/#table-depr_rates_snapshot","title":"TABLE: depr_rates_snapshot","text":"<pre><code>CREATE TABLE depr_rates_snapshot (\n            department_code     TEXT,\n            cc_id               TEXT,\n            rate_per_hour       REAL NOT NULL CHECK(rate_per_hour&gt;=0),\n            hours_year          REAL,\n            personnel_cost_year REAL,\n            bud_year            INTEGER,\n            currency            TEXT NOT NULL DEFAULT 'RUB',\n            source              TEXT,\n            calc_at             TEXT,\n            loaded_at           TEXT DEFAULT (datetime('now'))\n        )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 1 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 currency TEXT 1 'RUB' 0 7 source TEXT 0 0 8 calc_at TEXT 0 0 9 loaded_at TEXT 0 datetime('now') 0"},{"location":"DB_SCHEMA/#table-driver_sets","title":"TABLE: driver_sets","text":"<pre><code>CREATE TABLE driver_sets (\n            set_id     TEXT PRIMARY KEY,\n            name       TEXT,\n            version    INTEGER,\n            valid_from TEXT,\n            valid_to   TEXT,\n            status     TEXT\n        )\n</code></pre> # name type notnull default pk 0 set_id TEXT 0 1 1 name TEXT 0 0 2 version INTEGER 0 0 3 valid_from TEXT 0 0 4 valid_to TEXT 0 0 5 status TEXT 0 0"},{"location":"DB_SCHEMA/#table-driver_values","title":"TABLE: driver_values","text":"<pre><code>CREATE TABLE driver_values (\n            set_id      TEXT NOT NULL,\n            period      TEXT NOT NULL,                  -- 'YYYY-MM'\n            scenario    TEXT,\n            driver_code TEXT NOT NULL,\n            product_id  TEXT,\n            cc_id       TEXT,\n            elem_id     TEXT,\n            value       REAL NOT NULL,\n            unit        TEXT,\n            source_ref  TEXT,\n            loaded_at   TEXT NOT NULL DEFAULT (datetime('now')),\n            PRIMARY KEY (set_id, period, driver_code, product_id, cc_id),\n            FOREIGN KEY (driver_code) REFERENCES drivers(driver_code),\n            FOREIGN KEY (set_id) REFERENCES driver_sets(set_id)\n        )\n</code></pre> # name type notnull default pk 0 set_id TEXT 1 1 1 period TEXT 1 2 2 scenario TEXT 0 0 3 driver_code TEXT 1 3 4 product_id TEXT 0 4 5 cc_id TEXT 0 5 6 elem_id TEXT 0 0 7 value REAL 1 0 8 unit TEXT 0 0 9 source_ref TEXT 0 0 10 loaded_at TEXT 1 datetime('now') 0 <p>Foreign keys: - set_id -&gt; driver_sets(set_id) (on update NO ACTION, on delete NO ACTION, match NONE) - driver_code -&gt; drivers(driver_code) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-drivers","title":"TABLE: drivers","text":"<pre><code>CREATE TABLE drivers (\n            driver_code   TEXT PRIMARY KEY,\n            name          TEXT,\n            unit          TEXT,\n            granularity   TEXT,                    -- e.g. product_cc, cc, product\n            agg_rule      TEXT,                    -- e.g. sum, avg\n            source_policy TEXT,\n            is_ratio      INTEGER NOT NULL DEFAULT 0 CHECK(is_ratio IN (0,1))\n        )\n</code></pre> # name type notnull default pk 0 driver_code TEXT 0 1 1 name TEXT 0 0 2 unit TEXT 0 0 3 granularity TEXT 0 0 4 agg_rule TEXT 0 0 5 source_policy TEXT 0 0 6 is_ratio INTEGER 1 0 0"},{"location":"DB_SCHEMA/#table-elem_to_ovh","title":"TABLE: elem_to_ovh","text":"<pre><code>CREATE TABLE elem_to_ovh (\n            elem_id    TEXT NOT NULL,\n            ovh_node_id TEXT NOT NULL,\n            PRIMARY KEY (elem_id, ovh_node_id)\n        )\n</code></pre> # name type notnull default pk 0 elem_id TEXT 1 1 1 ovh_node_id TEXT 1 2"},{"location":"DB_SCHEMA/#table-fact_measures","title":"TABLE: fact_measures","text":"<pre><code>CREATE TABLE fact_measures (\n            period        TEXT NOT NULL,\n            scenario      TEXT NOT NULL DEFAULT '',\n            product_id    TEXT NOT NULL,\n            component_code TEXT NOT NULL DEFAULT '',\n            measure_code  TEXT NOT NULL,\n            value         REAL NOT NULL,\n            unit          TEXT,\n            PRIMARY KEY (period, scenario, product_id, component_code, measure_code)\n        )\n</code></pre> # name type notnull default pk 0 period TEXT 1 1 1 scenario TEXT 1 '' 2 2 product_id TEXT 1 3 3 component_code TEXT 1 '' 4 4 measure_code TEXT 1 5 5 value REAL 1 0 6 unit TEXT 0 0"},{"location":"DB_SCHEMA/#table-item_nodes","title":"TABLE: item_nodes","text":"<pre><code>CREATE TABLE item_nodes (\n            node_id   TEXT PRIMARY KEY,\n            parent_id TEXT,\n            name      TEXT,\n            level     INTEGER,\n            path      TEXT\n        )\n</code></pre> # name type notnull default pk 0 node_id TEXT 0 1 1 parent_id TEXT 0 0 2 name TEXT 0 0 3 level INTEGER 0 0 4 path TEXT 0 0"},{"location":"DB_SCHEMA/#table-items","title":"TABLE: items","text":"<pre><code>CREATE TABLE items(\n      item_id     TEXT PRIMARY KEY,\n      article     TEXT,\n      name        TEXT,\n      uom         TEXT,\n      is_produced INTEGER NOT NULL DEFAULT 0\n    , routing_group TEXT, ovh_group_code TEXT, matl_group TEXT, product_hierarchy TEXT)\n</code></pre> # name type notnull default pk 0 item_id TEXT 0 1 1 article TEXT 0 0 2 name TEXT 0 0 3 uom TEXT 0 0 4 is_produced INTEGER 1 0 0 5 routing_group TEXT 0 0 6 ovh_group_code TEXT 0 0 7 matl_group TEXT 0 0 8 product_hierarchy TEXT 0 0"},{"location":"DB_SCHEMA/#table-lineage_links","title":"TABLE: lineage_links","text":"<pre><code>CREATE TABLE lineage_links (\n            src_table TEXT NOT NULL,\n            src_pk    TEXT NOT NULL,\n            dst_table TEXT NOT NULL,\n            dst_pk    TEXT NOT NULL,\n            rule_id   INTEGER,\n            run_id    TEXT\n        )\n</code></pre> # name type notnull default pk 0 src_table TEXT 1 0 1 src_pk TEXT 1 0 2 dst_table TEXT 1 0 3 dst_pk TEXT 1 0 4 rule_id INTEGER 0 0 5 run_id TEXT 0 0"},{"location":"DB_SCHEMA/#table-mfc_cc_set_items","title":"TABLE: mfc_cc_set_items","text":"<pre><code>CREATE TABLE mfc_cc_set_items(\n        set_id  INTEGER NOT NULL,\n        cc_id   TEXT    NOT NULL,\n        PRIMARY KEY(set_id, cc_id),\n        FOREIGN KEY(set_id) REFERENCES mfc_cc_sets(set_id)\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 1 1 1 cc_id TEXT 1 2 <p>Foreign keys: - set_id -&gt; mfc_cc_sets(set_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-mfc_cc_sets","title":"TABLE: mfc_cc_sets","text":"<pre><code>CREATE TABLE mfc_cc_sets(\n        set_id      INTEGER PRIMARY KEY AUTOINCREMENT,\n        set_name    TEXT UNIQUE NOT NULL,\n        expand_mode TEXT NOT NULL DEFAULT 'leaves'   -- 'leaves' | 'subtree' | 'exact'\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 0 1 1 set_name TEXT 1 0 2 expand_mode TEXT 1 'leaves' 0"},{"location":"DB_SCHEMA/#table-mfc_elem_set_items","title":"TABLE: mfc_elem_set_items","text":"<pre><code>CREATE TABLE mfc_elem_set_items(\n        set_id  INTEGER NOT NULL,\n        elem_id TEXT    NOT NULL,\n        PRIMARY KEY(set_id, elem_id),\n        FOREIGN KEY(set_id) REFERENCES mfc_elem_sets(set_id)\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 1 1 1 elem_id TEXT 1 2 <p>Foreign keys: - set_id -&gt; mfc_elem_sets(set_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-mfc_elem_sets","title":"TABLE: mfc_elem_sets","text":"<pre><code>CREATE TABLE mfc_elem_sets(\n        set_id      INTEGER PRIMARY KEY AUTOINCREMENT,\n        set_name    TEXT UNIQUE NOT NULL,\n        expand_mode TEXT NOT NULL DEFAULT 'subtree'  -- 'subtree' | 'leaves' | 'exact'\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 0 1 1 set_name TEXT 1 0 2 expand_mode TEXT 1 'subtree' 0"},{"location":"DB_SCHEMA/#table-mfc_report_defs","title":"TABLE: mfc_report_defs","text":"<pre><code>CREATE TABLE mfc_report_defs (\n        report_id       TEXT PRIMARY KEY,                 -- 'TARGET_2026'\n        name            TEXT NOT NULL,                    -- 'Target Cost 2026'\n        bud_year        INTEGER NOT NULL,                 -- 2026\n        vol_scenario    TEXT,                             -- NULL = \u0431\u0440\u0430\u0442\u044c \u0438\u0437 active_scenarios\n        price_scenario  TEXT,                             -- NULL = \u0431\u0440\u0430\u0442\u044c \u0438\u0437 active_scenarios\n        created_at      TEXT DEFAULT (datetime('now'))\n    )\n</code></pre> # name type notnull default pk 0 report_id TEXT 0 1 1 name TEXT 1 0 2 bud_year INTEGER 1 0 3 vol_scenario TEXT 0 0 4 price_scenario TEXT 0 0 5 created_at TEXT 0 datetime('now') 0"},{"location":"DB_SCHEMA/#table-mfc_report_line_rules","title":"TABLE: mfc_report_line_rules","text":"<pre><code>CREATE TABLE mfc_report_line_rules (\n        report_id   TEXT NOT NULL,\n        line_no     INTEGER NOT NULL,\n        rule_no     INTEGER NOT NULL,                     -- \u0447\u0442\u043e\u0431\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u044b\u043b\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0430\u0432\u0438\u043b\n        source_type TEXT NOT NULL,                        -- \u0441\u043c. \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435\n        cc_root     TEXT,                                 -- \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0435\u0440\u0435\u0432\u0430 \u0426\u0417 (NULL = \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u0430)\n        elem_root   TEXT,                                 -- \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0435\u0440\u0435\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (NULL = \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u0430)\n        cost_type   TEXT,                                 -- \u043f\u043e\u0434\u0442\u0438\u043f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 (\u043d\u0430\u043f\u0440., 'machine'|'ext_tools' \u0434\u043b\u044f depr)\n        weight      REAL DEFAULT 1.0,                     -- \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 (+/-/\u0434\u043e\u043b\u044f)\n        note        TEXT, cc_set_id INTEGER, elem_set_id INTEGER,\n        PRIMARY KEY (report_id, line_no, rule_no),\n        FOREIGN KEY (report_id, line_no) REFERENCES mfc_report_lines(report_id, line_no),\n        CHECK (source_type IN (\n            'material','subcontracting','scrap',\n            'opex','depr','structure','acos',\n            'trading_ic','trading_ext'\n        ))\n    )\n</code></pre> # name type notnull default pk 0 report_id TEXT 1 1 1 line_no INTEGER 1 2 2 rule_no INTEGER 1 3 3 source_type TEXT 1 0 4 cc_root TEXT 0 0 5 elem_root TEXT 0 0 6 cost_type TEXT 0 0 7 weight REAL 0 1.0 0 8 note TEXT 0 0 9 cc_set_id INTEGER 0 0 10 elem_set_id INTEGER 0 0 <p>Foreign keys: - report_id -&gt; mfc_report_lines(report_id) (on update NO ACTION, on delete NO ACTION, match NONE) - line_no -&gt; mfc_report_lines(line_no) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-mfc_report_lines","title":"TABLE: mfc_report_lines","text":"<pre><code>CREATE TABLE mfc_report_lines (\n        report_id   TEXT NOT NULL,\n        line_no     INTEGER NOT NULL,                     -- \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430\n        report_line TEXT    NOT NULL,                     -- \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043e\u0442\u0447\u0451\u0442\u0435\n        PRIMARY KEY (report_id, line_no),\n        FOREIGN KEY (report_id) REFERENCES mfc_report_defs(report_id)\n    )\n</code></pre> # name type notnull default pk 0 report_id TEXT 1 1 1 line_no INTEGER 1 2 2 report_line TEXT 1 0 <p>Foreign keys: - report_id -&gt; mfc_report_defs(report_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-mo_catalog","title":"TABLE: mo_catalog","text":"<pre><code>CREATE TABLE mo_catalog (\n        before_item_id TEXT NOT NULL,\n        after_item_id  TEXT NOT NULL,\n        is_active      INTEGER NOT NULL DEFAULT 1,\n        source         TEXT,\n        loaded_at      TEXT NOT NULL,\n        UNIQUE(before_item_id, after_item_id)\n    )\n</code></pre> # name type notnull default pk 0 before_item_id TEXT 1 0 1 after_item_id TEXT 1 0 2 is_active INTEGER 1 1 0 3 source TEXT 0 0 4 loaded_at TEXT 1 0"},{"location":"DB_SCHEMA/#table-mo_cost_unit","title":"TABLE: mo_cost_unit","text":"<pre><code>CREATE TABLE mo_cost_unit (\n        product_id          TEXT NOT NULL,\n        component_item_id   TEXT NOT NULL,\n        qty_per_unit        REAL NOT NULL,\n        price               REAL NOT NULL,\n        amount              REAL NOT NULL,\n        currency            TEXT NOT NULL DEFAULT 'RUB',\n        computed_at         TEXT NOT NULL,\n        PRIMARY KEY (product_id, component_item_id)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 component_item_id TEXT 1 2 2 qty_per_unit REAL 1 0 3 price REAL 1 0 4 amount REAL 1 0 5 currency TEXT 1 'RUB' 0 6 computed_at TEXT 1 0"},{"location":"DB_SCHEMA/#table-mo_prices_history","title":"TABLE: mo_prices_history","text":"<pre><code>CREATE TABLE mo_prices_history (\n        after_item_id   TEXT NOT NULL,\n        price           REAL NOT NULL,\n        currency        TEXT NOT NULL DEFAULT 'RUB',\n        vendor          TEXT,\n        effective_from  TEXT,\n        effective_to    TEXT,\n        source          TEXT,\n        loaded_at       TEXT NOT NULL\n    )\n</code></pre> # name type notnull default pk 0 after_item_id TEXT 1 0 1 price REAL 1 0 2 currency TEXT 1 'RUB' 0 3 vendor TEXT 0 0 4 effective_from TEXT 0 0 5 effective_to TEXT 0 0 6 source TEXT 0 0 7 loaded_at TEXT 1 0"},{"location":"DB_SCHEMA/#table-opex_budget","title":"TABLE: opex_budget","text":"<pre><code>CREATE TABLE opex_budget (\n    id                       INTEGER PRIMARY KEY AUTOINCREMENT,\n    load_id                  TEXT    NOT NULL,\n    cc_id                    TEXT    NOT NULL,                 -- FK \u0432\u2020\u2019 cc_nodes.cc_id\n    elem_id                  TEXT    NOT NULL,                 -- FK \u0432\u2020\u2019 elem_nodes.elem_id\n    bud_year                 INTEGER NOT NULL,                 -- \u0420\u0405\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402, 2026\n    amount                   REAL    NOT NULL,                 -- \u0420\u0405\u0420\u0455\u0421\u0402\u0420\u0458\u0420\u00b0\u0420\u00bb\u0420\u0451\u0420\u00b7\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u00b0\u0421\u040f \u0421\u0403\u0421\u0453\u0420\u0458\u0420\u0458\u0420\u00b0\n\n    text_note                TEXT,\n    comments                 TEXT,\n    supplier_text            TEXT,\n    source_sheet             TEXT,\n\n    created_at               INTEGER NOT NULL DEFAULT (strftime('%s','now')),\n\n    FOREIGN KEY (cc_id)   REFERENCES cc_nodes(cc_id),\n    FOREIGN KEY (elem_id) REFERENCES elem_nodes(elem_id)\n)\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 load_id TEXT 1 0 2 cc_id TEXT 1 0 3 elem_id TEXT 1 0 4 bud_year INTEGER 1 0 5 amount REAL 1 0 6 text_note TEXT 0 0 7 comments TEXT 0 0 8 supplier_text TEXT 0 0 9 source_sheet TEXT 0 0 10 created_at INTEGER 1 strftime('%s','now') 0 <p>Foreign keys: - elem_id -&gt; elem_nodes(elem_id) (on update NO ACTION, on delete NO ACTION, match NONE) - cc_id -&gt; cc_nodes(cc_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-opex_cycle_batches","title":"TABLE: opex_cycle_batches","text":"<pre><code>CREATE TABLE opex_cycle_batches (\n      batch_id TEXT PRIMARY KEY,\n      cycle_id INTEGER NOT NULL,\n      FOREIGN KEY(batch_id) REFERENCES transfer_batches(batch_id),\n      FOREIGN KEY(cycle_id) REFERENCES opex_cycle_defs(cycle_id)\n    )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 0 1 1 cycle_id INTEGER 1 0 <p>Foreign keys: - cycle_id -&gt; opex_cycle_defs(cycle_id) (on update NO ACTION, on delete NO ACTION, match NONE) - batch_id -&gt; transfer_batches(batch_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-opex_cycle_defs","title":"TABLE: opex_cycle_defs","text":"<pre><code>CREATE TABLE opex_cycle_defs (\n        cycle_id    INTEGER PRIMARY KEY AUTOINCREMENT,\n        name        TEXT NOT NULL,            -- \u0421\u2021\u0420\u00b5\u0420\u00bb\u0420\u0455\u0420\u0406\u0420\u00b5\u0420\u0454\u0420\u0455\u0421\u2021\u0420\u0451\u0421\u201a\u0420\u00b0\u0420\u00b5\u0420\u0458\u0420\u0455\u0420\u00b5 \u0420\u0451\u0420\u0458\u0421\u040f \"Buildings\u0432\u2020\u2019Prod\"\n        bud_year    INTEGER NOT NULL,         -- \u0420\u0454 \u0420\u0454\u0420\u00b0\u0420\u0454\u0420\u0455\u0420\u0458\u0421\u0453 \u0420\u0456\u0420\u0455\u0420\u0491\u0421\u0453 \u0420\u0455\u0421\u201a\u0420\u0405\u0420\u0455\u0421\u0403\u0420\u0451\u0421\u201a\u0421\u0403\u0421\u040f \u0420\u0405\u0420\u00b0\u0420\u00b1\u0420\u0455\u0421\u0402\n        elem_root   TEXT NOT NULL,            -- \u0420\u0454\u0420\u0455\u0421\u0402\u0420\u00b5\u0420\u0405\u0421\u040a \u0420\u0456\u0421\u0402\u0421\u0453\u0420\u0457\u0420\u0457\u0421\u2039 \u0421\u040c\u0420\u00bb\u0420\u00b5\u0420\u0458\u0420\u00b5\u0420\u0405\u0421\u201a\u0420\u0455\u0420\u0406\n        enabled     INTEGER NOT NULL DEFAULT 1,\n        rule_id     INTEGER,\n        UNIQUE(name, bud_year)\n    )\n</code></pre> # name type notnull default pk 0 cycle_id INTEGER 0 1 1 name TEXT 1 0 2 bud_year INTEGER 1 0 3 elem_root TEXT 1 0 4 enabled INTEGER 1 1 0 5 rule_id INTEGER 0 0"},{"location":"DB_SCHEMA/#table-opex_cycle_rules","title":"TABLE: opex_cycle_rules","text":"<pre><code>CREATE TABLE opex_cycle_rules (\n        cycle_id     INTEGER NOT NULL,\n        donor_cc_id  TEXT    NOT NULL,\n        to_cc_id     TEXT    NOT NULL,\n        to_elem_id   TEXT,\n        share        REAL    NOT NULL CHECK(share&gt;=0 AND share&lt;=1),\n        FOREIGN KEY (cycle_id) REFERENCES opex_cycle_defs(cycle_id),\n        UNIQUE(cycle_id, donor_cc_id, to_cc_id)\n    )\n</code></pre> # name type notnull default pk 0 cycle_id INTEGER 1 0 1 donor_cc_id TEXT 1 0 2 to_cc_id TEXT 1 0 3 to_elem_id TEXT 0 0 4 share REAL 1 0 <p>Foreign keys: - cycle_id -&gt; opex_cycle_defs(cycle_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-opex_staging-materials-pipeline","title":"TABLE: opex_staging (materials pipeline)","text":"<pre><code>CREATE TABLE opex_staging (\n    id                       INTEGER PRIMARY KEY AUTOINCREMENT,\n    load_id                  TEXT    NOT NULL,                 -- UUID \u0420\u00b7\u0420\u00b0\u0420\u0456\u0421\u0402\u0421\u0453\u0420\u00b7\u0420\u0454\u0420\u0451\n    sheet_name               TEXT,                             -- \u0420\u0451\u0420\u0458\u0421\u040f \u0420\u00bb\u0420\u0451\u0421\u0403\u0421\u201a\u0420\u00b0 Excel\n    cc_id                    TEXT,                             -- CC \u0420\u0451\u0420\u00b7 \u0420\u0451\u0421\u0403\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0405\u0420\u0451\u0420\u0454\u0420\u00b0\n    cost_type                TEXT,\n    account_descr            TEXT,\n    bud_2026                 REAL,                             -- \u0421\u0403\u0421\u0453\u0420\u0458\u0420\u0458\u0420\u00b0 \u0420\u0451\u0420\u00b7 \u0420\u0454\u0420\u0455\u0420\u00bb\u0420\u0455\u0420\u0405\u0420\u0454\u0420\u0451 'BUD 2026'\n    text_note                TEXT,                             -- 'Text'\n    comments                 TEXT,                             -- 'Comments'\n    supplier_text            TEXT,                             -- 'Suppliers/Text'\n\n    mapped_elem_id           TEXT,                             -- \u0421\u0402\u0420\u00b5\u0420\u00b7\u0421\u0453\u0420\u00bb\u0421\u040a\u0421\u201a\u0420\u00b0\u0421\u201a \u0420\u0457\u0421\u0402\u0420\u00b0\u0420\u0406\u0420\u0451\u0420\u00bb (elem_id) \u0420\u0451\u0420\u00bb\u0420\u0451 NULL\n\n    -- \u0421\u201e\u0420\u00bb\u0420\u00b0\u0420\u0456\u0420\u0451 \u0420\u0406\u0420\u00b0\u0420\u00bb\u0420\u0451\u0420\u0491\u0420\u00b0\u0421\u2020\u0420\u0451\u0420\u0451\n    missing_cc               INTEGER NOT NULL DEFAULT 0,       -- 1 \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 CC \u0420\u0405\u0420\u00b5 \u0420\u0405\u0420\u00b0\u0420\u2116\u0420\u0491\u0420\u00b5\u0420\u0405 \u0420\u0406 \u0420\u2018\u0420\u201d\n    unmapped_elem            INTEGER NOT NULL DEFAULT 0,       -- 1 \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0457\u0421\u0402\u0420\u00b0\u0420\u0406\u0420\u0451\u0420\u00bb\u0420\u0455 \u0420\u0405\u0420\u00b5 \u0421\u0403\u0421\u0402\u0420\u00b0\u0420\u00b1\u0420\u0455\u0421\u201a\u0420\u00b0\u0420\u00bb\u0420\u0455\n    bad_amount               INTEGER NOT NULL DEFAULT 0,       -- 1 \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 bud_2026 \u0420\u0457\u0421\u0453\u0421\u0403\u0421\u201a/\u0420\u0405\u0420\u00b5\u0421\u2021\u0420\u0451\u0421\u0403\u0420\u00bb\u0420\u0455\n    dup_candidate            INTEGER NOT NULL DEFAULT 0,       -- 1 \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0457\u0420\u0455\u0421\u201a\u0420\u00b5\u0420\u0405\u0421\u2020\u0420\u0451\u0420\u00b0\u0420\u00bb\u0421\u040a\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0491\u0421\u0453\u0420\u00b1\u0420\u00bb\u0421\u040a\n\n    created_at               INTEGER NOT NULL DEFAULT (strftime('%s','now')),\n\n    -- \u0420\u0458\u0421\u040f\u0420\u0456\u0420\u0454\u0420\u0451\u0420\u00b5 FK (\u0420\u00b1\u0420\u00b5\u0420\u00b7 ON DELETE/UPDATE CASCADE, \u0421\u2021\u0421\u201a\u0420\u0455\u0420\u00b1\u0421\u2039 staging \u0420\u0405\u0420\u00b5 \u0420\u0457\u0420\u00b0\u0420\u0491\u0420\u00b0\u0420\u00bb \u0420\u0457\u0421\u0402\u0420\u0451 \u0420\u00b0\u0420\u0491\u0420\u0458\u0420\u0451\u0420\u0405-\u0420\u0455\u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b0\u0421\u2020\u0420\u0451\u0421\u040f\u0421\u2026)\n    FOREIGN KEY (cc_id)       REFERENCES cc_nodes(cc_id),\n    FOREIGN KEY (mapped_elem_id) REFERENCES elem_nodes(elem_id)\n)\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 load_id TEXT 1 0 2 sheet_name TEXT 0 0 3 cc_id TEXT 0 0 4 cost_type TEXT 0 0 5 account_descr TEXT 0 0 6 bud_2026 REAL 0 0 7 text_note TEXT 0 0 8 comments TEXT 0 0 9 supplier_text TEXT 0 0 10 mapped_elem_id TEXT 0 0 11 missing_cc INTEGER 1 0 0 12 unmapped_elem INTEGER 1 0 0 13 bad_amount INTEGER 1 0 0 14 dup_candidate INTEGER 1 0 0 15 created_at INTEGER 1 strftime('%s','now') 0 <p>Foreign keys: - mapped_elem_id -&gt; elem_nodes(elem_id) (on update NO ACTION, on delete NO ACTION, match NONE) - cc_id -&gt; cc_nodes(cc_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-opr_rates_snapshot","title":"TABLE: opr_rates_snapshot","text":"<pre><code>CREATE TABLE opr_rates_snapshot (\n            department_code     TEXT,\n            cc_id               TEXT,\n            rate_per_hour       REAL NOT NULL CHECK(rate_per_hour&gt;=0),\n            hours_year          REAL,\n            personnel_cost_year REAL,\n            bud_year            INTEGER,\n            currency            TEXT NOT NULL DEFAULT 'RUB',\n            source              TEXT,\n            calc_at             TEXT,\n            loaded_at           TEXT DEFAULT (datetime('now'))\n        )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 1 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 currency TEXT 1 'RUB' 0 7 source TEXT 0 0 8 calc_at TEXT 0 0 9 loaded_at TEXT 0 datetime('now') 0"},{"location":"DB_SCHEMA/#table-ovh_bases_year","title":"TABLE: ovh_bases_year","text":"<pre><code>CREATE TABLE ovh_bases_year (\n        year            INTEGER        NOT NULL,\n        overhead_group  TEXT           NOT NULL,\n        -- \u0420\u0458\u0420\u00b0\u0421\u201a\u0420\u00b5\u0421\u0402\u0420\u0451\u0420\u00b0\u0420\u00bb\u0420\u0454\u0420\u00b0 \u0420\u00b7\u0420\u00b0 \u0420\u0456\u0420\u0455\u0420\u0491 \u0420\u0451 \u0420\u00b5\u0421\u2018 \u0420\u0491\u0420\u0455\u0420\u00bb\u0421\u040f \u0420\u0406 total \u0420\u0457\u0420\u0455 \u0420\u0406\u0421\u0403\u0420\u00b5\u0420\u0458 A001..A010\n        mat_base_year   REAL           NOT NULL DEFAULT 0.0,\n        mat_share       REAL,\n        -- \u0420\u0451\u0421\u0403\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0405\u0421\u2039\u0420\u00b5 \u0421\u0403\u0421\u0453\u0420\u0458\u0420\u0458\u0421\u2039 (\u0420\u0491\u0420\u0455 \u0421\u0402\u0420\u00b0\u0421\u0403\u0420\u0457\u0421\u0402\u0420\u00b5\u0420\u0491\u0420\u00b5\u0420\u00bb\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f)\n        base_depr_src   REAL           NOT NULL DEFAULT 0.0,   -- \u0420\u0452\u0420\u0458\u0420\u0455\u0421\u0402\u0421\u201a. \u0420\u045b\u0420\u045f\u0420\u00a0 (CC 25407 \u0413\u2014 MFC_PRIM_3)\n        base_log_src    REAL           NOT NULL DEFAULT 0.0,   -- \u0420\u045b\u0420\u0490\u0420\u00a0 \u0420\u203a\u0420\u0455\u0420\u0456\u0420\u0451\u0421\u0403\u0421\u201a\u0420\u0451\u0420\u0454\u0420\u00b0 (P45/46/47 \u0413\u2014 MFC_PRIM)\n        base_adm_src    REAL           NOT NULL DEFAULT 0.0,   -- \u0420\u045b\u0420\u0490\u0420\u00a0 \u0420\u0408\u0420\u0457\u0421\u0402\u0420\u00b0\u0420\u0406\u0420\u00bb\u0420\u00b5\u0420\u0405\u0421\u2021. (P41/43/44/48 \u0413\u2014 MFC_PRIM) \u0420\u0458\u0420\u0451\u0420\u0405\u0421\u0453\u0421\u0403 \u0420\u0452\u0420\u0458\u0420\u0455\u0421\u0402\u0421\u201a. \u0420\u045b\u0420\u045f\u0420\u00a0\n        -- \u0421\u0402\u0420\u00b0\u0421\u0403\u0420\u0457\u0421\u0402\u0420\u00b5\u0420\u0491\u0420\u00b5\u0420\u00bb\u0421\u2018\u0420\u0405\u0420\u0405\u0421\u2039\u0420\u00b5 \u0421\u0403\u0421\u0453\u0420\u0458\u0420\u0458\u0421\u2039 \u0420\u0457\u0420\u0455 \u0420\u0491\u0420\u0455\u0420\u00bb\u0421\u040f\u0420\u0458 mat_share\n        dist_depr       REAL           NOT NULL DEFAULT 0.0,\n        dist_log        REAL           NOT NULL DEFAULT 0.0,\n        dist_adm        REAL           NOT NULL DEFAULT 0.0,   -- \u0420\u0457\u0420\u0455\u0420\u0454\u0420\u00b0 = base_adm_src\u0413\u2014mat_share; \u0420\u00b7\u0420\u00b0\u0421\u201a\u0420\u00b5\u0420\u0458 \u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u00b5\u0421\u0403\u0421\u2021\u0420\u0451\u0421\u201a\u0420\u00b0\u0420\u00b5\u0420\u0458 \u0421\u2021\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u00b7 (\u0421\u201a\u0421\u0402\u0421\u0453\u0420\u0491+\u0420\u045b\u0420\u045f\u0420\u00a0)\n        -- \u0420\u0457\u0421\u0402\u0420\u0455\u0420\u0451\u0421\u0403\u0421\u2026\u0420\u0455\u0420\u00b6\u0420\u0491\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u00b5 / \u0421\u201a\u0420\u00b5\u0421\u2026\u0420\u0457\u0420\u0455\u0420\u00bb\u0421\u040f\n        opex_load_ids   TEXT,                                   -- UUID \u0421\u0403\u0420\u0457\u0420\u0451\u0421\u0403\u0420\u0454\u0420\u0455\u0420\u0458 (\u0421\u2021\u0420\u00b5\u0421\u0402\u0420\u00b5\u0420\u00b7 \u0420\u00b7\u0420\u00b0\u0420\u0457\u0421\u040f\u0421\u201a\u0421\u0453\u0421\u040b), \u0420\u00b5\u0421\u0403\u0420\u00bb\u0420\u0451 \u0420\u0405\u0420\u00b5\u0421\u0403\u0420\u0454\u0420\u0455\u0420\u00bb\u0421\u040a\u0420\u0454\u0420\u0455 \u0420\u00b7\u0420\u00b0\u0420\u0456\u0421\u0402\u0421\u0453\u0420\u00b7\u0420\u0455\u0420\u0454\n        prod_months     TEXT,                                   -- \u0420\u0405\u0420\u00b0\u0420\u0457\u0421\u0402\u0420\u0451\u0420\u0458\u0420\u00b5\u0421\u0402: '2026-01..2026-12'\n        calc_at         TEXT           DEFAULT (datetime('now')),\n        created_at      INTEGER        NOT NULL DEFAULT (strftime('%s','now')),\n        PRIMARY KEY (year, overhead_group)\n    )\n</code></pre> # name type notnull default pk 0 year INTEGER 1 1 1 overhead_group TEXT 1 2 2 mat_base_year REAL 1 0.0 0 3 mat_share REAL 0 0 4 base_depr_src REAL 1 0.0 0 5 base_log_src REAL 1 0.0 0 6 base_adm_src REAL 1 0.0 0 7 dist_depr REAL 1 0.0 0 8 dist_log REAL 1 0.0 0 9 dist_adm REAL 1 0.0 0 10 opex_load_ids TEXT 0 0 11 prod_months TEXT 0 0 12 calc_at TEXT 0 datetime('now') 0 13 created_at INTEGER 1 strftime('%s','now') 0"},{"location":"DB_SCHEMA/#table-ovh_cost_unit","title":"TABLE: ovh_cost_unit","text":"<pre><code>CREATE TABLE ovh_cost_unit (\n        product_id TEXT PRIMARY KEY,\n        depr_opr_cost REAL NOT NULL DEFAULT 0.0,  -- \u0420\u0452\u0420\u0458\u0420\u0455\u0421\u0402\u0421\u201a\u0420\u0451\u0420\u00b7\u0420\u00b0\u0421\u2020\u0420\u0451\u0421\u040f \u0420\u045b\u0420\u045f\u0420\u00a0\n        log_cost REAL NOT NULL DEFAULT 0.0,       -- \u0420\u045b\u0420\u0490\u0420\u00a0 \u0420\u00bb\u0420\u0455\u0420\u0456\u0420\u0451\u0421\u0403\u0421\u201a\u0420\u0451\u0420\u0454\u0420\u00b0\n        adm_cost REAL NOT NULL DEFAULT 0.0        -- \u0420\u045b\u0420\u0490\u0420\u00a0 \u0421\u0453\u0420\u0457\u0421\u0402\u0420\u00b0\u0420\u0406\u0420\u00bb\u0420\u00b5\u0420\u0405\u0421\u2021\u0420\u00b5\u0421\u0403\u0420\u0454\u0420\u0451\u0420\u00b5\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 depr_opr_cost REAL 1 0.0 0 2 log_cost REAL 1 0.0 0 3 adm_cost REAL 1 0.0 0"},{"location":"DB_SCHEMA/#table-ovh_flat","title":"TABLE: ovh_flat","text":"<pre><code>CREATE TABLE ovh_flat (\n            product_id TEXT NOT NULL,\n            overhead_group TEXT NOT NULL,\n            driver_code TEXT,\n            driver_value_per_unit REAL,\n            source TEXT,\n            year INTEGER,\n            department_code TEXT,\n            -- legacy compatibility\n            mat_cost REAL,\n            base_kind TEXT,\n            base_value_per_unit REAL, node_product_id TEXT,\n            PRIMARY KEY (product_id, overhead_group, driver_code)\n        )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 overhead_group TEXT 1 2 2 driver_code TEXT 0 3 3 driver_value_per_unit REAL 0 0 4 source TEXT 0 0 5 year INTEGER 0 0 6 department_code TEXT 0 0 7 mat_cost REAL 0 0 8 base_kind TEXT 0 0 9 base_value_per_unit REAL 0 0 10 node_product_id TEXT 0 0"},{"location":"DB_SCHEMA/#table-ovh_nodes","title":"TABLE: ovh_nodes","text":"<pre><code>CREATE TABLE ovh_nodes (\n            node_id    TEXT PRIMARY KEY,\n            parent_id  TEXT,\n            ovh_group  TEXT,\n            name       TEXT,\n            level      INTEGER,\n            path       TEXT\n        )\n</code></pre> # name type notnull default pk 0 node_id TEXT 0 1 1 parent_id TEXT 0 0 2 ovh_group TEXT 0 0 3 name TEXT 0 0 4 level INTEGER 0 0 5 path TEXT 0 0"},{"location":"DB_SCHEMA/#table-ovh_tariffs","title":"TABLE: ovh_tariffs","text":"<pre><code>CREATE TABLE \"ovh_tariffs\" (\n                    overhead_group TEXT NOT NULL,\n                    year INTEGER NOT NULL,\n                    scenario TEXT NOT NULL DEFAULT '',\n                    cost_type TEXT NOT NULL,\n                    share REAL,\n                    PRIMARY KEY (overhead_group, year, scenario, cost_type)\n                )\n</code></pre> # name type notnull default pk 0 overhead_group TEXT 1 1 1 year INTEGER 1 2 2 scenario TEXT 1 '' 3 3 cost_type TEXT 1 4 4 share REAL 0 0"},{"location":"DB_SCHEMA/#table-personnel_monthly","title":"TABLE: personnel_monthly","text":"<pre><code>CREATE TABLE personnel_monthly(\n            cc_id   TEXT NOT NULL,\n            ym      TEXT NOT NULL,         -- 'YYYY-MM'\n            headcount REAL NOT NULL CHECK(headcount&gt;=0),\n            source  TEXT,\n            note    TEXT,\n            loaded_at TEXT DEFAULT (datetime('now')),\n            PRIMARY KEY(cc_id, ym)\n        )\n</code></pre> # name type notnull default pk 0 cc_id TEXT 1 1 1 ym TEXT 1 2 2 headcount REAL 1 0 3 source TEXT 0 0 4 note TEXT 0 0 5 loaded_at TEXT 0 datetime('now') 0"},{"location":"DB_SCHEMA/#table-price_scenarios-materials-pipeline","title":"TABLE: price_scenarios (materials pipeline)","text":"<pre><code>CREATE TABLE price_scenarios (\n      scenario_code TEXT PRIMARY KEY,   -- 'BG25', 'FC3', 'BG26', ...\n      asof_date     TEXT NOT NULL       -- 'YYYY-MM-DD'\n    )\n</code></pre> # name type notnull default pk 0 scenario_code TEXT 0 1 1 asof_date TEXT 1 0"},{"location":"DB_SCHEMA/#table-prod_budget","title":"TABLE: prod_budget","text":"<pre><code>CREATE TABLE prod_budget (\n        product_id   TEXT NOT NULL,\n        month_code   TEXT NOT NULL,   -- 'YYYY-MM'\n        qty          REAL NOT NULL DEFAULT 0,\n        -- \u0420\u045c\u0420\u045b\u0420\u2019\u0420\u045b\u0420\u2022:\n        scenario     TEXT NOT NULL DEFAULT 'BASE',\n        PRIMARY KEY (product_id, month_code, scenario)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 month_code TEXT 1 2 2 qty REAL 1 0 0 3 scenario TEXT 1 'BASE' 3"},{"location":"DB_SCHEMA/#table-rm_price_load-materials-pipeline","title":"TABLE: rm_price_load (materials pipeline)","text":"<pre><code>CREATE TABLE rm_price_load (\n        load_id     TEXT PRIMARY KEY,\n        comment     TEXT,\n        source      TEXT,\n        price_date  TEXT,\n        loaded_at   TEXT NOT NULL DEFAULT (datetime('now')),\n        created_by  TEXT\n    )\n</code></pre> # name type notnull default pk 0 load_id TEXT 0 1 1 comment TEXT 0 0 2 source TEXT 0 0 3 price_date TEXT 0 0 4 loaded_at TEXT 1 datetime('now') 0 5 created_by TEXT 0 0"},{"location":"DB_SCHEMA/#table-rm_prices-materials-pipeline","title":"TABLE: rm_prices (materials pipeline)","text":"<pre><code>CREATE TABLE \"rm_prices\" (\n            item_code       TEXT NOT NULL,\n            currency        TEXT NOT NULL DEFAULT 'RUB',\n            effective_from  TEXT NOT NULL,                   -- \u0420\u0454\u0420\u00bb\u0421\u040b\u0421\u2021 \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u0451\u0421\u0403\u0421\u201a\u0420\u0455\u0421\u0402\u0420\u0451\u0420\u0451\n            price           REAL NOT NULL,\n            article         TEXT,\n            uom             TEXT,\n            load_id         TEXT NOT NULL,                   -- uuid \u0420\u00b7\u0420\u00b0\u0420\u0456\u0421\u0402\u0421\u0453\u0420\u00b7\u0420\u0454\u0420\u0451\n            source          TEXT,\n            loaded_at       TEXT NOT NULL DEFAULT (datetime('now')),\n            PRIMARY KEY (item_code, currency, effective_from)\n        )\n</code></pre> # name type notnull default pk 0 item_code TEXT 1 1 1 currency TEXT 1 'RUB' 2 2 effective_from TEXT 1 3 3 price REAL 1 0 4 article TEXT 0 0 5 uom TEXT 0 0 6 load_id TEXT 1 0 7 source TEXT 0 0 8 loaded_at TEXT 1 datetime('now') 0"},{"location":"DB_SCHEMA/#table-routing_nodes","title":"TABLE: routing_nodes","text":"<pre><code>CREATE TABLE routing_nodes (\n            node_id       TEXT PRIMARY KEY,\n            parent_id     TEXT,\n            routing_group TEXT,\n            name          TEXT,\n            level         INTEGER,\n            path          TEXT\n        )\n</code></pre> # name type notnull default pk 0 node_id TEXT 0 1 1 parent_id TEXT 0 0 2 routing_group TEXT 0 0 3 name TEXT 0 0 4 level INTEGER 0 0 5 path TEXT 0 0"},{"location":"DB_SCHEMA/#table-routing_operations","title":"TABLE: routing_operations","text":"<pre><code>CREATE TABLE routing_operations(\n      routing_op_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      routing_id    INTEGER NOT NULL,\n      seq           INTEGER NOT NULL,\n      operation     TEXT NOT NULL,\n      department    TEXT,\n      hours         REAL NOT NULL DEFAULT 0 CHECK(hours&gt;=0),\n      UNIQUE(routing_id, seq)\n    )\n</code></pre> # name type notnull default pk 0 routing_op_id INTEGER 0 1 1 routing_id INTEGER 1 0 2 seq INTEGER 1 0 3 operation TEXT 1 0 4 department TEXT 0 0 5 hours REAL 1 0 0"},{"location":"DB_SCHEMA/#table-routing_tree","title":"TABLE: routing_tree","text":"<pre><code>CREATE TABLE routing_tree(\n      root_product_id  TEXT,\n      node_product_id  TEXT,\n      level            INTEGER,\n      qty_per_unit     REAL,\n      path             TEXT,\n      routing_id       TEXT,\n      routing_group    TEXT,\n      routing_name     TEXT,\n      PRIMARY KEY(root_product_id, node_product_id)\n    )\n</code></pre> # name type notnull default pk 0 root_product_id TEXT 0 1 1 node_product_id TEXT 0 2 2 level INTEGER 0 0 3 qty_per_unit REAL 0 0 4 path TEXT 0 0 5 routing_id TEXT 0 0 6 routing_group TEXT 0 0 7 routing_name TEXT 0 0"},{"location":"DB_SCHEMA/#table-routings","title":"TABLE: routings","text":"<pre><code>CREATE TABLE routings(\n      routing_id   INTEGER PRIMARY KEY AUTOINCREMENT,\n      routing_group TEXT NOT NULL,\n      spec_code     TEXT,\n      item_id       TEXT\n    )\n</code></pre> # name type notnull default pk 0 routing_id INTEGER 0 1 1 routing_group TEXT 1 0 2 spec_code TEXT 0 0 3 item_id TEXT 0 0"},{"location":"DB_SCHEMA/#table-rule_scope","title":"TABLE: rule_scope","text":"<pre><code>CREATE TABLE rule_scope (\n            rule_id     INTEGER NOT NULL,\n            cc_node_id  TEXT,\n            elem_node_id TEXT,\n            PRIMARY KEY (rule_id, cc_node_id, elem_node_id),\n            FOREIGN KEY (rule_id) REFERENCES rules(rule_id)\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 1 1 1 cc_node_id TEXT 0 2 2 elem_node_id TEXT 0 3 <p>Foreign keys: - rule_id -&gt; rules(rule_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-rule_sets","title":"TABLE: rule_sets","text":"<pre><code>CREATE TABLE rule_sets (\n            rule_set_id TEXT PRIMARY KEY,\n            name        TEXT,\n            version     INTEGER,\n            valid_from  TEXT,\n            valid_to    TEXT,\n            status      TEXT\n        )\n</code></pre> # name type notnull default pk 0 rule_set_id TEXT 0 1 1 name TEXT 0 0 2 version INTEGER 0 0 3 valid_from TEXT 0 0 4 valid_to TEXT 0 0 5 status TEXT 0 0"},{"location":"DB_SCHEMA/#table-rules","title":"TABLE: rules","text":"<pre><code>CREATE TABLE rules (\n            rule_id     INTEGER PRIMARY KEY AUTOINCREMENT,\n            rule_set_id TEXT NOT NULL,\n            priority    INTEGER NOT NULL,\n            driver_code TEXT,\n            params_json TEXT,\n            FOREIGN KEY (rule_set_id) REFERENCES rule_sets(rule_set_id)\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 0 1 1 rule_set_id TEXT 1 0 2 priority INTEGER 1 0 3 driver_code TEXT 0 0 4 params_json TEXT 0 0 <p>Foreign keys: - rule_set_id -&gt; rule_sets(rule_set_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-run_history","title":"TABLE: run_history","text":"<pre><code>CREATE TABLE run_history(\n      run_id      TEXT PRIMARY KEY,\n      started_at  TEXT,\n      ended_at    TEXT,\n      scope       TEXT,             -- e.g. \"all_produced\" | \"explicit_list\"\n      params_json TEXT,\n      status      TEXT              -- \"ok\" | \"error\" | \"partial\"\n    )\n</code></pre> # name type notnull default pk 0 run_id TEXT 0 1 1 started_at TEXT 0 0 2 ended_at TEXT 0 0 3 scope TEXT 0 0 4 params_json TEXT 0 0 5 status TEXT 0 0"},{"location":"DB_SCHEMA/#table-run_log","title":"TABLE: run_log","text":"<pre><code>CREATE TABLE run_log(\n      run_id      TEXT,\n      step        TEXT,             -- \"bom\" | \"tree\" | \"flat\" | \"hours\" | \"labor_cost\" | \"opr_cost\" | \"depr_cost\"\n      product_id  TEXT,\n      level       TEXT,             -- \"INFO\" | \"WARN\" | \"ERROR\"\n      msg         TEXT,\n      extra_json  TEXT,\n      ts          TEXT\n    )\n</code></pre> # name type notnull default pk 0 run_id TEXT 0 0 1 step TEXT 0 0 2 product_id TEXT 0 0 3 level TEXT 0 0 4 msg TEXT 0 0 5 extra_json TEXT 0 0 6 ts TEXT 0 0"},{"location":"DB_SCHEMA/#table-schema_version","title":"TABLE: schema_version","text":"<pre><code>CREATE TABLE schema_version(version INTEGER PRIMARY KEY,name TEXT NOT NULL,applied_at TEXT NOT NULL DEFAULT (datetime('now')))\n</code></pre> # name type notnull default pk 0 version INTEGER 0 1 1 name TEXT 1 0 2 applied_at TEXT 1 datetime('now') 0"},{"location":"DB_SCHEMA/#table-scrap_cost_unit","title":"TABLE: scrap_cost_unit","text":"<pre><code>CREATE TABLE scrap_cost_unit (\n        product_id TEXT PRIMARY KEY,\n        scrap_cost REAL NOT NULL DEFAULT 0.0\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 scrap_cost REAL 1 0.0 0"},{"location":"DB_SCHEMA/#table-sqlite_sequence","title":"TABLE: sqlite_sequence","text":"<pre><code>CREATE TABLE sqlite_sequence(name,seq)\n</code></pre> # name type notnull default pk 0 name 0 0 1 seq 0 0"},{"location":"DB_SCHEMA/#table-transfer_batches","title":"TABLE: transfer_batches","text":"<pre><code>CREATE TABLE transfer_batches(\n            batch_id   TEXT PRIMARY KEY,   -- UUID\n            bud_year   INTEGER NOT NULL,\n            rule_id    INTEGER NOT NULL,\n            created_at TEXT DEFAULT (datetime('now')),\n            created_by TEXT,\n            comment    TEXT,\n            FOREIGN KEY(rule_id) REFERENCES transfer_rules(rule_id)\n        )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 0 1 1 bud_year INTEGER 1 0 2 rule_id INTEGER 1 0 3 created_at TEXT 0 datetime('now') 0 4 created_by TEXT 0 0 5 comment TEXT 0 0 <p>Foreign keys: - rule_id -&gt; transfer_rules(rule_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-transfer_opex_items","title":"TABLE: transfer_opex_items","text":"<pre><code>CREATE TABLE transfer_opex_items(\n            batch_id     TEXT NOT NULL,\n            from_cc_id   TEXT NOT NULL,\n            to_cc_id     TEXT NOT NULL,\n            elem_id      TEXT NOT NULL,\n            to_elem_id   TEXT,\n            amount_delta REAL NOT NULL,\n            PRIMARY KEY (batch_id, from_cc_id, to_cc_id, elem_id),\n            FOREIGN KEY (batch_id) REFERENCES transfer_batches(batch_id)\n        )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 1 1 1 from_cc_id TEXT 1 2 2 to_cc_id TEXT 1 3 3 elem_id TEXT 1 4 4 to_elem_id TEXT 0 0 5 amount_delta REAL 1 0 <p>Foreign keys: - batch_id -&gt; transfer_batches(batch_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-transfer_personnel_items","title":"TABLE: transfer_personnel_items","text":"<pre><code>CREATE TABLE \"transfer_personnel_items\"(\n            id              INTEGER PRIMARY KEY AUTOINCREMENT,\n            batch_id        TEXT NOT NULL,\n            from_cc_id      TEXT,            -- \u0420\u0406 \u0421\u0403\u0421\u201a\u0420\u00b0\u0421\u0402\u0421\u2039\u0421\u2026 \u0420\u00b7\u0420\u00b0\u0420\u0457\u0420\u0451\u0421\u0403\u0421\u040f\u0421\u2026 \u0420\u0458\u0420\u0455\u0420\u0456\u0420\u00bb\u0420\u0455 \u0420\u00b1\u0421\u2039\u0421\u201a\u0421\u040a NULL\n            to_cc_id        TEXT NOT NULL,\n            headcount_delta REAL NOT NULL,\n            FOREIGN KEY(batch_id) REFERENCES transfer_batches(batch_id)\n        )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 batch_id TEXT 1 0 2 from_cc_id TEXT 0 0 3 to_cc_id TEXT 1 0 4 headcount_delta REAL 1 0 <p>Foreign keys: - batch_id -&gt; transfer_batches(batch_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-transfer_rule_recipients","title":"TABLE: transfer_rule_recipients","text":"<pre><code>CREATE TABLE transfer_rule_recipients(\n        rule_id INTEGER NOT NULL,\n        recipient_cc_id TEXT NOT NULL,\n        share REAL NOT NULL,\n        PRIMARY KEY(rule_id, recipient_cc_id),\n        FOREIGN KEY(rule_id) REFERENCES transfer_rules(rule_id)\n    )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 1 1 1 recipient_cc_id TEXT 1 2 2 share REAL 1 0 <p>Foreign keys: - rule_id -&gt; transfer_rules(rule_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"DB_SCHEMA/#table-transfer_rules","title":"TABLE: transfer_rules","text":"<pre><code>CREATE TABLE transfer_rules(\n            rule_id        INTEGER PRIMARY KEY AUTOINCREMENT,\n            name           TEXT NOT NULL,\n            donor_cc_id    TEXT NOT NULL,\n            enabled        INTEGER NOT NULL DEFAULT 1,\n            scope          TEXT DEFAULT 'direct_personnel',\n            recipient_cc_id TEXT\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 0 1 1 name TEXT 1 0 2 donor_cc_id TEXT 1 0 3 enabled INTEGER 1 1 0 4 scope TEXT 0 'direct_personnel' 0 5 recipient_cc_id TEXT 0 0"},{"location":"DB_SCHEMA/#view-mo_last_price_current","title":"VIEW: mo_last_price_current","text":"<pre><code>CREATE VIEW mo_last_price_current AS\n    WITH ranked AS (\n        SELECT *, ROW_NUMBER() OVER (\n            PARTITION BY after_item_id ORDER BY datetime(loaded_at) DESC\n        ) rn\n        FROM mo_prices_history\n    )\n    SELECT after_item_id, price, currency, vendor, source, loaded_at\n    FROM ranked WHERE rn = 1\n</code></pre> <p>References (best-effort): - mo_prices_history - ranked</p> <p></p>"},{"location":"DB_SCHEMA/#view-opex_budget_effective","title":"VIEW: opex_budget_effective","text":"<pre><code>CREATE VIEW opex_budget_effective AS\n        WITH base AS (\n            SELECT cc_id, elem_id, bud_year, SUM(amount) AS amount\n            FROM opex_budget\n            GROUP BY cc_id, elem_id, bud_year\n        ),\n        plus AS (\n            SELECT i.to_cc_id AS cc_id, COALESCE(i.to_elem_id, i.elem_id) AS elem_id, b.bud_year, SUM(i.amount_delta) AS plus_amt\n            FROM transfer_opex_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY i.to_cc_id, COALESCE(i.to_elem_id, i.elem_id), b.bud_year\n        ),\n        minus AS (\n            SELECT i.from_cc_id AS cc_id, i.elem_id, b.bud_year, SUM(-i.amount_delta) AS minus_amt\n            FROM transfer_opex_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY i.from_cc_id, i.elem_id, b.bud_year\n        ),\n        keys AS (\n            SELECT cc_id, elem_id, bud_year FROM base\n            UNION\n            SELECT cc_id, elem_id, bud_year FROM plus\n            UNION\n            SELECT cc_id, elem_id, bud_year FROM minus\n        )\n        SELECT k.cc_id, k.elem_id, k.bud_year,\n               COALESCE(b.amount, 0) + COALESCE(p.plus_amt, 0) + COALESCE(m.minus_amt, 0) AS amount_effective\n        FROM keys k\n        LEFT JOIN base  b ON b.cc_id = k.cc_id AND b.elem_id = k.elem_id AND b.bud_year = k.bud_year\n        LEFT JOIN plus  p ON p.cc_id = k.cc_id AND p.elem_id = k.elem_id AND p.bud_year = k.bud_year\n        LEFT JOIN minus m ON m.cc_id = k.cc_id AND m.elem_id = k.elem_id AND m.bud_year = k.bud_year\n</code></pre> <p>References (best-effort): - opex_budget - transfer_opex_items - transfer_batches - base - plus - minus - keys</p> <p></p>"},{"location":"DB_SCHEMA/#view-ovh_tariffs_wide_compat","title":"VIEW: ovh_tariffs_wide_compat","text":"<pre><code>CREATE VIEW ovh_tariffs_wide_compat AS\n            SELECT\n                overhead_group,\n                year,\n                scenario,\n                MAX(CASE WHEN cost_type = 'scrap' THEN share END)    AS scrap_share,\n                MAX(CASE WHEN cost_type = 'depr_opr' THEN share END) AS depr_opr_share,\n                MAX(CASE WHEN cost_type = 'log' THEN share END)      AS log_share,\n                MAX(CASE WHEN cost_type = 'adm' THEN share END)      AS adm_share\n            FROM ovh_tariffs\n            GROUP BY overhead_group, year, scenario\n</code></pre> <p>References (best-effort): - ovh_tariffs</p> <p></p>"},{"location":"DB_SCHEMA/#view-personnel_yearly","title":"VIEW: personnel_yearly","text":"<pre><code>CREATE VIEW personnel_yearly AS\n        SELECT TRIM(cc_id) AS cc_id,\n               CAST(substr(TRIM(ym), 1, 4) AS INTEGER) AS bud_year,\n               AVG(headcount) AS headcount_avg_year\n        FROM personnel_monthly\n        GROUP BY TRIM(cc_id), CAST(substr(TRIM(ym), 1, 4) AS INTEGER)\n</code></pre> <p>References (best-effort): - personnel_monthly</p> <p></p>"},{"location":"DB_SCHEMA/#view-personnel_yearly_effective","title":"VIEW: personnel_yearly_effective","text":"<pre><code>CREATE VIEW personnel_yearly_effective AS\n        WITH base AS (\n            SELECT TRIM(cc_id) AS cc_id,\n                   CAST(substr(TRIM(ym), 1, 4) AS INTEGER) AS bud_year,\n                   AVG(headcount) AS headcount_avg_year\n            FROM personnel_monthly\n            GROUP BY TRIM(cc_id), CAST(substr(TRIM(ym), 1, 4) AS INTEGER)\n        ),\n        delta_in AS (\n            SELECT TRIM(i.to_cc_id) AS cc_id,\n                   CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER) AS bud_year,\n                   SUM(i.headcount_delta) AS delta\n            FROM transfer_personnel_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY TRIM(i.to_cc_id), CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER)\n        ),\n        delta_out AS (\n            SELECT TRIM(i.from_cc_id) AS cc_id,\n                   CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER) AS bud_year,\n                   -SUM(i.headcount_delta) AS delta\n            FROM transfer_personnel_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            WHERE i.from_cc_id IS NOT NULL\n            GROUP BY TRIM(i.from_cc_id), CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER)\n        ),\n        deltas AS (\n            SELECT cc_id, bud_year, SUM(delta) AS headcount_delta_year\n            FROM (\n                SELECT * FROM delta_in\n                UNION ALL\n                SELECT * FROM delta_out\n            )\n            GROUP BY cc_id, bud_year\n        ),\n        keys AS (\n            SELECT cc_id, bud_year FROM base\n            UNION\n            SELECT cc_id, bud_year FROM deltas\n        )\n        SELECT k.cc_id,\n               k.bud_year,\n               COALESCE(b.headcount_avg_year, 0) + COALESCE(d.headcount_delta_year, 0)\n                   AS headcount_avg_year_effective\n        FROM keys k\n        LEFT JOIN base   b ON b.cc_id = k.cc_id AND b.bud_year = k.bud_year\n        LEFT JOIN deltas d ON d.cc_id = k.cc_id AND d.bud_year = k.bud_year\n</code></pre> <p>References (best-effort): - personnel_monthly - transfer_personnel_items - transfer_batches - delta_in - delta_out - base - deltas - keys</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_alloc_lineage","title":"VIEW: v_alloc_lineage","text":"<pre><code>CREATE VIEW v_alloc_lineage AS\n        SELECT * FROM lineage_links\n</code></pre> <p>References (best-effort): - lineage_links</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_allocation_rule_effective","title":"VIEW: v_allocation_rule_effective","text":"<pre><code>CREATE VIEW v_allocation_rule_effective AS\n        WITH scoped AS (\n            SELECT r.rule_set_id,\n                   rs.rule_id,\n                   rs.cc_node_id AS cc_id,\n                   rs.elem_node_id AS elem_id,\n                   r.priority,\n                   r.driver_code,\n                   (CASE WHEN rs.cc_node_id IS NOT NULL THEN 1 ELSE 0 END\n                    + CASE WHEN rs.elem_node_id IS NOT NULL THEN 1 ELSE 0 END) AS specificity\n            FROM rules r\n            LEFT JOIN rule_scope rs ON rs.rule_id = r.rule_id\n        ),\n        ranked AS (\n            SELECT *,\n                   ROW_NUMBER() OVER (\n                     PARTITION BY rule_set_id, cc_id, elem_id\n                     ORDER BY specificity DESC, priority ASC, rule_id ASC\n                   ) AS rn\n            FROM scoped\n        )\n        SELECT rule_set_id, cc_id, elem_id, rule_id, driver_code, priority, specificity\n        FROM ranked\n        WHERE rn = 1\n</code></pre> <p>References (best-effort): - rules - rule_scope - scoped - ranked</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_cogs_unit","title":"VIEW: v_cogs_unit","text":"<pre><code>CREATE VIEW v_cogs_unit AS\n        WITH alloc AS (\n          SELECT ca.period, ca.scenario, ca.product_id, ca.component_code, SUM(ca.amount) AS amount\n          FROM cost_allocations ca\n          JOIN rules r ON r.rule_id = ca.rule_id\n          JOIN active_alloc_sets aas ON aas.scenario = ca.scenario AND aas.rule_set_id = r.rule_set_id\n          GROUP BY ca.period, ca.scenario, ca.product_id, ca.component_code\n        ),\n        mat AS (\n          SELECT dv.period,\n                 COALESCE(dv.scenario, 'BASE') AS scenario,\n                 dv.product_id,\n                 'MATCOST' AS component_code,\n                 SUM(dv.value) AS amount\n          FROM driver_values dv\n          WHERE dv.driver_code = 'MATCOST'\n          GROUP BY dv.period, COALESCE(dv.scenario, 'BASE'), dv.product_id\n        ),\n        allc AS (\n          SELECT * FROM alloc\n          UNION ALL\n          SELECT * FROM mat\n        )\n        SELECT a.period,\n               a.scenario,\n               a.product_id,\n               a.component_code,\n               a.amount,\n               b.qty,\n               CASE WHEN COALESCE(b.qty,0)=0 THEN 0.0 ELSE a.amount / b.qty END AS amount_per_unit\n        FROM allc a\n        LEFT JOIN v_prod_budget_active b\n          ON b.product_id = a.product_id AND b.month_code = a.period\n</code></pre> <p>References (best-effort): - cost_allocations - rules - active_alloc_sets - driver_values - alloc - mat - allc - v_prod_budget_active</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_component_pools","title":"VIEW: v_component_pools","text":"<pre><code>CREATE VIEW v_component_pools AS\n        WITH base AS (\n          SELECT cc_id, elem_id, bud_year, amount_effective\n          FROM opex_budget_effective\n        ),\n        mapped AS (\n          SELECT b.cc_id, m.component_code, b.bud_year, b.amount_effective\n          FROM base b\n          JOIN v_elem_component_map m ON m.elem_id = b.elem_id\n        ),\n        months(m) AS (\n          VALUES(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)\n        ),\n        expanded AS (\n          SELECT printf('%04d-%02d', bud_year, m) AS period,\n                 'PLAN' AS scenario,\n                 cc_id,\n                 component_code,\n                 amount_effective / 12.0 AS amount\n          FROM mapped, months\n        )\n        SELECT period, scenario, cc_id, component_code, SUM(amount) AS amount\n        FROM expanded\n        GROUP BY period, scenario, cc_id, component_code\n</code></pre> <p>References (best-effort): - opex_budget_effective - base - v_elem_component_map - mapped - expanded</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_driver_catalog","title":"VIEW: v_driver_catalog","text":"<pre><code>CREATE VIEW v_driver_catalog AS\n        SELECT driver_code, name, unit, granularity, agg_rule, source_policy, is_ratio\n        FROM drivers\n</code></pre> <p>References (best-effort): - drivers</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_driver_values","title":"VIEW: v_driver_values","text":"<pre><code>CREATE VIEW v_driver_values AS\n        SELECT set_id, period, scenario, driver_code, product_id, cc_id, elem_id, value, unit, source_ref, loaded_at\n        FROM driver_values\n</code></pre> <p>References (best-effort): - driver_values</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_elem_component_map","title":"VIEW: v_elem_component_map","text":"<pre><code>CREATE VIEW v_elem_component_map AS\n        WITH RECURSIVE\n        roots(component_code, root_id) AS (\n          SELECT 'LABOR_DIRECT', 'MFC_PRIM_1' UNION ALL\n          SELECT 'OPR_DIRECT',   'MFC_PRIM_2' UNION ALL\n          SELECT 'DEPR_DIRECT',  'MFC_PRIM_3'\n        ),\n        closure(component_code, elem_id) AS (\n          SELECT component_code, root_id FROM roots\n          UNION ALL\n          SELECT c.component_code, e.child_id\n          FROM closure c\n          JOIN elem_edges e ON e.parent_id = c.elem_id\n        )\n        SELECT DISTINCT component_code, elem_id\n        FROM closure\n</code></pre> <p>References (best-effort): - roots - closure - elem_edges</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_item_cg","title":"VIEW: v_item_cg","text":"<pre><code>CREATE VIEW v_item_cg AS\n    SELECT\n      i.item_id,\n      i.article,\n      i.name,\n      i.uom,\n      i.matl_group,\n      i.product_hierarchy,\n      cm.commodity_group,\n      cm.commodity_group_text\n    FROM items i\n    LEFT JOIN commodity_map cm\n      ON cm.matl_prefix = substr(COALESCE(i.matl_group,''),1,3)\n</code></pre> <p>References (best-effort): - items - commodity_map</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_labor_cost_unit_total","title":"VIEW: v_labor_cost_unit_total","text":"<pre><code>CREATE VIEW v_labor_cost_unit_total AS\n        WITH cfg AS (\n          SELECT month_code AS period FROM active_periods WHERE id=1\n        ),\n        alloc AS (\n          SELECT ca.product_id, SUM(ca.amount) AS amount\n          FROM cost_allocations ca, cfg\n          WHERE ca.period = cfg.period AND ca.component_code = 'LABOR_DIRECT'\n          GROUP BY ca.product_id\n        ),\n        qty AS (\n          SELECT b.product_id, b.qty FROM v_prod_budget_active b, cfg\n          WHERE b.month_code = cfg.period\n        )\n        SELECT a.product_id,\n               CASE WHEN COALESCE(q.qty,0)=0 THEN 0.0 ELSE a.amount / q.qty END AS cost_total\n        FROM alloc a\n        LEFT JOIN qty q ON q.product_id = a.product_id\n</code></pre> <p>References (best-effort): - active_periods - cost_allocations - v_prod_budget_active - alloc - qty</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_opr_cost_unit_total","title":"VIEW: v_opr_cost_unit_total","text":"<pre><code>CREATE VIEW v_opr_cost_unit_total AS\n        WITH cfg AS (\n          SELECT month_code AS period FROM active_periods WHERE id=1\n        ),\n        alloc AS (\n          SELECT ca.product_id, SUM(ca.amount) AS amount\n          FROM cost_allocations ca, cfg\n          WHERE ca.period = cfg.period AND ca.component_code = 'OPR_DIRECT'\n          GROUP BY ca.product_id\n        ),\n        qty AS (\n          SELECT b.product_id, b.qty FROM v_prod_budget_active b, cfg\n          WHERE b.month_code = cfg.period\n        )\n        SELECT a.product_id,\n               CASE WHEN COALESCE(q.qty,0)=0 THEN 0.0 ELSE a.amount / q.qty END AS cost_total\n        FROM alloc a\n        LEFT JOIN qty q ON q.product_id = a.product_id\n</code></pre> <p>References (best-effort): - active_periods - cost_allocations - v_prod_budget_active - alloc - qty</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_ovh_cost_unit","title":"VIEW: v_ovh_cost_unit","text":"<pre><code>CREATE VIEW v_ovh_cost_unit AS\n        SELECT product_id, depr_opr_cost, log_cost, adm_cost FROM ovh_cost_unit\n</code></pre> <p>References (best-effort): - ovh_cost_unit</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_ovh_flat_compat","title":"VIEW: v_ovh_flat_compat","text":"<pre><code>CREATE VIEW v_ovh_flat_compat AS\n        SELECT\n          product_id,\n          node_product_id,\n          overhead_group,\n          driver_code           AS base_kind,\n          driver_value_per_unit AS base_value_per_unit,\n          driver_value_per_unit AS mat_cost,\n          source,\n          year\n        FROM ovh_flat\n</code></pre> <p>References (best-effort): - ovh_flat</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_price_by_article","title":"VIEW: v_price_by_article","text":"<pre><code>CREATE VIEW v_price_by_article AS\n    SELECT\n      item_code,\n      MAX(CASE WHEN scenario_code='BG25' THEN price END) AS BG25,\n      MAX(CASE WHEN scenario_code='FC3'  THEN price END) AS FC3,\n      MAX(CASE WHEN scenario_code='BG26' THEN price END) AS BG26\n    FROM v_price_by_scenario\n    WHERE currency='RUB'   -- \u0420\u0457\u0421\u0402\u0420\u0451 \u0420\u0405\u0420\u00b5\u0420\u0455\u0420\u00b1\u0421\u2026\u0420\u0455\u0420\u0491\u0420\u0451\u0420\u0458\u0420\u0455\u0421\u0403\u0421\u201a\u0420\u0451 \u0420\u0458\u0420\u0455\u0420\u00b6\u0420\u0405\u0420\u0455 \u0421\u0453\u0420\u00b1\u0421\u0402\u0420\u00b0\u0421\u201a\u0421\u040a/\u0420\u0457\u0420\u00b0\u0421\u0402\u0420\u00b0\u0420\u0458\u0420\u00b5\u0421\u201a\u0421\u0402\u0420\u0451\u0420\u00b7\u0420\u0455\u0420\u0406\u0420\u00b0\u0421\u201a\u0421\u040a\n    GROUP BY item_code\n</code></pre> <p>References (best-effort): - v_price_by_scenario</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_price_by_scenario-materials-pipeline","title":"VIEW: v_price_by_scenario (materials pipeline)","text":"<pre><code>CREATE VIEW v_price_by_scenario AS\n    WITH items AS (\n      SELECT DISTINCT item_code, currency FROM rm_prices\n    )\n    SELECT\n      ps.scenario_code,\n      i.item_code,\n      i.currency,\n      (\n        SELECT rp.price\n        FROM rm_prices rp\n        WHERE rp.item_code = i.item_code\n          AND rp.currency  = i.currency\n          AND rp.effective_from &lt;= ps.asof_date\n        ORDER BY rp.effective_from DESC\n        LIMIT 1\n      ) AS price\n    FROM price_scenarios ps\n    CROSS JOIN items i\n</code></pre> <p>References (best-effort): - rm_prices - price_scenarios - items</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_prod_budget_active","title":"VIEW: v_prod_budget_active","text":"<pre><code>CREATE VIEW v_prod_budget_active AS\n    WITH cfg AS (SELECT vol_scenario FROM active_scenarios WHERE id=1)\n    SELECT b.*\n    FROM prod_budget b\n    JOIN cfg ON cfg.vol_scenario = b.scenario\n</code></pre> <p>References (best-effort): - active_scenarios - prod_budget - cfg</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_rate_parity","title":"VIEW: v_rate_parity","text":"<pre><code>CREATE VIEW v_rate_parity AS\n        WITH \n        -- Effective rates per department (pick best/latest)\n        rates_ranked AS (\n          SELECT department_code, rate_per_hour, currency, bud_year, source, calc_at,\n                 ROW_NUMBER() OVER (\n                   PARTITION BY department_code\n                   ORDER BY COALESCE(bud_year,0) DESC,\n                            CASE WHEN lower(COALESCE(source,''))='calc' THEN 0 ELSE 1 END,\n                            datetime(COALESCE(calc_at,'1970-01-01')) DESC\n                 ) AS rn\n          FROM v_labor_rates_snapshot\n        ),\n        effective_rates AS (\n          SELECT department_code, rate_per_hour\n          FROM rates_ranked WHERE rn=1\n        ),\n        -- Hours per unit per product and department from routing_flat\n        hrs AS (\n          SELECT product_id, department_code, SUM(hours_per_unit) AS hpu\n          FROM routing_flat\n          GROUP BY product_id, department_code\n        ),\n        -- Plan qty by period (PLAN scenario only for parity)\n        plan AS (\n          SELECT month_code AS period, product_id, qty\n          FROM prod_budget\n          WHERE scenario = 'PLAN'\n        ),\n        -- Compute routing\u0413\u2014rate\u0413\u2014qty per (period, cc, product)\n        rrq AS (\n          SELECT p.period,\n                 m.cc_id,\n                 h.product_id,\n                 SUM(h.hpu * er.rate_per_hour * p.qty) AS amount\n          FROM hrs h\n          JOIN effective_rates er ON er.department_code = h.department_code\n          JOIN dep_cc_map m ON m.department_code = h.department_code\n          JOIN plan p ON p.product_id = h.product_id\n          GROUP BY p.period, m.cc_id, h.product_id\n        ),\n        sum_rrq AS (\n          SELECT period, cc_id, SUM(amount) AS amount\n          FROM rrq\n          GROUP BY period, cc_id\n        ),\n        pools AS (\n          SELECT period, scenario, cc_id, component_code, amount\n          FROM v_component_pools\n          WHERE component_code='LABOR_DIRECT'\n        )\n        SELECT p.period,\n               p.scenario,\n               p.cc_id,\n               p.component_code,\n               p.amount AS pool_from_opex,\n               COALESCE(r.amount,0) AS sum_routing_rate_qty,\n               COALESCE(p.amount,0) - COALESCE(r.amount,0) AS delta\n        FROM pools p\n        LEFT JOIN sum_rrq r ON r.period = p.period AND r.cc_id = p.cc_id\n</code></pre> <p>References (best-effort): - v_labor_rates_snapshot - rates_ranked - routing_flat - prod_budget - hrs - effective_rates - dep_cc_map - plan - rrq - v_component_pools - pools - sum_rrq</p> <p></p>"},{"location":"DB_SCHEMA/#view-v_recon_checks","title":"VIEW: v_recon_checks","text":"<pre><code>CREATE VIEW v_recon_checks AS\n        WITH plan AS (\n          SELECT product_id, qty, month_code FROM v_prod_budget_active\n        ),\n        pool AS (\n          SELECT m.cc_id,\n                 p.month_code AS period,\n                 SUM(l.cost_total * p.qty) AS pool_amount\n          FROM labor_cost_unit l\n          JOIN dep_cc_map m ON m.department_code = l.department_code\n          JOIN plan p ON p.product_id = l.product_id\n          GROUP BY m.cc_id, p.month_code\n        ),\n        alloc AS (\n          SELECT ca.cc_id, ca.period, SUM(ca.amount) AS allocated\n          FROM cost_allocations ca\n          JOIN rules r ON r.rule_id = ca.rule_id\n          JOIN active_alloc_sets aas ON aas.scenario = ca.scenario AND aas.rule_set_id = r.rule_set_id\n          WHERE ca.component_code = 'LABOR_DIRECT'\n          GROUP BY ca.cc_id, ca.period\n        )\n        SELECT COALESCE(p.cc_id, a.cc_id) AS cc_id,\n               COALESCE(p.period, a.period) AS period,\n               COALESCE(p.pool_amount,0) AS pool_amount,\n               COALESCE(a.allocated,0) AS allocated,\n               COALESCE(a.allocated,0) - COALESCE(p.pool_amount,0) AS delta\n        FROM pool p\n        LEFT JOIN alloc a ON a.cc_id = p.cc_id AND a.period = p.period\n        UNION\n        SELECT a.cc_id, a.period, 0 AS pool_amount, a.allocated, a.allocated AS delta\n        FROM alloc a\n        WHERE NOT EXISTS (SELECT 1 FROM pool p WHERE p.cc_id = a.cc_id AND p.period = a.period)\n</code></pre> <p>References (best-effort): - v_prod_budget_active - labor_cost_unit - dep_cc_map - plan - cost_allocations - rules - active_alloc_sets - pool - alloc</p>"},{"location":"ERD/","title":"ERD","text":"<p>Generated: 2025-10-28 12:14 (local) Commit: 74b0a98</p> <p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0433\u0440\u0430\u0444 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446 \u043f\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u0430\u043c.</p> <ul> <li>DOT: <code>./erd/schema.dot</code></li> <li>SVG: (graphviz \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d)</li> </ul>"},{"location":"PROJECT_OVERVIEW/","title":"PROJECT_OVERVIEW","text":"<p>Generated: 2025-10-28 12:13 (local) Commit: 74b0a98</p> <p>See also: DB schema</p>"},{"location":"PROJECT_OVERVIEW/#packages","title":"Packages","text":"<ul> <li>calc</li> <li>db</li> <li>loaders</li> <li>app</li> <li>ui</li> <li>config</li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-calc","title":"Package calc","text":""},{"location":"PROJECT_OVERVIEW/#module-calcalloc_engine","title":"Module calc.alloc_engine","text":"<ul> <li>func: <code>apply_allocations(conn: 'sqlite3.Connection', period: 'str', scenario: 'str', rule_set_id: 'str', run_id: 'Optional[str]' = None, components: 'Optional[List[str]]' = None) -&gt; 'int'</code> \u2014 Apply weight-based allocations for given period and rule set.</li> <li>func: <code>ensure_phase_b_default_rules(conn: 'sqlite3.Connection', rule_set_id: 'str' = 'DEFAULT_2026') -&gt; 'None'</code> \u2014 </li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 Ensure database schema is up to date.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcbudget","title":"Module calc.budget","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>build_budget_frames(conn: 'sqlite3.Connection', months_ym: 'List[str]', vol_scn: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, ktl_split: 'bool' = False) -&gt; 'Dict[str, pd.DataFrame]'</code> \u2014 Build budget sheets dict {sheet_name: DataFrame}: Total and monthly sheets.</li> <li>func: <code>build_budget_preview(conn: 'sqlite3.Connection', months_ym: 'List[str]', vol_scn: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, ktl_split: 'bool' = False) -&gt; 'Tuple[Dict[str, pd.DataFrame], bytes]'</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c DataFrame \u0438 Excel-\u0431\u0430\u0439\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430.</li> <li>func: <code>choose_best_rate_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int') -&gt; 'Optional[str]'</code> \u2014 Pick scenario from v_routing_costs_scenario (or cost_rates) with max coverage for given year.</li> <li>func: <code>export_budget_to_excel(conn: 'sqlite3.Connection', months_ym: 'List[str]', out_xlsx_path: 'str', vol_scn: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, ktl_split: 'bool' = False, frames: 'Dict[str, pd.DataFrame] | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>price_by_article_sql() -&gt; 'str'</code> \u2014 SQL for latest price by scenario (v_price_by_scenario).</li> <li>func: <code>unit_cost_breakdown_v2(conn: 'sqlite3.Connection', product_id: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, rate_scn: 'str | None' = None) -&gt; 'Dict[str, float]'</code> \u2014 Unit cost via v_*_costs_scenario (materials, directs, ovh).</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calccost_tree","title":"Module calc.cost_tree","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>class: <code>AuditResult(...)</code> \u2014 dict() -&gt; new empty dictionary</li> <li>func: <code>TypedDict(typename, fields=None, /, *, total=True, **kwargs)</code> \u2014 A simple typed namespace. At runtime it is equivalent to a plain dict.</li> <li>func: <code>audit_schema_and_data(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', *, load_id: 'str', year: 'int', scenario: 'str | None') -&gt; 'AuditResult'</code> \u2014 </li> <li>func: <code>choose_best_price_load_id(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', *, currency: 'str' = 'RUB') -&gt; 'Optional[str]'</code> \u2014 Pick load_id from rm_prices that provides the best coverage for product BOM components.</li> <li>func: <code>choose_best_rate_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int') -&gt; 'Optional[str]'</code> \u2014 Pick scenario from v_routing_costs_scenario (or cost_rates) with max coverage for given year.</li> <li>func: <code>fetch_direct_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return per-operation direct cost rows with rates from cost_rates.</li> <li>func: <code>fetch_direct_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041f\u0440\u044f\u043c\u044b\u0435 (\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438) \u0447\u0435\u0440\u0435\u0437 v_routing_costs_scenario.</li> <li>func: <code>fetch_indirect_costs_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]') -&gt; 'pd.DataFrame'</code> \u2014 Fetch indirect (non-production) costs from v_ovh_costs_scenario for selected products.</li> <li>func: <code>fetch_materials_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', load_id: 'Optional[str]') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return materials subtree rows with price from rm_prices(load_id) and diagnostics.</li> <li>func: <code>fetch_materials_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', price_scenario: 'str', *, currency: 'str' = 'RUB') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0438\u0437 v_bom_costs_scenario \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0446\u0435\u043d.</li> <li>func: <code>list_price_load_ids(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0412\u0435\u0440\u043d\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a load_id \u0438\u0437 rm_prices (\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0434\u0430\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e).</li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_produced_items(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>list_rate_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_rate_years(conn: 'sqlite3.Connection') -&gt; 'list[int]'</code> \u2014 </li> <li>func: <code>log_report_event(*, log_path: 'str', product_ids: 'Iterable[str]', load_id: 'str', year: 'int', scenario: 'Optional[str]', materials_diag: 'Dict[str, Any] | None' = None, direct_diag: 'Dict[str, Any] | None' = None, error: 'Optional[str]' = None) -&gt; 'None'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcdl_transfers","title":"Module calc.dl_transfers","text":"<ul> <li>func: <code>apply_transfer(conn, bud_year: int, rule_id: int, donorshare: float = 1.0, elem_root: str = 'MFC_PRIM_1', recipients_cc: list[str] | None = None, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0431\u0430\u0442\u0447 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u043e\u0441 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043b\u044c\u0442\u044b).</li> <li>func: <code>apply_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func: <code>create_transfer_batch(conn, bud_year: int, rule_id: int, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func: <code>find_zero_cc(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0426\u0417 \u0441 \u0447\u0430\u0441\u0430\u043c\u0438 &gt; 0 \u0438 \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\u0434\u043e\u0432\u044b\u043c headcount.</li> <li>func: <code>get_cc_hours(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>get_opex_by_cc_elem(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>get_opex_by_cc_elem_detailed(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0421\u0443\u043c\u043c\u044b OPEX \u043f\u043e \u0426\u0417 \u0438 \u041a\u0410\u0416\u0414\u041e\u041c\u0423 elem_id \u0432\u043d\u0443\u0442\u0440\u0438 elem_root,</li> <li>func: <code>get_personnel_year_base(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>plan_transfer(conn, bud_year: int, rule_id: int, donorshare: float = 1.0, elem_root: str = 'MFC_PRIM_1', recipients_cc: list[str] | None = None) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0432\u0430 DF: items_personnel, items_opex.</li> <li>func: <code>plan_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432:</li> <li>func: <code>revert_transfer(conn, batch_id: str)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcdriver_etl","title":"Module calc.driver_etl","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>delete_zero_driver_values(conn: 'sqlite3.Connection', set_id: 'str | None' = None, driver_code: 'str | None' = None, period_prefix: 'str | None' = None) -&gt; 'int'</code> \u2014 Delete rows from driver_values where ABS(value) is effectively zero.</li> <li>func: <code>ensure_driver_catalog_min(conn: 'sqlite3.Connection') -&gt; 'None'</code> \u2014 Insert driver cards for HOURS, MATCOST, PAYROLL_OTHER if missing.</li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 Ensure database schema is up to date.</li> <li>func: <code>hours_coverage_check(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'List[Dict[str, Any]]'</code> \u2014 Return records where HOURS values landed with NULL cc_id (unmapped department -&gt; CC).</li> <li>func: <code>populate_hours_plan_driver_values(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'int'</code> \u2014 Populate driver_values for HOURS (PLAN) for a given month.</li> <li>func: <code>populate_matcost_plan_driver_values(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'int'</code> \u2014 Populate driver_values for MATCOST (PLAN) for a given month.</li> <li>func: <code>populate_payroll_other_plan_driver_values(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'int'</code> \u2014 Populate driver_values for PAYROLL_OTHER (PLAN) for a given month.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcefficiency","title":"Module calc.efficiency","text":"<ul> <li>func: <code>apply_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None, comment: 'str' = 'efficiency normalize', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>compute_efficiency_table(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'pd.DataFrame'</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0426\u0417:</li> <li>func: <code>get_routing_hours(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 Return DataFrame with product_id, department_code, hours_per_unit.</li> <li>func: <code>plan_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calclogger","title":"Module calc.logger","text":"<ul> <li>class: <code>RunLogger(conn, scope: str, params: dict)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcmaterialize","title":"Module calc.materialize","text":"<ul> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>cleanup_routing_tree(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>debug_snapshot(conn, pid: 'str | None', tag: 'str')</code> \u2014 </li> <li>func: <code>materialize_depr_costs(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_flat_bom_fast(conn, product_id: 'str | None' = None, max_depth: 'int' = 20)</code> \u2014 Materialise leaf-level flat BOM fast (iterative, cycle-safe, &lt;=5 min target).</li> <li>func: <code>materialize_flat_bom_recursive(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_labor_costs(conn, product_id: 'str | None' = None, on_date: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_labor_hours(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_mo_cost_unit(conn, *, on_date: 'str | None' = None)</code> \u2014 \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a mo_cost_unit \u0420\u0451\u0420\u00b7 bom_flat \u0413\u2014 mo_last_price (\u0420\u0405\u0420\u00b0 \u0420\u0491\u0420\u00b0\u0421\u201a\u0421\u0453 \u0420\u0451\u0420\u00bb\u0420\u0451 \u0420\u0457\u0420\u0455 \u0421\u201a\u0420\u00b5\u0420\u0454\u0421\u0453\u0421\u2030\u0420\u00b5\u0420\u2116).</li> <li>func: <code>materialize_mo_cost_unit_monthly(conn, month_code: 'str')</code> \u2014 \u0420\u201d\u0420\u00bb\u0421\u040f \u0420\u00b1\u0421\u040b\u0420\u0491\u0420\u00b6\u0420\u00b5\u0421\u201a\u0420\u00b0: \u0421\u201e\u0420\u0451\u0420\u0454\u0421\u0403\u0420\u0451\u0421\u0402\u0421\u0453\u0420\u00b5\u0421\u201a \u0421\u2020\u0420\u00b5\u0420\u0405\u0421\u0453 \u0420\u0405\u0420\u00b0 \u0420\u0458\u0420\u00b5\u0421\u0403\u0421\u040f\u0421\u2020 (\u0420\u0405\u0420\u00b0 \u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u0406\u0421\u2039\u0420\u2116 \u0420\u0491\u0420\u00b5\u0420\u0405\u0421\u040a \u0420\u0458\u0420\u00b5\u0421\u0403\u0421\u040f\u0421\u2020\u0420\u00b0).</li> <li>func: <code>materialize_opr_costs(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_ovh_costs(conn, product_ids=None, year=2026, scenario=None)</code> \u2014 </li> <li>func: <code>materialize_ovh_flat(conn, price_scn: 'str', asof: 'str | None' = None, product_ids: 'list[str] | None' = None)</code> \u2014 \u0420\u040e\u0421\u201a\u0421\u0402\u0420\u0455\u0420\u0451\u0421\u201a ovh_flat \u0420\u0451\u0420\u00b7 ovh_tree, \u0421\u0402\u0420\u00b0\u0421\u0403\u0420\u0457\u0421\u0402\u0420\u00b5\u0420\u0491\u0420\u00b5\u0420\u00bb\u0421\u040f\u0421\u040f \u0420\u045a\u0420\u0452\u0420\u045e\u0420\u2022\u0420\u00a0\u0420\u0098\u0420\u0452\u0420\u203a\u0420\u00ac\u0420\u045c\u0420\u0408\u0420\u00ae \u0421\u0403\u0421\u201a\u0420\u0455\u0420\u0451\u0420\u0458\u0420\u0455\u0421\u0403\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u0455 alloc_group</li> <li>func: <code>materialize_ovh_tree(conn, product_ids=None, max_depth: 'int' = 20)</code> \u2014 \u0420\u040e\u0421\u201a\u0421\u0402\u0420\u0455\u0420\u0451\u0421\u201a ovh_tree \u0421\u0403 \u0420\u0457\u0421\u0402\u0420\u0455\u0421\u201a\u0420\u00b0\u0421\u0403\u0420\u0454\u0420\u0451\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u00b5\u0420\u0458 alloc_group (\u0420\u00b1\u0420\u00bb\u0420\u0451\u0420\u00b6\u0420\u00b0\u0420\u2116\u0421\u20ac\u0420\u00b0\u0421\u040f \u0421\u0403\u0420\u0406\u0420\u00b5\u0421\u0402\u0421\u2026\u0421\u0453 \u0420\u00b7\u0420\u00b0\u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u00b0\u0421\u040f \u0420\u0456\u0421\u0402\u0421\u0453\u0420\u0457\u0420\u0457\u0420\u00b0).</li> <li>func: <code>materialize_routing_flat(conn, product_id: 'str | None' = None)</code> \u2014 \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a routing_flat \u0420\u0405\u0420\u00b0 \u0420\u0455\u0421\u0403\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u0451 routing_tree \u0420\u0451 routing_operations.</li> <li>func: <code>materialize_routing_tree(conn, product_id: 'str | None' = None, max_depth: 'int' = 20)</code> \u2014 </li> <li>func: <code>materialize_scrap_cost_unit(conn, product_ids=None, year=2026, scenario=None)</code> \u2014 SCRAP = \u03a3 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c ( mat_cost_group * scrap_share[group] )</li> <li>func: <code>run_routing_and_labor_pipeline(conn, product_ids=None, *, on_date=None, max_depth=20, clean_before=True, ovh_year=2026)</code> \u2014 \u0420\u2022\u0420\u0491\u0420\u0451\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0405\u0420\u00b0\u0420\u0491\u0421\u2018\u0420\u00b6\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0457\u0420\u00b0\u0420\u2116\u0420\u0457\u0420\u00bb\u0420\u00b0\u0420\u2116\u0420\u0405:</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcmaterialize_sql","title":"Module calc.materialize_sql","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>materialize_bom_flat(conn: 'sqlite3.Connection', product_id: 'str | None' = None) -&gt; 'int'</code> \u2014 Materialize bom_flat using SQL scripts under sql/materialize.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcmo_materials","title":"Module calc.mo_materials","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>get_mo_materials_df(conn: 'sqlite3.Connection', months_ym: 'Iterable[str]', vol_scn: 'str', price_scn: 'Optional[str]' = None, use_monthly_if_present: 'bool' = True) -&gt; 'pd.DataFrame'</code> \u2014 \u0412\u0435\u0440\u043d\u0451\u0442 DataFrame \u0441\u043e \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u043e \u0434\u0435\u0442\u0430\u043b\u044f\u0445 \u043f\u043e\u0441\u043b\u0435 \u041c\u041e \u0438 \u0438\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438.</li> <li>func: <code>streamlit_app(db_path: 'Optional[str | None]' = None)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcopr_rates_calc","title":"Module calc.opr_rates_calc","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>class: <code>Sequence()</code> \u2014 All the operations on a read-only sequence.</li> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>amounts_by_cc_for_elemgroup(conn, bud_year: int, cc_list: list[str], elem_list: list[str]) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>amounts_by_cc_for_elemgroup_sql(conn, bud_year: int, cc_list: collections.abc.Sequence[str], elem_list: collections.abc.Sequence[str]) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>compare_with_previous(conn, df_current: pandas.core.frame.DataFrame, component_code: str, base_scenario: str | None = None) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0415\u0441\u043b\u0438 base_scenario \u0437\u0430\u0434\u0430\u043d \u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u2192 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043e \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u043e\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f.</li> <li>func: <code>component_code_for_kind(kind: str, components: pandas.core.frame.DataFrame | None = None) -&gt; str</code> \u2014 </li> <li>func: <code>compute_rates(conn, price_scn: str, months_ym: list[str], cc_root: str, kind: str = 'labor', vol_scn: str = 'BG26_VOL') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043a\u0438 = (\u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) / (\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b) \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0426\u0417.</li> <li>func: <code>fetch_last_snapshot(conn, scenario: str, component_code: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>hours_by_department(conn, months_ym: list[str], *, vol_scn: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b \u043f\u043e \u0443\u0447\u0430\u0441\u0442\u043a\u0430\u043c \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0441\u044f\u0446\u044b:</li> <li>func: <code>hours_by_department_sql(conn, months_ym: collections.abc.Sequence[str], *, vol_scn: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>list_rate_components(conn) -&gt; pandas.core.frame.DataFrame</code> \u2014 Return active cost rate components with fallbacks.</li> <li>func: <code>save_rates_cost_rates(conn, df_rates: pandas.core.frame.DataFrame, component_code: str, scenario: str = '') -&gt; int</code> \u2014 Save computed yearly rates into unified cost_rates (idempotent).</li> <li>func: <code>scenario_to_year(price_scn: str, default: int | None = None) -&gt; int</code> \u2014 Derive numeric budget year from scenario code (e.g. BG26_VOL -&gt; 2026).</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcovh_flat","title":"Module calc.ovh_flat","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>materialize_ovh_flat(conn: 'sqlite3.Connection') -&gt; 'int'</code> \u2014 Materialize ovh_flat via SQL scripts under sql/materialize.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcovh_rates_calc","title":"Module calc.ovh_rates_calc","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>class: <code>TariffParams(year: 'int', vol_scenario: 'str', price_scenario: 'str', routing_scenario: 'str') -&gt; None</code> \u2014 TariffParams(year: 'int', vol_scenario: 'str', price_scenario: 'str', routing_scenario: 'str')</li> <li>class: <code>TariffPreview(params: 'TariffParams', summary: 'pd.DataFrame', shares: 'pd.DataFrame', totals: 'dict[str, float]', distributions: 'dict[str, pd.DataFrame]') -&gt; None</code> \u2014 TariffPreview(params: 'TariffParams', summary: 'pd.DataFrame', shares: 'pd.DataFrame', totals: 'dict[str, float]', distributions: 'dict[str, pd.DataFrame]')</li> <li>func: <code>build_cost_distributions(summary: 'pd.DataFrame', totals: 'dict[str, float]') -&gt; 'dict[str, pd.DataFrame]'</code> \u2014 </li> <li>func: <code>calculate_tariff_summary(material_df: 'pd.DataFrame', admin_df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>expand_tariff_rows(summary: 'pd.DataFrame', *, scrap_share: 'Optional[float]' = None, distributions: 'Optional[dict[str, pd.DataFrame]]' = None) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>fetch_admin_base(conn: 'sqlite3.Connection', params: 'TariffParams') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>fetch_cost_pools(conn: 'sqlite3.Connection', year: 'int') -&gt; 'dict[str, float]'</code> \u2014 </li> <li>func: <code>fetch_material_base(conn: 'sqlite3.Connection', params: 'TariffParams') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_routing_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_volume_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>preview_tariffs(conn: 'sqlite3.Connection', *, year: 'Optional[int]' = None, vol_scenario: 'Optional[str]' = None, price_scenario: 'Optional[str]' = None, routing_scenario: 'Optional[str]' = None, scrap_share: 'Optional[float]' = None) -&gt; 'TariffPreview'</code> \u2014 </li> <li>func: <code>save_tariffs(conn: 'sqlite3.Connection', preview: 'TariffPreview', *, cost_types: 'Optional[Iterable[str]]' = None) -&gt; 'int'</code> \u2014 </li> <li>func: <code>write_scrap_tariffs(conn: 'sqlite3.Connection', params: 'TariffParams', share: 'float', *, year: 'Optional[int]' = None, groups: 'Optional[Sequence[str]]' = None) -&gt; 'int'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcppv_by_cg","title":"Module calc.ppv_by_cg","text":"<ul> <li>func: <code>compute_ppv_by_cg(conn: 'sqlite3.Connection', *, vol_s: 'str', s1: 'str', s2: 'str', s3: 'str', pure_only: 'bool' = False) -&gt; 'Dict[str, pd.DataFrame]'</code> \u2014 \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c PPV \u043f\u043e commodity group.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcquality","title":"Module calc.quality","text":"<ul> <li>func: <code>check_bom_components_missing_prices(conn)</code> \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 BOM \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 rm_prices (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>func: <code>check_bom_unknown_items(conn)</code> \u2014 BOM \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432 items.</li> <li>func: <code>check_budget_has_nonproduced(conn)</code> \u2014 \u0412 prod_budget \u0435\u0441\u0442\u044c product_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 items \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a is_produced=0.</li> <li>func: <code>check_budget_missing_routing_ops(conn)</code> \u2014 Produced items in active volume scenario that are missing in routing_flat,</li> <li>func: <code>check_items_duplicate_article(conn)</code> \u2014 \u0414\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432 (\u043e\u0434\u0438\u043d article \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e item_id).</li> <li>func: <code>check_items_nonproduced_has_routing_or_ovh(conn)</code> \u2014 \u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=0) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 routing_group/ovh_group_code (\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e).</li> <li>func: <code>check_items_produced_missing_routing_or_ovh(conn)</code> \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=1), \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0443\u0441\u0442\u044b routing_group \u0438\u043b\u0438 ovh_group_code.</li> <li>func: <code>check_items_required_fields(conn)</code> \u2014 \u041f\u0443\u0441\u0442\u044b\u0435/\u043d\u0443\u043b\u0435\u0432\u044b\u0435 article, name, uom.</li> <li>func: <code>check_ovh_groups_missing_tariffs(conn, year: 'int | None' = None, scenario: 'str | None' = None)</code> \u2014 \u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0437 ovh_flat, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 ovh_tariffs (\u043f\u043e \u0433\u043e\u0434\u0443; \u0435\u0441\u043b\u0438 \u0433\u043e\u0434 None \u2014 \u0431\u0435\u0440\u0451\u043c max(year)).</li> <li>func: <code>check_routing_flat_missing_rates(conn)</code> \u2014 \u0414\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0438\u0437 routing_flat \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 labor_rates_snapshot.</li> <li>func: <code>render_quality_ui(conn, st)</code> \u2014 \u042d\u043a\u0440\u0430\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0430\u0448\u0435\u0439 \u0432\u044c\u044e\u0448\u043a\u0435:</li> <li>func: <code>run_quality_checks(conn, selected: 'list[str] | None' = None) -&gt; 'dict[str, pd.DataFrame]'</code> \u2014 selected: \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a. \u0415\u0441\u043b\u0438 None \u2014 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcrouting_flat","title":"Module calc.routing_flat","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>materialize_routing_flat(conn: 'sqlite3.Connection') -&gt; 'int'</code> \u2014 Materialize routing_flat via SQL scripts under sql/materialize.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calcrouting_hours","title":"Module calc.routing_hours","text":"<ul> <li>func: <code>get_routing_hours(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 Return DataFrame with product_id, department_code, hours_per_unit.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-calctransfers_opex","title":"Module calc.transfers_opex","text":"<ul> <li>func: <code>apply_cycle(conn, cycle_id: 'int', cycle_no: 'int', comment: 'str', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>apply_transfer_opex_by_rules(conn, bud_year: 'int', elem_root: 'str', cycle_no: 'int', rules_df, comment: 'str', created_by: 'str | None', rule_id: 'int') -&gt; 'str'</code> \u2014 </li> <li>func: <code>ensure_rule_for_cycle(conn, cycle_id: 'int') -&gt; 'int'</code> \u2014 </li> <li>func: <code>load_cycle_meta(conn: 'sqlite3.Connection', cycle_id: 'int')</code> \u2014 </li> <li>func: <code>load_cycle_rule_id(conn: 'sqlite3.Connection', cycle_id: 'int') -&gt; 'int'</code> \u2014 </li> <li>func: <code>load_cycle_rules_df(conn: 'sqlite3.Connection', cycle_id: 'int') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>load_rule_meta(conn: 'sqlite3.Connection', rule_id: 'int')</code> \u2014 </li> <li>func: <code>load_rule_recipients_df(conn: 'sqlite3.Connection', rule_id: 'int') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>plan_transfer_opex_by_rules(conn: 'sqlite3.Connection', bud_year: 'int', elem_root: 'str', cycle_no: 'int', rules_df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 rules_df: columns = donor_cc_id, to_cc_id, share (0..1), optional to_elem_id.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-db","title":"Package db","text":""},{"location":"PROJECT_OVERVIEW/#module-dbconnection","title":"Module db.connection","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>contextmanager(func)</code> \u2014 @contextmanager decorator.</li> <li>func: <code>get_table_info(conn, table: str)</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-dbensure_mfc_report","title":"Module db.ensure_mfc_report","text":"<ul> <li>func: <code>ensure_mfc_report_defs_table(conn)</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0442\u0447\u0451\u0442\u0430 (\u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Target2026/2027 \u0438 \u0442.\u043f.).</li> <li>func: <code>ensure_mfc_report_indexes(conn)</code> \u2014 \u0414\u043e\u043f. \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043f\u043e \u0433\u043e\u0434\u0443/\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c \u0447\u0435\u0440\u0435\u0437 mfc_report_defs.</li> <li>func: <code>ensure_mfc_report_line_rules_table(conn)</code> \u2014 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</li> <li>func: <code>ensure_mfc_report_lines_table(conn)</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0451\u0442\u0430 (\u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a).</li> <li>func: <code>ensure_mfc_report_rules_add_sets(conn)</code> \u2014 </li> <li>func: <code>ensure_mfc_report_schema(conn)</code> \u2014 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0431\u0451\u0440\u0442\u043a\u0430: \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0451 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430-\u0441\u0431\u043e\u0440\u043a\u0438 \u043e\u0442\u0447\u0451\u0442\u043e\u0432.</li> <li>func: <code>ensure_mfc_sets_schema(conn)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-dbensure_mo","title":"Module db.ensure_mo","text":"<ul> <li>func: <code>ensure_mo_tables(conn)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-dbqueries","title":"Module db.queries","text":"<ul> <li>func: <code>fetch_flat_bom_for_parent(conn, product_id)</code> \u2014 </li> <li>func: <code>fetch_labor_cost_unit(conn, product_id)</code> \u2014 </li> <li>func: <code>fetch_labor_total(conn, product_id) -&gt; float</code> \u2014 </li> <li>func: <code>fetch_materials_from_bom(conn, product_id)</code> \u2014 </li> <li>func: <code>fetch_produced_items(conn)</code> \u2014 </li> <li>func: <code>search_items_by_tokens(conn, tokens: str | list[str], limit_per_token: int = 20) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0418\u0449\u0435\u0442 items \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 (\u0430\u0440\u0442\u0438\u043a\u0443\u043b/\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u043a\u043e\u0434).</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-dbschema","title":"Module db.schema","text":"<ul> <li>class: <code>Migration(version: int, name: str, apply: Callable[[sqlite3.Connection], NoneType]) -&gt; None</code> \u2014 Migration(version: int, name: str, apply: Callable[[sqlite3.Connection], NoneType])</li> <li>class: <code>SchemaManager(migrations: Optional[List[db.schema.Migration]] = None)</code> \u2014 </li> <li>func: <code>add_column_if_missing(conn, table: str, coldef: str)</code> \u2014 </li> <li>func: <code>column_exists(conn, table: str, column: str) -&gt; bool</code> \u2014 </li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>ensure_active_scenarios(conn)</code> \u2014 </li> <li>func: <code>ensure_bom_struct_stage_table(conn)</code> \u2014 </li> <li>func: <code>ensure_bom_table(conn)</code> \u2014 Ensure bom_flat exists and 'bom' view points to it; handle legacy bom table.</li> <li>func: <code>ensure_budget_tables(conn)</code> \u2014 \u0420\u040e\u0420\u0455\u0420\u00b7\u0420\u0491\u0420\u00b0\u0421\u201a\u0421\u040a \u0421\u201a\u0420\u00b0\u0420\u00b1\u0420\u00bb\u0420\u0451\u0421\u2020\u0421\u2039 \u0420\u0491\u0420\u00bb\u0421\u040f \u0420\u00b7\u0420\u00b0\u0420\u0456\u0421\u0402\u0421\u0453\u0420\u00b7\u0420\u0454\u0420\u0451 \u0420\u0451 \u0421\u2026\u0421\u0402\u0420\u00b0\u0420\u0405\u0420\u00b5\u0420\u0405\u0420\u0451\u0421\u040f \u0420\u00b1\u0421\u040b\u0420\u0491\u0420\u00b6\u0420\u00b5\u0421\u201a\u0420\u00b0 OPEX.</li> <li>func: <code>ensure_cc_extra_columns(conn)</code> \u2014 Backwards-compatible helper; migrations add required columns.</li> <li>func: <code>ensure_commodity_map(conn)</code> \u2014 </li> <li>func: <code>ensure_cost_rates_indexes(conn)</code> \u2014 </li> <li>func: <code>ensure_depr_opr_cost_tables(conn)</code> \u2014 </li> <li>func: <code>ensure_depr_opr_rates(conn)</code> \u2014 </li> <li>func: <code>ensure_item_cg_view(conn)</code> \u2014 </li> <li>func: <code>ensure_items_columns(conn)</code> \u2014 </li> <li>func: <code>ensure_labor_cost_table(conn)</code> \u2014 </li> <li>func: <code>ensure_labor_hours_table(conn)</code> \u2014 </li> <li>func: <code>ensure_labor_rates_snapshot_schema(conn)</code> \u2014 </li> <li>func: <code>ensure_mfc_report_schema(conn)</code> \u2014 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0431\u0451\u0440\u0442\u043a\u0430: \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0451 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430-\u0441\u0431\u043e\u0440\u043a\u0438 \u043e\u0442\u0447\u0451\u0442\u043e\u0432.</li> <li>func: <code>ensure_mo_tables(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_bases_year_table(conn)</code> \u2014 \u0420\u040e\u0420\u0405\u0420\u0451\u0420\u0458\u0420\u0455\u0420\u0454 \u0420\u00b1\u0420\u00b0\u0420\u00b7 \u0420\u0451 \u0421\u0402\u0420\u00b0\u0421\u0403\u0420\u0457\u0421\u0402\u0420\u00b5\u0420\u0491\u0420\u00b5\u0420\u00bb\u0420\u00b5\u0420\u0405\u0420\u0451\u0420\u2116 \u0420\u0457\u0420\u0455 \u0420\u0455\u0420\u0406\u0420\u00b5\u0421\u0402\u0421\u2026\u0420\u00b5\u0420\u0491-\u0420\u0456\u0421\u0402\u0421\u0453\u0420\u0457\u0420\u0457\u0420\u00b0\u0420\u0458 (A001\u0432\u0402\u201cA010) \u0420\u0405\u0420\u00b0 \u0420\u0454\u0420\u0455\u0420\u0405\u0420\u0454\u0421\u0402\u0420\u00b5\u0421\u201a\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0456\u0420\u0455\u0420\u0491.</li> <li>func: <code>ensure_ovh_cost_unit_table(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_costs_table(conn)</code> \u2014 Ensure ovh_costs table exists and is indexed.</li> <li>func: <code>ensure_ovh_flat_table(conn)</code> \u2014 Ensure ovh_flat unified schema columns exist (idempotent).</li> <li>func: <code>ensure_ovh_tariffs_indexes(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_tariffs_table(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_views(conn)</code> \u2014 </li> <li>func: <code>ensure_price_views(conn)</code> \u2014 </li> <li>func: <code>ensure_prod_budget_table(conn)</code> \u2014 </li> <li>func: <code>ensure_prod_budget_views(conn)</code> \u2014 </li> <li>func: <code>ensure_rm_price_load_table(conn)</code> \u2014 </li> <li>func: <code>ensure_rm_prices(conn)</code> \u2014 </li> <li>func: <code>ensure_routing_flat_table(conn)</code> \u2014 Ensure routing_flat exists with required columns and indexes.</li> <li>func: <code>ensure_routing_tree_table(conn)</code> \u2014 </li> <li>func: <code>ensure_routings_columns(conn)</code> \u2014 </li> <li>func: <code>ensure_run_logging(conn)</code> \u2014 </li> <li>func: <code>ensure_scenario_cost_views(conn)</code> \u2014 Create scenario-based cost views for BOM, routing, and overhead (OVH).</li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 Ensure database schema is up to date.</li> <li>func: <code>ensure_scrap_cost_unit_table(conn)</code> \u2014 </li> <li>func: <code>ensure_transfers_schema(conn)</code> \u2014 </li> <li>func: <code>ensure_unique_routing_group(conn)</code> \u2014 </li> <li>func: <code>get_table_info(conn, table: str)</code> \u2014 </li> <li>func: <code>migrate_ovh_tariffs_to_tall(conn)</code> \u2014 \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b ovh_tariffs \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 (overhead_group, year, scenario, cost_type, share)</li> <li>func: <code>populate_ovh_costs(conn)</code> \u2014 Rebuild ovh_costs for active year with restricted driver\u0432\u2020\u2019cost_type mapping.</li> <li>func: <code>table_exists(conn, name: str) -&gt; bool</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-loaders","title":"Package loaders","text":""},{"location":"PROJECT_OVERVIEW/#module-loadersbom_loader","title":"Module loaders.bom_loader","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>load_bom_components_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_spec_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_bom_specs_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>normalize_bom_components_stage(conn, load_id: 'Optional[str]' = None) -&gt; 'int'</code> \u2014 Normalize bom_components_stage by assigning line_no where missing and clearing error_flag.</li> <li>func: <code>upsert_bom_components_from_stage(conn, load_id: 'str', verbose: 'bool' = False) -&gt; 'int'</code> \u2014 Fast upsert from stage to bom_spec_components for a given load_id.</li> <li>func: <code>upsert_bom_specs_from_stage(conn, load_id: 'str') -&gt; 'int'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersccg_wru_loader","title":"Module loaders.ccg_wru_loader","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>ensure_cc_extra_columns(conn)</code> \u2014 Backwards-compatible helper; migrations add required columns.</li> <li>func: <code>load_cc_structure_twofiles(conn: 'sqlite3.Connection', groups_path: 'str', leaves_path: 'str', sheet_name: 'str | None' = None)</code> \u2014 </li> <li>func: <code>parse_groups_from_ccg(df: 'pd.DataFrame') -&gt; 'Tuple[List[Dict], List[Tuple[str, str]]]'</code> \u2014 </li> <li>func: <code>parse_leaves_from_list(df: 'pd.DataFrame') -&gt; 'Tuple[List[Dict], List[Tuple[str, str]]]'</code> \u2014 </li> <li>func: <code>upsert_cc(conn: 'sqlite3.Connection', nodes: 'List[Dict]', edges: 'List[Tuple[str, str]]')</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersdirect_cost_loader","title":"Module loaders.direct_cost_loader","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>class: <code>ColumnMap(cc_id_col: 'str | None', dept_col: 'str | None', month_cols: 'list[Any]', yearly_col: 'str | None') -&gt; None</code> \u2014 ColumnMap(cc_id_col: 'str | None', dept_col: 'str | None', month_cols: 'list[Any]', yearly_col: 'str | None')</li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>render(conn)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersload_cost_structures","title":"Module loaders.load_cost_structures","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>cc_duplicates_report(conn: sqlite3.Connection) -&gt; Dict[str, pandas.core.frame.DataFrame]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 DataFrame:</li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 </li> <li>func: <code>main()</code> \u2014 </li> <li>func: <code>parse_ccg(df: pandas.core.frame.DataFrame) -&gt; Tuple[List[Dict], List[Tuple[str, str]]]</code> \u2014 \u0420\u0430\u0437\u0431\u043e\u0440 CCG WRU \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u043c\u0451\u043d \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0443\u0440\u043e\u0432\u043d\u0435\u0439 (Level0/LEVEL 1/L2/\u0423\u0440\u043e\u0432\u0435\u043d\u044c 3 \u0438 \u0442.\u0434.).</li> <li>func: <code>parse_mfc(df: pandas.core.frame.DataFrame, leaf_level: int = 5) -&gt; Tuple[List[Dict], List[Tuple[str, str]]]</code> \u2014 \u0421\u043a\u043e\u043b\u044c\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443 MFCPRIM:</li> <li>func: <code>quality_checks(conn: sqlite3.Connection) -&gt; Dict[str, int]</code> \u2014 </li> <li>func: <code>upsert_cc(conn: sqlite3.Connection, nodes: List[Dict], edges: List[Tuple[str, str]]) -&gt; None</code> \u2014 </li> <li>func: <code>upsert_elem(conn, nodes, edges)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersloader_mo_prices","title":"Module loaders.loader_mo_prices","text":"<ul> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersloaders","title":"Module loaders.loaders","text":"<ul> <li>class: <code>Decimal(value='0', context=None)</code> \u2014 Construct a new Decimal object. 'value' can be an integer, string, tuple,</li> <li>class: <code>InvalidOperation(...)</code> \u2014 Base class for arithmetic errors.</li> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>apply_department_suggestions(conn, df_suggestions)</code> \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 suggested_dept \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0441 UNASSIGNED/\u043f\u0443\u0441\u0442\u044b\u043c \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u043c.</li> <li>func: <code>diagnose_routings(conn)</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c DataFrame'\u043e\u0432:</li> <li>func: <code>ensure_items_columns(conn)</code> \u2014 </li> <li>func: <code>ensure_prod_budget_table(conn)</code> \u2014 </li> <li>func: <code>ensure_routings_columns(conn)</code> \u2014 </li> <li>func: <code>is_object_dtype(arr_or_dtype) -&gt; 'bool'</code> \u2014 Check whether an array-like or dtype is of the object dtype.</li> <li>func: <code>load_ovh_tariffs(conn, csv_path: 'str', year: 'int')</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 wide CSV (\u043a\u043e\u043b\u043e\u043d\u043a\u0438: overhead_group, scrap_share, depr_opr_share, log_share, adm_share)</li> <li>func: <code>load_prod_budget_from_xlsx(conn, xlsx_path: 'str', scenario: 'str', article_aliases=None, name_aliases=None)</code> \u2014 \u0414\u0432\u0443\u0445\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a: \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c header=[0,1].</li> <li>func: <code>normalize_date_any(x)</code> \u2014 </li> <li>func: <code>normalize_department_code(dept_raw, operation_text: 'str')</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 (dept_code, source), \u0433\u0434\u0435 source \u2208 {\"given\",\"inferred\",\"default\"}.</li> <li>func: <code>read_rm_prices_xlsx(file_or_path, sheet_name=0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>safe_col(df: pandas.core.frame.DataFrame, name: str, default=None)</code> \u2014 </li> <li>func: <code>split_work_type(row) -&gt; 'pd.Series'</code> \u2014 \u0418\u0437 \"\u0412\u0438\u0434 \u0440\u0430\u0431\u043e\u0442\" \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u044c operation \u0438 department.</li> <li>func: <code>sync_bom_struct_from_stage(conn, spec_codes: 'list[str] | None' = None)</code> \u2014 </li> <li>func: <code>to_float_ru(x)</code> \u2014 </li> <li>func: <code>upsert_bom_general(conn, df: 'pd.DataFrame', allow_stub_items: 'bool' = False)</code> \u2014 </li> <li>func: <code>upsert_bom_struct(conn, df: 'pd.DataFrame', *, default_qty_if_blank: 'float' = 1.0, create_stub_items: 'bool' = True, source_batch: 'str | None' = None)</code> \u2014 </li> <li>func: <code>upsert_depr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func: <code>upsert_items(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func: <code>upsert_items_from_xlsx(conn, df: 'pd.DataFrame')</code> \u2014 \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:</li> <li>func: <code>upsert_labor_rates_periodic(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func: <code>upsert_labor_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func: <code>upsert_opr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func: <code>upsert_rm_prices(conn, df: 'pd.DataFrame', filename: 'str', effective_from: 'str | None' = None, load_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>upsert_routings(conn, df: 'pd.DataFrame')</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 routing \u043d\u0430 \u043e\u0434\u0438\u043d routing_group.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersopex_loader","title":"Module loaders.opex_loader","text":"<ul> <li>func: <code>commit_opex(conn: sqlite3.Connection, load_id: str, bud_year: int = 2026) -&gt; tuple[int, float]</code> \u2014 </li> <li>func: <code>diagnose_opex_stage(conn, load_id: str) -&gt; dict</code> \u2014 </li> <li>func: <code>read_opex_excel(path: str, sheet_name: str = 'INPUT') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>stage_opex(conn, df: pandas.core.frame.DataFrame, sheet_name: str, treat_empty_as_zero: bool = False)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loaderspersonnel_loader","title":"Module loaders.personnel_loader","text":"<ul> <li>class: <code>BinaryIO()</code> \u2014 Typed version of the return of open() in binary mode.</li> <li>func: <code>load_personnel_monthly_from_excel(conn, xls: 'ExcelInput', bud_year: 'int', sheet: 'Optional[str]' = None, clear_year_first: 'bool' = False, source: 'str' = 'file', note: 'str' = None) -&gt; 'tuple[int, pd.DataFrame]'</code> \u2014 \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c (personnel_monthly) \u0438\u0437 xlsx \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a\u0430\u043a \u0432 110_HC_2026.xlsx.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersrules_loader","title":"Module loaders.rules_loader","text":"<ul> <li>func: <code>ensure_rules_schema(conn: 'sqlite3.Connection') -&gt; 'None'</code> \u2014 </li> <li>func: <code>list_rules(conn: 'sqlite3.Connection', q: 'Optional[str]' = None, limit: 'int' = 500) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>read_rules_excel(xlsx_path: 'str') -&gt; 'Tuple[pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0427\u0438\u0442\u0430\u0435\u0442 \u043e\u0431\u0430 \u043b\u0438\u0441\u0442\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430: detail_rules \u0438 fallback_rules (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c).</li> <li>func: <code>toggle_rule(conn: 'sqlite3.Connection', rule_id: 'int', enabled: 'bool') -&gt; 'None'</code> \u2014 </li> <li>func: <code>update_rule_row(conn: 'sqlite3.Connection', row: 'Dict') -&gt; 'None'</code> \u2014 </li> <li>func: <code>upsert_rules(conn: 'sqlite3.Connection', df_rules: 'pd.DataFrame', enable: 'bool' = True) -&gt; 'int'</code> \u2014 \u041c\u0430\u0441\u0441\u043e\u0432\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u0440\u0430\u0432\u0438\u043b. \u0415\u0441\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0441 \u0442\u0435\u043c\u0438 \u0436\u0435 (priority, cost_type, pattern, elem_id) \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u2014</li> <li>func: <code>validate_rules(conn: 'sqlite3.Connection', df_rules: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430: elem_id \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 elem_nodes; \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0443\u0441\u0442\u044b\u043c cost_type \u0438 pattern \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersupdater","title":"Module loaders.updater","text":"<ul> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>apply_items_updates(conn, preview_df: 'pd.DataFrame') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_items_updates; \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 UPDATE \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c.</li> <li>func: <code>apply_std_prices(conn, preview_df: 'pd.DataFrame', source_name: 'str') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_std_prices (\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c note IS NULL),</li> <li>func: <code>preview_items_updates(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>preview_std_prices(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0, article_col='Material', price_col='STD 2026', uom='\u0428\u0422', currency='RUB') -&gt; 'pd.DataFrame'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-loadersutils","title":"Module loaders.utils","text":"<ul> <li>func: <code>drop_1c_totals(df: pandas.core.frame.DataFrame) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>read_1c_txt(file_bytes: bytes, encoding='auto') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>read_excel(file_bytes: bytes) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>safe_col(df: pandas.core.frame.DataFrame, name: str, default=None)</code> \u2014 </li> <li>func: <code>to_float_ru(x)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-app","title":"Package app","text":""},{"location":"PROJECT_OVERVIEW/#module-appapp-import-failed","title":"Module app.app \u2014 import failed","text":""},{"location":"PROJECT_OVERVIEW/#module-appinit_db","title":"Module app.init_db","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>main()</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-ui","title":"Package ui","text":""},{"location":"PROJECT_OVERVIEW/#module-uiadmin_table_editor","title":"Module ui.admin_table_editor","text":"<ul> <li>func: <code>render_table_editor(conn: sqlite3.Connection)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uialloc_wizard","title":"Module ui.alloc_wizard","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>class: <code>DraftRule(component_code: 'str' = 'LABOR_DIRECT', description: 'str' = '', policy: 'str' = 'weights', cc_nodes: 'List[str]' = &lt;factory&gt;, elem_nodes: 'List[str]' = &lt;factory&gt;, driver_code: 'str' = 'HOURS', driver_set: 'str' = 'PLAN_HOURS_2026', fallback: 'str' = 'error', overrides: 'List[Dict[str, Any]]' = &lt;factory&gt;) -&gt; None</code> \u2014 DraftRule(component_code: 'str' = 'LABOR_DIRECT', description: 'str' = '', policy: 'str' = 'weights', cc_nodes: 'List[str]' = , elem_nodes: 'List[str]' = , driver_code: 'str' = 'HOURS', driver_set: 'str' = 'PLAN_HOURS_2026', fallback: 'str' = 'error', overrides: 'List[Dict[str, Any]]' = ) <li>class: <code>WizardState(period_from: 'str' = '2026-01', period_to: 'str' = '2026-01', scenario: 'str' = 'PLAN', rule_set_id: 'str' = 'DEFAULT_2026', rule_set_status: 'str' = 'DRAFT', scope_filter: 'str' = '', draft: 'DraftRule' = &lt;factory&gt;) -&gt; None</code> \u2014 WizardState(period_from: 'str' = '2026-01', period_to: 'str' = '2026-01', scenario: 'str' = 'PLAN', rule_set_id: 'str' = 'DEFAULT_2026', rule_set_status: 'str' = 'DRAFT', scope_filter: 'str' = '', draft: 'DraftRule' = ) <li>func: <code>apply_allocations(conn: 'sqlite3.Connection', period: 'str', scenario: 'str', rule_set_id: 'str', run_id: 'Optional[str]' = None, components: 'Optional[List[str]]' = None) -&gt; 'int'</code> \u2014 Apply weight-based allocations for given period and rule set.</li> <li>func: <code>asdict(obj, *, dict_factory=&lt;class 'dict'&gt;)</code> \u2014 Return the fields of a dataclass instance as a new dictionary mapping</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>field(*, default=&lt;dataclasses._MISSING_TYPE object at 0x0000027645A6A4B0&gt;, default_factory=&lt;dataclasses._MISSING_TYPE object at 0x0000027645A6A4B0&gt;, init=True, repr=True, hash=None, compare=True, metadata=None, kw_only=&lt;dataclasses._MISSING_TYPE object at 0x0000027645A6A4B0&gt;)</code> \u2014 Return an object to identify dataclass fields.</li> <li>func: <code>render(db_path: 'str')</code> \u2014 </li>"},{"location":"PROJECT_OVERVIEW/#module-uiapp_streamlit","title":"Module ui.app_streamlit","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>ensure_bom_table(conn)</code> \u2014 Ensure bom_flat exists and 'bom' view points to it; handle legacy bom table.</li> <li>func: <code>ensure_unique_routing_group(conn)</code> \u2014 </li> <li>func: <code>main()</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func: <code>render_alloc_wizard(db_path: 'str')</code> \u2014 </li> <li>func: <code>render_budget_run(db_path: str)</code> \u2014 </li> <li>func: <code>render_cost_tree(db_path: 'str')</code> \u2014 </li> <li>func: <code>render_costing_run(db_path)</code> \u2014 </li> <li>func: <code>render_import_data(db_path: str, encoding='auto')</code> \u2014 </li> <li>func: <code>render_updater(db_path: str)</code> \u2014 </li> <li>func: <code>run_nsi_refs()</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-uicomponents","title":"Package ui.components","text":""},{"location":"PROJECT_OVERVIEW/#module-uicomponentsitem_picker","title":"Module ui.components.item_picker","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>item_paste_picker(db_path: str, key_prefix: str = 'picker', title: str = '\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430') -&gt; List[str]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 item_id.</li> <li>func: <code>search_items_by_tokens(conn, tokens: str | list[str], limit_per_token: int = 20) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0418\u0449\u0435\u0442 items \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 (\u0430\u0440\u0442\u0438\u043a\u0443\u043b/\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u043a\u043e\u0434).</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uicomponentsset_window_title","title":"Module ui.components.set_window_title","text":"<ul> <li>func: <code>set_window_title(title: str)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uidata_cogs","title":"Module ui.data_cogs","text":"<ul> <li>func: <code>fetch_cogs_unit(conn: 'sqlite3.Connection', period: 'str', scenario: 'str', product_ids: 'list[str] | None' = None) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>get_periods(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 Fast list of available periods from base tables (avoid heavy v_cogs_unit).</li> <li>func: <code>get_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>pivot_cogs(df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_bom_xlsx","title":"Module ui.views_bom_xlsx","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>load_bom_components_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_spec_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_bom_specs_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>render(db_path: str)</code> \u2014 </li> <li>func: <code>upsert_bom_components_from_stage(conn, load_id: 'str', verbose: 'bool' = False) -&gt; 'int'</code> \u2014 Fast upsert from stage to bom_spec_components for a given load_id.</li> <li>func: <code>upsert_bom_specs_from_stage(conn, load_id: 'str') -&gt; 'int'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_budget","title":"Module ui.views_budget","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_rate_years(conn: 'sqlite3.Connection') -&gt; 'list[int]'</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func: <code>render_budget_run(db_path: str)</code> \u2014 </li> <li>func: <code>render_ppv(conn: sqlite3.Connection)</code> \u2014 \u0420\u0435\u043d\u0434\u0435\u0440 PPV (Price Purchase Variance) \u043f\u043e Commodity Group.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_cost_tree","title":"Module ui.views_cost_tree","text":"<ul> <li>func: <code>audit_schema_and_data(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', *, load_id: 'str', year: 'int', scenario: 'str | None') -&gt; 'AuditResult'</code> \u2014 </li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>fetch_direct_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return per-operation direct cost rows with rates from cost_rates.</li> <li>func: <code>fetch_direct_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041f\u0440\u044f\u043c\u044b\u0435 (\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438) \u0447\u0435\u0440\u0435\u0437 v_routing_costs_scenario.</li> <li>func: <code>fetch_indirect_costs_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]') -&gt; 'pd.DataFrame'</code> \u2014 Fetch indirect (non-production) costs from v_ovh_costs_scenario for selected products.</li> <li>func: <code>fetch_materials_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', load_id: 'Optional[str]') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return materials subtree rows with price from rm_prices(load_id) and diagnostics.</li> <li>func: <code>fetch_materials_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', price_scenario: 'str', *, currency: 'str' = 'RUB') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0438\u0437 v_bom_costs_scenario \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0446\u0435\u043d.</li> <li>func: <code>list_price_load_ids(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0412\u0435\u0440\u043d\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a load_id \u0438\u0437 rm_prices (\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0434\u0430\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e).</li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_produced_items(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>list_rate_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_rate_years(conn: 'sqlite3.Connection') -&gt; 'list[int]'</code> \u2014 </li> <li>func: <code>log_report_event(*, log_path: 'str', product_ids: 'Iterable[str]', load_id: 'str', year: 'int', scenario: 'Optional[str]', materials_diag: 'Dict[str, Any] | None' = None, direct_diag: 'Dict[str, Any] | None' = None, error: 'Optional[str]' = None) -&gt; 'None'</code> \u2014 </li> <li>func: <code>render(db_path: 'str')</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_costing_run","title":"Module ui.views_costing_run","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func: <code>render_costing_run(db_path)</code> \u2014 </li> <li>func: <code>render_ovh_rates_calc(conn, default_year: int = 2026)</code> \u2014 </li> <li>func: <code>render_rates_calc(conn: sqlite3.Connection, vol_scn: str | None = None) -&gt; None</code> \u2014 </li> <li>func: <code>render_transfers(conn)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_mo_loader","title":"Module ui.views_mo_loader","text":"<ul> <li>func: <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> <li>func: <code>view_mo_loader(conn)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_opr_rates","title":"Module ui.views_opr_rates","text":"<ul> <li>func: <code>cast(typ, val)</code> \u2014 Cast a value to a type.</li> <li>func: <code>compare_with_previous(conn, df_current: pandas.core.frame.DataFrame, component_code: str, base_scenario: str | None = None) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0415\u0441\u043b\u0438 base_scenario \u0437\u0430\u0434\u0430\u043d \u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u2192 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043e \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u043e\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f.</li> <li>func: <code>component_code_for_kind(kind: str, components: pandas.core.frame.DataFrame | None = None) -&gt; str</code> \u2014 </li> <li>func: <code>compute_rates(conn, price_scn: str, months_ym: list[str], cc_root: str, kind: str = 'labor', vol_scn: str = 'BG26_VOL') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043a\u0438 = (\u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) / (\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b) \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0426\u0417.</li> <li>func: <code>fetch_last_snapshot(conn, scenario: str, component_code: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_rate_components(conn) -&gt; pandas.core.frame.DataFrame</code> \u2014 Return active cost rate components with fallbacks.</li> <li>func: <code>render_rates_calc(conn: sqlite3.Connection, vol_scn: str | None = None) -&gt; None</code> \u2014 </li> <li>func: <code>resolve_vol_scenario(conn, bud_year: int, vol_scn: str | None) -&gt; str</code> \u2014 </li> <li>func: <code>save_rates_cost_rates(conn, df_rates: pandas.core.frame.DataFrame, component_code: str, scenario: str = '') -&gt; int</code> \u2014 Save computed yearly rates into unified cost_rates (idempotent).</li> <li>func: <code>scenario_to_year(price_scn: str, default: int | None = None) -&gt; int</code> \u2014 Derive numeric budget year from scenario code (e.g. BG26_VOL -&gt; 2026).</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_ovh_rates","title":"Module ui.views_ovh_rates","text":"<ul> <li>class: <code>TariffParams(year: 'int', vol_scenario: 'str', price_scenario: 'str', routing_scenario: 'str') -&gt; None</code> \u2014 TariffParams(year: 'int', vol_scenario: 'str', price_scenario: 'str', routing_scenario: 'str')</li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_routing_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_volume_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>preview_tariffs(conn: 'sqlite3.Connection', *, year: 'Optional[int]' = None, vol_scenario: 'Optional[str]' = None, price_scenario: 'Optional[str]' = None, routing_scenario: 'Optional[str]' = None, scrap_share: 'Optional[float]' = None) -&gt; 'TariffPreview'</code> \u2014 </li> <li>func: <code>render_ovh_rates_calc(conn, default_year: int = 2026)</code> \u2014 </li> <li>func: <code>save_tariffs(conn: 'sqlite3.Connection', preview: 'TariffPreview', *, cost_types: 'Optional[Iterable[str]]' = None) -&gt; 'int'</code> \u2014 </li> <li>func: <code>write_scrap_tariffs(conn: 'sqlite3.Connection', params: 'TariffParams', share: 'float', *, year: 'Optional[int]' = None, groups: 'Optional[Sequence[str]]' = None) -&gt; 'int'</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_ppv","title":"Module ui.views_ppv","text":"<ul> <li>class: <code>BytesIO(initial_bytes=b'')</code> \u2014 Buffered I/O implementation using an in-memory bytes buffer.</li> <li>func: <code>compute_ppv_by_cg(conn: 'sqlite3.Connection', *, vol_s: 'str', s1: 'str', s2: 'str', s3: 'str', pure_only: 'bool' = False) -&gt; 'Dict[str, pd.DataFrame]'</code> \u2014 \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c PPV \u043f\u043e commodity group.</li> <li>func: <code>render_ppv(conn: sqlite3.Connection)</code> \u2014 \u0420\u0435\u043d\u0434\u0435\u0440 PPV (Price Purchase Variance) \u043f\u043e Commodity Group.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_quality","title":"Module ui.views_quality","text":"<ul> <li>func: <code>check_bom_components_missing_prices(conn)</code> \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 BOM \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 rm_prices (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>func: <code>check_bom_unknown_items(conn)</code> \u2014 BOM \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432 items.</li> <li>func: <code>check_budget_has_nonproduced(conn)</code> \u2014 \u0412 prod_budget \u0435\u0441\u0442\u044c product_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 items \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a is_produced=0.</li> <li>func: <code>check_items_duplicate_article(conn)</code> \u2014 \u0414\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432 (\u043e\u0434\u0438\u043d article \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e item_id).</li> <li>func: <code>check_items_nonproduced_has_routing_or_ovh(conn)</code> \u2014 \u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=0) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 routing_group/ovh_group_code (\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e).</li> <li>func: <code>check_items_produced_missing_routing_or_ovh(conn)</code> \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=1), \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0443\u0441\u0442\u044b routing_group \u0438\u043b\u0438 ovh_group_code.</li> <li>func: <code>check_items_required_fields(conn)</code> \u2014 \u041f\u0443\u0441\u0442\u044b\u0435/\u043d\u0443\u043b\u0435\u0432\u044b\u0435 article, name, uom.</li> <li>func: <code>check_ovh_groups_missing_tariffs(conn, year: 'int | None' = None, scenario: 'str | None' = None)</code> \u2014 \u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0437 ovh_flat, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 ovh_tariffs (\u043f\u043e \u0433\u043e\u0434\u0443; \u0435\u0441\u043b\u0438 \u0433\u043e\u0434 None \u2014 \u0431\u0435\u0440\u0451\u043c max(year)).</li> <li>func: <code>check_routing_flat_missing_rates(conn)</code> \u2014 \u0414\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0438\u0437 routing_flat \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 labor_rates_snapshot.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_transfers","title":"Module ui.views_transfers","text":"<ul> <li>func: <code>apply_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None, comment: 'str' = 'efficiency normalize', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>compute_efficiency_table(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'pd.DataFrame'</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0426\u0417:</li> <li>func: <code>plan_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</li> <li>func: <code>render_opex_cycles(conn: sqlite3.Connection)</code> \u2014 </li> <li>func: <code>render_transfers(conn)</code> \u2014 </li> <li>func: <code>revert_transfer(conn, batch_id: str)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_transfers_opex","title":"Module ui.views_transfers_opex","text":"<ul> <li>func: <code>apply_cycle(conn, cycle_id: 'int', cycle_no: 'int', comment: 'str', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_cycle_meta(conn: 'sqlite3.Connection', cycle_id: 'int')</code> \u2014 </li> <li>func: <code>load_cycle_rules_df(conn: 'sqlite3.Connection', cycle_id: 'int') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>plan_transfer_opex_by_rules(conn: 'sqlite3.Connection', bud_year: 'int', elem_root: 'str', cycle_no: 'int', rules_df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 rules_df: columns = donor_cc_id, to_cc_id, share (0..1), optional to_elem_id.</li> <li>func: <code>render_opex_cycles(conn: sqlite3.Connection)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_updater","title":"Module ui.views_updater","text":"<ul> <li>func: <code>apply_items_updates(conn, preview_df: 'pd.DataFrame') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_items_updates; \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 UPDATE \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c.</li> <li>func: <code>apply_std_prices(conn, preview_df: 'pd.DataFrame', source_name: 'str') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_std_prices (\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c note IS NULL),</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>preview_items_updates(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>preview_std_prices(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0, article_col='Material', price_col='STD 2026', uom='\u0428\u0422', currency='RUB') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"PROJECT_OVERVIEW/#module-uiviews_upload","title":"Module ui.views_upload","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>apply_department_suggestions(conn, df_suggestions)</code> \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 suggested_dept \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0441 UNASSIGNED/\u043f\u0443\u0441\u0442\u044b\u043c \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u043c.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>is_object_dtype(arr_or_dtype) -&gt; 'bool'</code> \u2014 Check whether an array-like or dtype is of the object dtype.</li> <li>func: <code>load_bom_components_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_spec_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_bom_specs_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> <li>func: <code>load_personnel_monthly_from_excel(conn, xls: 'ExcelInput', bud_year: 'int', sheet: 'Optional[str]' = None, clear_year_first: 'bool' = False, source: 'str' = 'file', note: 'str' = None) -&gt; 'tuple[int, pd.DataFrame]'</code> \u2014 \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c (personnel_monthly) \u0438\u0437 xlsx \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a\u0430\u043a \u0432 110_HC_2026.xlsx.</li> <li>func: <code>load_prod_budget_from_xlsx(conn, xlsx_path: 'str', scenario: 'str', article_aliases=None, name_aliases=None)</code> \u2014 \u0414\u0432\u0443\u0445\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a: \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c header=[0,1].</li> <li>func: <code>materialize_bom_flat(conn: 'sqlite3.Connection', product_id: 'str | None' = None) -&gt; 'int'</code> \u2014 Materialize bom_flat using SQL scripts under sql/materialize.</li> <li>func: <code>materialize_mo_cost_unit(conn, *, on_date: 'str | None' = None)</code> \u2014 \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a mo_cost_unit \u0420\u0451\u0420\u00b7 bom_flat \u0413\u2014 mo_last_price (\u0420\u0405\u0420\u00b0 \u0420\u0491\u0420\u00b0\u0421\u201a\u0421\u0453 \u0420\u0451\u0420\u00bb\u0420\u0451 \u0420\u0457\u0420\u0455 \u0421\u201a\u0420\u00b5\u0420\u0454\u0421\u0453\u0421\u2030\u0420\u00b5\u0420\u2116).</li> <li>func: <code>read_1c_txt(file_bytes: bytes, encoding='auto') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>read_rm_prices_xlsx(file_or_path, sheet_name=0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>render(db_path: str, encoding='auto')</code> \u2014 </li> <li>func: <code>render_direct_cost_loader(conn)</code> \u2014 </li> <li>func: <code>to_float_ru(x)</code> \u2014 </li> <li>func: <code>upsert_bom_components_from_stage(conn, load_id: 'str', verbose: 'bool' = False) -&gt; 'int'</code> \u2014 Fast upsert from stage to bom_spec_components for a given load_id.</li> <li>func: <code>upsert_bom_specs_from_stage(conn, load_id: 'str') -&gt; 'int'</code> \u2014 </li> <li>func: <code>upsert_items(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func: <code>upsert_items_from_xlsx(conn, df: 'pd.DataFrame')</code> \u2014 \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:</li> <li>func: <code>upsert_rm_prices(conn, df: 'pd.DataFrame', filename: 'str', effective_from: 'str | None' = None, load_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>upsert_routings(conn, df: 'pd.DataFrame')</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 routing \u043d\u0430 \u043e\u0434\u0438\u043d routing_group.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#package-config","title":"Package config","text":""},{"location":"PROJECT_OVERVIEW/#module-configsettings","title":"Module config.settings","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> </ul>"},{"location":"PROJECT_OVERVIEW/#materials-related","title":"Materials-related","text":"<ul> <li>calc.materialize</li> <li>calc.materialize_sql</li> <li>calc.mo_materials</li> </ul> <p>See: DB schema \u00b7 Rules</p>"},{"location":"RULES_COVERAGE/","title":"RULES_COVERAGE","text":"<p>Generated: 2025-10-28 12:14 (local) Commit: 74b0a98</p> <p>No rules table found. Skipped.</p>"},{"location":"00_overview/","title":"Wilo-ERP","text":""},{"location":"00_overview/#_1","title":"\u0427\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (\u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0435\u0439\u0447\u0430\u0441)","text":"<p>Wilo-ERP \u2014 \u044d\u0442\u043e \u00ab\u043c\u0438\u043d\u0438-ERP\u00bb \u043d\u0430 Python + SQLite + Streamlit-UI, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043c\u044b\u043a\u0430\u0435\u0442 \u0446\u0438\u043a\u043b: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0432\u0438\u0447\u043a\u0438 \u0438\u0437 1\u0421/Excel \u2192 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b/\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438/\u0442\u0430\u0440\u0438\u0444\u044b/overhead) \u2192 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u043c\u0435\u0436\u0434\u0443 \u0426\u0424\u041e \u2192 OPEX \u2192 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 Excel.</p> <p>\u041d\u0438\u0436\u0435 \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u0438 \u0438\u0445 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>1) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 1\u0421 \u0438 Excel - \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u00ab\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0447\u0451\u0442\u044b\u00bb 1\u0421 (TXT/XLSX) \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 Excel-\u0444\u0430\u0439\u043b\u044b: \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430, BOM/\u0440\u0435\u0441\u0443\u0440\u0441\u043d\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routing), \u043e\u0431\u044a\u0451\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u0446\u0435\u043d\u044b RM, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438. - \u041f\u0430\u0440\u0441\u0435\u0440\u044b \u0442\u043e\u043b\u0435\u0440\u0430\u043d\u0442\u043d\u044b \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430\u043c/\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c \u0438 \u00ab\u0433\u0440\u044f\u0437\u043d\u044b\u043c\u00bb \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430\u043c. - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u2014 \u0441\u0442\u0435\u0439\u0434\u0436\u0438\u043d\u0433-\u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 (items, BOM, routings, prices, volumes, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u0426\u0424\u041e/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442).</p> <p>2) \u0420\u0430\u0441\u0447\u0451\u0442 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445) - \u0414\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438: \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 BOM (\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e, \u0434\u043e \u043b\u0438\u0441\u0442\u044c\u0435\u0432), \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u044a\u0451\u043c\u044b (\u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e), \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u043d\u0430 RM. - \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442/\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432, \u0447\u0430\u0441\u044b/\u043d\u043e\u0440\u043c\u044b, \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u044b\u0445. - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u2014 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043f\u043e CC \u00d7 Element \u00d7 Period), \u0441 load_id, sheet \u0438 \u0442.\u043f.</p> <p>3) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX - \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a OPEX: \u0441\u0442\u0435\u0439\u0434\u0436\u0438\u043d\u0433 \u0431\u0435\u0437 \u0436\u0451\u0441\u0442\u043a\u0438\u0445 FK, \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430/\u0441\u0442\u0430\u0442\u044c\u0438 \u2192 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0437\u0430\u0442\u0440\u0430\u0442), \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u00ab\u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445\u00bb \u0426\u0424\u041e/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0444\u043b\u0430\u0433\u0438 <code>unmapped</code>, <code>missing_cc</code>, <code>bad_amount</code>, <code>dup_candidate</code>. - \u041a\u043e\u043c\u043c\u0438\u0442 \u0432 \u00ab\u0447\u0438\u0441\u0442\u0443\u044e\u00bb \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439.</p> <p>4) \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0437\u0430\u0442\u0440\u0430\u0442 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c\u0438 (\u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u044b) - \u041b\u043e\u0433\u0438\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u0443\u0441\u043b\u0443\u0433: \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f/\u0434\u0430\u0440\u0438\u0442\u0435\u043b\u044f, \u0447\u0442\u043e\u0431\u044b \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u0438 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0431\u044b\u043b\u0430 \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u043e\u0439. - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u043e\u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0442\u0430\u0440\u0438\u0444\u043e\u0432, \u0441\u0432\u043e\u0434\u0430 CC\u00d7Element.</p> <p>5) \u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u0430 \u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b - \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0442\u0430\u0432\u043a\u0443 (\u0447\u0430\u0441/\u0441\u043c\u0435\u043d\u0430/\u043f\u0435\u0440\u0438\u043e\u0434) \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u0430 \u043f\u043e \u0426\u0424\u041e/\u0443\u0447\u0430\u0441\u0442\u043a\u0430\u043c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043e\u0431\u044a\u0451\u043c\u0430 \u0447\u0430\u0441\u043e\u0432 \u0438 \u0444\u043e\u043d\u0434\u0430 \u043e\u043f\u043b\u0430\u0442\u044b (\u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432). - \u0422\u0430\u0440\u0438\u0444 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 \u0431\u044e\u0434\u0436\u0435\u0442.</p> <p>6) \u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u043e\u0432\u0435\u0440\u0445\u044d\u0434\u043e\u0432 (\u041e\u041f\u0420/\u041e\u0425\u0420) - \u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>ovh_tariffs</code> \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442: <code>(overhead_group, year, cost_type, share)</code>. - \u0422\u0438\u043f\u044b: <code>scrap</code> (\u0431\u0440\u0430\u043a, \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432), <code>depr_opr</code> (\u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420, \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432), <code>log</code> (\u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430, \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432), <code>adm</code> (\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435, \u043e\u0442 \u0431\u0430\u0437\u044b \u0417\u041f+\u041e\u041f\u0420). - \u0412 UI \u0442\u0440\u0438 \u0432\u043a\u043b\u0430\u0434\u043a\u0438: \u00ab\u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420\u00bb, \u00ab\u041e\u0425\u0420 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430\u00bb, \u00ab\u041e\u0425\u0420 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435\u00bb. \u0415\u0441\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0438 \u00ab\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c\u00bb (\u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440: \u043c\u0430\u0442\u0431\u0430\u0437\u0430, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, % \u0434\u043e\u043b\u044f, \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u043e \u0437\u0430\u0432\u043e\u0434\u0443) \u0438 \u00ab\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c\u00bb (\u0430\u043f\u0441\u0435\u0440\u0442 \u0432 <code>ovh_tariffs</code>). - \u0414\u043b\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u043c\u0430\u0442\u0431\u0430\u0437 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e \u0437\u0430\u0432\u043e\u0434\u0443. - \u041c\u0430\u0441\u0441\u043e\u0432\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>ovh_year</code>.</p> <p>7) \u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 Excel - \u0415\u0434\u0438\u043d\u044b\u0435 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 (\u043f\u043e \u0441\u043b\u043e\u044f\u043c): CC\u00d7Element\u00d7Period, \u043e\u0442\u0447\u0451\u0442\u044b \u043f\u043e OPEX, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u0442\u0440\u0443\u0434, overhead, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0432\u044c\u044e. - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b \u0441\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a (load_id), \u043b\u043e\u0433\u0430\u043c\u0438/\u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u043c\u0430\u043f\u043f\u0438\u043d\u0433\u0430.</p> <p>8) \u0412\u0430\u0436\u043d\u043e: \u0432\u0441\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 (price_scn, vol_scn). \u041b\u044e\u0431\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043e\u0442\u0447\u0451\u0442 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f, \u0438\u043d\u0430\u0447\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0437 active_scenarios.</p> <p>9) PPV: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043e\u0442\u0447\u0435\u0442 \u043f\u043e \u0446\u0435\u043d\u043e\u0432\u043e\u043c\u0443 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044e. \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0446\u0435\u043d: \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u0430\u044f, \u0442\u0435\u043a\u0443\u0449\u0430\u044f,... \u0412\u044b\u0431\u043e\u0440 \u043e\u0431\u044a\u0435\u043c\u043e\u0432 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041e\u0442\u0447\u0435\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u044b\u043c\u0438 commodity group. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a items</p>"},{"location":"00_overview/#_2","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":"<ul> <li>\u042f\u0437\u044b\u043a \u0438 \u0421\u0423\u0411\u0414: Python 3.x, SQLite.  </li> <li>UI: Streamlit.  </li> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u043e\u0432:  </li> <li><code>calc</code> \u2014 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u0442\u0430\u0440\u0438\u0444\u043e\u0432, \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432, \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.  </li> <li><code>db</code> \u2014 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0441\u0445\u0435\u043c\u044b, \u0437\u0430\u043f\u0440\u043e\u0441\u044b, ensure-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.  </li> <li><code>loaders</code> \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (CCG, MFCPRIM, BOM, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0446\u0435\u043d\u044b, \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b, OPEX).  </li> <li><code>ui</code> \u2014 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Streamlit: \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0439, \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432, \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u043e\u0432.  </li> <li><code>config</code> \u2014 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438.  </li> <li><code>app</code> \u2014 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0411\u0414.  </li> </ul> <p>\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430: 7 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, 39 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, 251 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, 13 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.</p>"},{"location":"00_overview/#_3","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u044b: 35, \u0412\u044c\u044e\u0445\u0438: 3.  </li> <li>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438:  </li> <li><code>items</code>, <code>bom</code>, <code>routings</code> \u2014 \u041d\u0421\u0418 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432.  </li> <li><code>rm_prices</code>, <code>mo_prices_history</code> \u2014 \u0446\u0435\u043d\u044b \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0443\u0441\u043b\u0443\u0433.  </li> <li><code>prod_budget</code>, <code>opex_budget</code>, <code>opex_staging</code> \u2014 \u0431\u044e\u0434\u0436\u0435\u0442\u044b.  </li> <li><code>labor_rates</code>, <code>depr_rates_snapshot</code>, <code>opr_rates_snapshot</code> \u2014 \u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u044b.  </li> <li><code>transfer_*</code> \u2014 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432.  </li> <li>\u0412\u044c\u044e\u0445\u0438: <code>mo_last_price_current</code>, <code>personnel_yearly</code>, <code>personnel_yearly_effective</code>.  </li> <li>\u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0445\u0435\u043c\u0430 \u0432 DB_SCHEMA.md.</li> </ul>"},{"location":"00_overview/#_4","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b","text":"<ol> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u041d\u0421\u0418 \u2014 \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430, BOM, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0446\u0435\u043d\u044b, \u0426\u0424\u041e, \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0442\u0440\u0430\u0442.  </li> <li>\u0411\u044e\u0434\u0436\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u2014 \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 BOM, \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u044a\u0451\u043c\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d.  </li> <li>\u0411\u044e\u0434\u0436\u0435\u0442 OPEX \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 staging, \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f, \u043a\u043e\u043c\u043c\u0438\u0442.  </li> <li>\u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u2014 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b, \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f, \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 (\u043f\u043e \u0426\u0424\u041e \u0438 \u0433\u043e\u0434\u0430\u043c).  </li> <li>\u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u2014 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 headcount.  </li> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> <li>\u041e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c \u2014 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 Excel \u043f\u043e \u0441\u043b\u043e\u044f\u043c (CC\u00d7Element\u00d7Period), \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b, \u043b\u043e\u0433\u0438.</li> </ol>"},{"location":"00_overview/#_5","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 (Python 3.11+, pandas, numpy, openpyxl, streamlit).  </li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c UI: <pre><code>streamlit run ui/app_streamlit.py\n</code></pre></li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041d\u0421\u0418 \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 (MFCPRIM, CCG).  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u2014 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c detail_rules / fallback_rules.  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c BOM, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0441\u0442\u0430\u0432\u043a\u0438.  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0411\u044e\u0434\u0436\u0435\u0442 \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c prod_budget, opex_budget.  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u043f\u0440\u043e\u0433\u043d\u0430\u0442\u044c quality-\u0447\u0435\u043a\u0435\u0440\u044b.  </li> </ol>"},{"location":"00_overview/#_6","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<ul> <li>Project overview \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.  </li> <li>Architecture summary \u2014 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430.  </li> <li>Database schema \u2014 SQL-DDL \u0442\u0430\u0431\u043b\u0438\u0446 \u0438 \u0432\u044c\u044e\u0445.  </li> <li>Data dictionary \u2014 \u043a\u043e\u043d\u0434\u0435\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u0430\u043d\u043d\u044b\u0445.  </li> </ul>"},{"location":"00_overview/company/","title":"\u041e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 Wilo Rus","text":"<p>\u041a\u0440\u0430\u0442\u043a\u043e</p> <p>Wilo Rus \u2014 \u0447\u0430\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u043d\u0430 Wilo Group, \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043c\u0438\u0440\u043e\u0432\u044b\u0445 \u043b\u0438\u0434\u0435\u0440\u043e\u0432 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0430\u0441\u043e\u0441\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439 \u0434\u043b\u044f \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f, \u043e\u0442\u043e\u043f\u043b\u0435\u043d\u0438\u044f, \u0432\u0435\u043d\u0442\u0438\u043b\u044f\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f.</p>"},{"location":"00_overview/company/#wilo","title":"\u041c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 Wilo","text":"<p>\u041a\u043e\u043c\u043f\u0430\u043d\u0438\u044f Wilo SE \u0431\u044b\u043b\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0430 \u0432 1872 \u0433\u043e\u0434\u0443 \u0432 \u0414\u043e\u0440\u0442\u043c\u0443\u043d\u0434\u0435, \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u044f. \u0421\u0435\u0433\u043e\u0434\u043d\u044f Wilo Group \u2014 \u044d\u0442\u043e \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043b\u0438\u0434\u0435\u0440, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043d\u0430 \u044d\u043d\u0435\u0440\u0433\u043e\u0441\u0431\u0435\u0440\u0435\u0433\u0430\u044e\u0449\u0438\u0445 \u043d\u0430\u0441\u043e\u0441\u0430\u0445, \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0446\u0438\u0444\u0440\u043e\u0432\u044b\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\u0445 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0432\u043e\u0434\u044b \u0438 \u0442\u0435\u043f\u043b\u0430.</p> <ul> <li>\u0428\u0442\u0430\u0431-\u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430: Dortmund, \u0413\u0435\u0440\u043c\u0430\u043d\u0438\u044f (WiloPark)</li> <li>\u0413\u043e\u0434 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f: 1872  </li> <li>\u0412\u044b\u0440\u0443\u0447\u043a\u0430 (2024): \u043e\u043a\u043e\u043b\u043e 1.9 \u043c\u043b\u0440\u0434 \u0435\u0432\u0440\u043e </li> <li>\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438: \u0431\u043e\u043b\u0435\u0435 9 000 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043c\u0438\u0440\u0443  </li> <li>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u0438 \u0437\u0430\u0432\u043e\u0434\u044b: \u0431\u043e\u043b\u0435\u0435 70 \u0441\u0442\u0440\u0430\u043d </li> <li>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0442\u0440\u0430\u0441\u043b\u0438: </li> <li>\u0417\u0434\u0430\u043d\u0438\u044f \u0438 \u0441\u043e\u043e\u0440\u0443\u0436\u0435\u043d\u0438\u044f (Building Services)  </li> <li>\u0412\u043e\u0434\u043d\u043e\u0435 \u0445\u043e\u0437\u044f\u0439\u0441\u0442\u0432\u043e (Water Management)  </li> <li>\u041f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c (Industry)</li> </ul> <p>Wilo \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u0442 \u0432 \u044d\u043d\u0435\u0440\u0433\u043e\u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0438 \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f, \u0441\u043f\u043e\u0441\u043e\u0431\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 CO\u2082 \u0438 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432.</p>"},{"location":"00_overview/company/#wilo-rus_1","title":"Wilo Rus","text":"<p>\u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u043e\u0435 \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 Wilo Rus \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0430 \u0440\u044b\u043d\u043a\u0435 \u0441 \u043d\u0430\u0447\u0430\u043b\u0430 1990-\u0445 \u0433\u043e\u0434\u043e\u0432 \u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0432 \u0412\u043e\u0441\u0442\u043e\u0447\u043d\u043e\u0439 \u0415\u0432\u0440\u043e\u043f\u0435.</p> <ul> <li>\u0417\u0430\u0432\u043e\u0434 Wilo Rus \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0432 2016 \u0433\u043e\u0434\u0443.  </li> <li>\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d \u0432 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u0433\u043e\u0440\u043e\u0434 \u041d\u043e\u0433\u0438\u043d\u0441\u043a (\u041f\u042d\u0417 \"\u041d\u043e\u0433\u0438\u043d\u0441\u043a\").  </li> <li>\u0417\u0430\u0432\u043e\u0434 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0430\u0441\u0441\u043e\u0440\u0442\u0438\u043c\u0435\u043d\u0442 \u043d\u0430\u0441\u043e\u0441\u043d\u043e\u0433\u043e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c \u043e\u0442\u043e\u043f\u043b\u0435\u043d\u0438\u044f, \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f, \u043a\u0430\u043d\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f.  </li> <li>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.  </li> </ul> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438</p>"},{"location":"00_overview/controlling/","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u0432 Wilo Rus","text":"<p>\u041a\u0440\u0430\u0442\u043a\u043e</p> <p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u0432 Wilo Rus \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u044c\u044e \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u0430 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432 \u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0434\u0432\u0430 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f: \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433. \u0418\u0445 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0442, \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0437\u0430\u0432\u043e\u0434\u0430.</p>"},{"location":"00_overview/controlling/#1","title":"1. \u0420\u043e\u043b\u044c \u0438 \u043c\u0435\u0441\u0442\u043e \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433\u0430","text":"<p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u2014 \u044d\u0442\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u043e-\u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0430\u044f \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0435 \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439. \u041e\u043d \u043d\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0443\u0445\u0433\u0430\u043b\u0442\u0435\u0440\u0441\u043a\u0438\u043c \u0443\u0447\u0435\u0442\u043e\u043c, \u0430 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043b\u0430\u043d-\u0444\u0430\u043a\u0442-\u0430\u043d\u0430\u043b\u0438\u0437, \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438.</p> <p>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0432 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443</p> <p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u043f\u043e\u0434\u0447\u0438\u043d\u044f\u0435\u0442\u0441\u044f \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u043e\u043c\u0443 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0443 (CFO) \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0442\u0435\u0441\u043d\u043e\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c\u0438: - \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e (Production) - \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (Logistics) - \u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u0435 (Planning &amp; Procurement) - \u0411\u0443\u0445\u0433\u0430\u043b\u0442\u0435\u0440\u0438\u044f (Accounting)</p>"},{"location":"00_overview/controlling/#2","title":"2. \u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433","text":"<p>\u0424\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430: - \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u0433\u043e\u0434\u043e\u0432\u043e\u0433\u043e \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (Budget) \u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432 (Forecast). - \u041a\u043e\u043d\u0441\u043e\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f Wilo Group. - \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u043b\u0430\u043d\u2013\u0444\u0430\u043a\u0442\u2013\u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439 \u043f\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c, \u0434\u043e\u0445\u043e\u0434\u0430\u043c \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c. - \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0445 KPI: \u043e\u0431\u043e\u0440\u043e\u0442, EBIT, \u043c\u0430\u0440\u0436\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, OPEX, Capex. - \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0443 \u043f\u043e\u044f\u0441\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u043e\u043a, \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0439 \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c.</p>"},{"location":"00_overview/controlling/#3","title":"3. \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433","text":"<p>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u043c\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438. \u041e\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0443\u0447\u0451\u0442, \u0430\u043d\u0430\u043b\u0438\u0437 \u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0437\u0430\u0442\u0440\u0430\u0442 \u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435.</p>"},{"location":"00_overview/controlling/#_1","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<ul> <li>\u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (\u043f\u043e SKU).  </li> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0437\u0430\u0442\u0440\u0430\u0442 \u043f\u043e:</li> <li>\u0446\u0435\u043d\u0442\u0440\u0430\u043c \u0437\u0430\u0442\u0440\u0430\u0442 (Cost Centers),  </li> <li>\u0432\u0438\u0434\u0430\u043c \u0437\u0430\u0442\u0440\u0430\u0442 (Cost Elements),  </li> <li>\u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (Cost by Product).  </li> <li>\u0420\u0430\u0441\u0447\u0451\u0442 \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 MFC Report (Material &amp; Factory Cost Report).  </li> <li>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0431\u0430\u0437\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u041e\u041f\u0420 (overhead rates) \u0438 \u0441\u0442\u0430\u0432\u043e\u043a \u0437\u0430\u0442\u0440\u0430\u0442.  </li> <li>\u0410\u043d\u0430\u043b\u0438\u0437 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439 (Budget vs Actual) \u0441 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432:</li> <li>\u041e\u0431\u044a\u0451\u043c (Volume),</li> <li>\u0426\u0435\u043d\u0430 (Rate),</li> <li>\u041c\u0438\u043a\u0441 (Mix).  </li> <li>\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439 \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0437\u0430\u0442\u0440\u0430\u0442.</li> </ul> <p>\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0434\u0430\u043d\u043d\u044b\u0435</p> <p>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043a\u0430\u043a \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 (1\u0421, SAP, Excel), \u0442\u0430\u043a \u0438 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u044e\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 Wilo-ERP, \u0433\u0434\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f: - \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445, - \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u0442\u0430\u0440\u0438\u0444\u043e\u0432, - \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438.</p>"},{"location":"00_overview/controlling/#4","title":"4. \u0426\u0435\u043b\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433\u0430","text":"\u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0426\u0435\u043b\u044c \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0411\u044e\u0434\u0436\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Budget) \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b\u0439 \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u043f\u043b\u0430\u043d \u043f\u043e \u0437\u0430\u0442\u0440\u0430\u0442\u0430\u043c \u0438 \u043e\u0431\u044a\u0451\u043c\u0430\u043c \u0423\u0442\u0432\u0435\u0440\u0436\u0434\u0451\u043d\u043d\u044b\u0439 \u0431\u044e\u0434\u0436\u0435\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441 HQ \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 (Forecast) \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0437\u0430\u0432\u043e\u0434\u0430 \u041e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 F1, F2, F3 \u0423\u0447\u0451\u0442 \u0438 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c (Actuals) \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043b\u0430\u043d-\u0444\u0430\u043a\u0442-\u0430\u043d\u0430\u043b\u0438\u0437 MFC Report, SKU Cost Report \u0410\u043d\u0430\u043b\u0438\u0437 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439 (Variance) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u0438\u0447\u0438\u043d\u044b \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439 \u0438 \u0437\u043e\u043d\u044b \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 KPI \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u0443\u044e \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u044c Dashboard KPI, \u043e\u0442\u0447\u0451\u0442\u044b \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0443"},{"location":"00_overview/controlling/#5-wilo-erp","title":"5. \u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433\u0430 (\u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 Wilo-ERP)","text":"<pre><code>flowchart TD\n    subgraph \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438\n        A[\"1C / Excel / SAP\"]\n    end\n\n    subgraph Wilo-ERP Staging\n        B[\"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"]\n        C[\"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f:&lt;br/&gt;Cost Centers, Cost Elements, SKU\"]\n        D[\"\u0420\u0430\u0441\u0447\u0451\u0442\u044b:&lt;br/&gt;Rates, Tariffs, Allocations\"]\n    end\n\n    subgraph \u0410\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430\n        E[\"MFC Report\"]\n        F[\"Budget vs Actual\"]\n        G[\"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438&lt;br/&gt;\u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f\"]\n    end\n\n    A --&gt; B --&gt; C --&gt; D --&gt; E --&gt; F --&gt; G</code></pre> <p>ERP \u043a\u0430\u043a \u044f\u0434\u0440\u043e \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0438</p> <p>Wilo-ERP \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0435\u0442 \u043a\u0430\u043a \u0435\u0434\u0438\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0437\u0430\u0432\u043e\u0434\u0430: \u0445\u0440\u0430\u043d\u0438\u0442 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438, \u0441\u0442\u0430\u0432\u043a\u0438, \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0441\u0447\u0451\u0442\u043e\u0432 \u0438 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438.</p>"},{"location":"00_overview/controlling/#6","title":"6. \u0420\u043e\u043b\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430","text":"<p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u2014 \u044d\u0442\u043e \u043f\u0430\u0440\u0442\u043d\u0451\u0440 \u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439: \u041f\u043e\u043d\u0438\u043c\u0430\u0435\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0443\u043c\u0435\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0446\u0438\u0444\u0440\u044b. \u0421\u043e\u0447\u0435\u0442\u0430\u0435\u0442 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043c\u044b\u0448\u043b\u0435\u043d\u0438\u0435 \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430. \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0438 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u0439. \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u0430 \u2014 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u043d\u0438\u0435.</p>"},{"location":"00_overview/controlling/#7","title":"7. \u0412\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u044c \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438","text":"<ul> <li>\u041e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 Wilo Rus</li> <li>\u0411\u043b\u043e\u043a \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (Budget &amp; Forecast)</li> <li>\u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0438 MFC Report</li> <li>\u0410\u043d\u0430\u043b\u0438\u0437 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0439</li> <li>\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 Wilo-ERP</li> </ul>"},{"location":"00_overview/controlling/#8","title":"8. \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ul> <li>\u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438 \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0441\u0447\u0451\u0442\u0430.  </li> <li>\u0415\u0434\u0438\u043d\u0430\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043b\u043e\u0433\u0438\u044f \u2014 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0438 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u044b \u0441 HQ Wilo.  </li> <li>\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u2014 \u0446\u0438\u043a\u043b \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044e:  </li> <li>Budget \u2014 \u0435\u0436\u0435\u0433\u043e\u0434\u043d\u043e  </li> <li>Forecast \u2014 \u0435\u0436\u0435\u043a\u0432\u0430\u0440\u0442\u0430\u043b\u044c\u043d\u043e  </li> <li>Actual \u2014 \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u043e  </li> <li>\u0424\u043e\u043a\u0443\u0441 \u043d\u0430 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u2014 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442, \u0430 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.</li> </ul>"},{"location":"00_overview/controlling/#9","title":"9. \u0420\u0435\u0437\u044e\u043c\u0435","text":"<p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433 \u0432 Wilo Rus \u2014 \u044d\u0442\u043e \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c, \u043d\u043e \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0444\u0438\u043d\u0430\u043d\u0441\u044b \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e. \u0415\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043f\u043e\u043c\u043e\u0447\u044c \u0437\u0430\u0432\u043e\u0434\u0443 \u0432\u0438\u0434\u0435\u0442\u044c \u0441\u0435\u0431\u044f \u00ab\u0438\u0437\u043d\u0443\u0442\u0440\u0438 \u0446\u0438\u0444\u0440\u00bb \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"00_overview/production/","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u0430\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u044f","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0430\u0441\u0441\u043e\u0440\u0442\u0438\u043c\u0435\u043d\u0442 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430\u0441\u043e\u0441\u043d\u044b\u043c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u043d\u0430 \u0437\u0430\u0432\u043e\u0434\u0435 Wilo.</p>"},{"location":"00_overview/production/#1","title":"1. \u041f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0441\u043e\u0441\u044b","text":"<ul> <li> <p>IL-\u0441\u0435\u0440\u0438\u044f (Inline)   \u041f\u0440\u044f\u043c\u043e\u0442\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0441\u043e\u0441\u044b \u0441 \u043e\u0441\u0435\u0432\u044b\u043c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u043f\u0430\u0442\u0440\u0443\u0431\u043a\u043e\u0432. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u043e\u0442\u043e\u043f\u043b\u0435\u043d\u0438\u044f, \u0432\u0435\u043d\u0442\u0438\u043b\u044f\u0446\u0438\u0438 \u0438 \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f. \u041e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043b\u0451\u0433\u043a\u0438\u043c \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435\u043c.   </p> </li> <li> <p>BL-\u0441\u0435\u0440\u0438\u044f (Block-pump)   \u0411\u043b\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0441\u043e\u0441\u044b \u0441 \u0436\u0451\u0441\u0442\u043a\u0438\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0438 \u043a\u043e\u0440\u043f\u0443\u0441\u0430. \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u0442\u044b\u0445 \u0438 \u0441\u043b\u0430\u0431\u043e\u0437\u0430\u0433\u0440\u044f\u0437\u043d\u0451\u043d\u043d\u044b\u0445 \u0436\u0438\u0434\u043a\u043e\u0441\u0442\u0435\u0439 \u0432 \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445 \u0437\u0434\u0430\u043d\u0438\u0439 \u0438 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.     </p> </li> <li> <p>IPL-\u0441\u0435\u0440\u0438\u044f   \u041b\u043e\u043a\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 IL-\u0441\u0435\u0440\u0438\u0438, \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434 \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0438 \u043c\u0435\u0441\u0442\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u0438. \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432.</p> </li> </ul>"},{"location":"00_overview/production/#2","title":"2. \u041d\u0430\u0441\u043e\u0441\u043d\u044b\u0435 \u0441\u0442\u0430\u043d\u0446\u0438\u0438","text":"<ul> <li> <p>\u0421\u0442\u0430\u043d\u0446\u0438\u0438 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f   \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u0434\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0445 \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f \u0436\u0438\u043b\u044b\u0445, \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u043f\u0440\u043e\u043c\u044b\u0448\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0434\u0430\u043d\u0438\u0439.   \u041c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0441\u043e\u0441\u043e\u0432, \u0447\u0430\u0441\u0442\u043e\u0442\u043d\u043e\u0435 \u0440\u0435\u0433\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0448\u043a\u0430\u0444 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f.</p> </li> <li> <p>\u041f\u043e\u0436\u0430\u0440\u043d\u044b\u0435 \u043d\u0430\u0441\u043e\u0441\u043d\u044b\u0435 \u0441\u0442\u0430\u043d\u0446\u0438\u0438   \u041f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u044b \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u0436\u0430\u0440\u043d\u043e\u0433\u043e \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f. \u041e\u0441\u043d\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u043c \u043d\u0430\u0441\u043e\u0441\u0430\u043c\u0438, \u043f\u0443\u0441\u043a\u043e\u0437\u0430\u0449\u0438\u0442\u043d\u043e\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u043a\u043e\u0439 \u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439 \u0430\u0432\u0430\u0440\u0438\u0439\u043d\u043e\u0433\u043e \u043e\u043f\u043e\u0432\u0435\u0449\u0435\u043d\u0438\u044f.    </p> </li> </ul>"},{"location":"00_overview/production/#3","title":"3. \u0428\u043a\u0430\u0444\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":"<p>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u0437\u0430\u0449\u0438\u0442\u044b \u043d\u0430\u0441\u043e\u0441\u043d\u044b\u0445 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a. \u0424\u0443\u043d\u043a\u0446\u0438\u0438: \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u0442\u043e\u0442\u043e\u0439 \u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f, \u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u043e\u043a, \u0441\u0443\u0445\u043e\u0433\u043e \u0445\u043e\u0434\u0430, \u0430\u0432\u0430\u0440\u0438\u0439\u043d\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438 \u0434\u0438\u0441\u043f\u0435\u0442\u0447\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438.</p>"},{"location":"00_overview/production/#4","title":"4. \u0411\u044b\u0442\u043e\u0432\u044b\u0435 \u043d\u0430\u0441\u043e\u0441\u044b","text":"<ul> <li>\u041d\u0430\u0441\u043e\u0441\u044b \u0434\u043b\u044f \u0447\u0438\u0441\u0442\u043e\u0439 \u0432\u043e\u0434\u044b \u2014 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0432\u043e\u0434\u043e\u0441\u043d\u0430\u0431\u0436\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u0434\u043e\u043c\u043e\u0432, \u0441\u0438\u0441\u0442\u0435\u043c \u043f\u043e\u043b\u0438\u0432\u0430 \u0438 \u0446\u0438\u0440\u043a\u0443\u043b\u044f\u0446\u0438\u0438.  </li> <li>\u0414\u0440\u0435\u043d\u0430\u0436\u043d\u044b\u0435 \u043d\u0430\u0441\u043e\u0441\u044b \u2014 \u0434\u043b\u044f \u043e\u0442\u0432\u043e\u0434\u0430 \u0441\u0442\u043e\u0447\u043d\u044b\u0445, \u0434\u043e\u0436\u0434\u0435\u0432\u044b\u0445 \u0438 \u0433\u0440\u0443\u043d\u0442\u043e\u0432\u044b\u0445 \u0432\u043e\u0434.    </li> </ul>"},{"location":"00_overview/production/#5-erp-","title":"5. \u0421\u0432\u044f\u0437\u044c \u0441 ERP-\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439","text":"<p>\u0412 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 Wilo-ERP \u043a\u0430\u0436\u0434\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 <code>items</code>, \u0430 \u0435\u0451 \u0441\u043e\u0441\u0442\u0430\u0432 \u2014 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 <code>bom</code> \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445 <code>routings</code>. \u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0446\u0435\u043f\u043e\u0447\u043a\u0435:</p> <p><code>items</code> \u2192 <code>bom</code> \u2192 <code>routing_flat</code> \u2192 <code>cost_rates</code> \u2192 <code>v_cogs_unit</code></p> <p>\u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0437\u0434\u0435\u043b\u0438\u044f \u0434\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/","title":"\u041f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u0443\u0447\u0451\u0442\u0430 \u0432 Wilo RUS","text":"<p>\u0412\u0435\u0440\u0441\u0438\u044f: 2025-10-29 \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 Wilo-ERP (Python + SQLite + Streamlit)</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#1","title":"1. \u041e\u0431\u0449\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b","text":"<p>Wilo-ERP \u043c\u043e\u0434\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0443\u0447\u0451\u0442\u0430 (SAP CO) \u0432 \u043b\u0451\u0433\u043a\u043e\u043c Python-\u0441\u0442\u0435\u043a\u0435. \u0426\u0435\u043b\u044c \u2014 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0442\u0440\u0430\u0442 \u043e\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 (OPEX, 1\u0421) \u0434\u043e \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (COGS) \u0447\u0435\u0440\u0435\u0437 \u0444\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430.</p> <p>\u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u043e \u0434\u0432\u0443\u043c \u043e\u0441\u044f\u043c:</p> \u041e\u0441\u044c \u0421\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0426\u0435\u043d\u0442\u0440 \u0437\u0430\u0442\u0440\u0430\u0442 (Cost Center) <code>cc_nodes</code> \u042d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u0437\u0430\u0442\u0440\u0430\u0442 (Cost Element) <code>elem_nodes</code> <p>\u0420\u0430\u0441\u0445\u043e\u0434\u044b \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0432 OPEX-\u0431\u044e\u0434\u0436\u0435\u0442, \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u0445 (allocations) \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438.</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#2-cost-centers","title":"2. \u0426\u0435\u043d\u0442\u0440\u044b \u0437\u0430\u0442\u0440\u0430\u0442 (Cost Centers)","text":"<ul> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u044b: <code>cc_nodes</code>, <code>cc_edges</code>, <code>dep_cc_map</code> </li> <li>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044f \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u2014 \u0437\u0430\u0432\u043e\u0434 \u2192 \u0446\u0435\u0445 \u2192 \u0443\u0447\u0430\u0441\u0442\u043e\u043a \u2192 \u0441\u0442\u0430\u043d\u0446\u0438\u044f  </li> <li>\u041f\u0440\u0430\u0432\u0438\u043b\u0430:</li> <li>\u0412 \u0440\u0430\u0441\u0447\u0451\u0442\u0430\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043b\u0438\u0441\u0442\u043e\u0432\u044b\u0435 \u0443\u0437\u043b\u044b (<code>leaf = 1</code>);</li> <li>\u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f;</li> <li>\u0421\u0432\u044f\u0437\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0447\u0435\u0440\u0435\u0437 <code>cc_edges(parent_id, child_id)</code>.</li> </ul> <p>\u0422\u0438\u043f\u044b \u0426\u0417:</p> \u0422\u0438\u043f \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 RU1OP1P21 \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u041e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0435 RU1LG1\u2026 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430, \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442, \u0441\u043a\u043b\u0430\u0434\u044b \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 RU1AD1\u2026 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043e\u0444\u0438\u0441, \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043b\u0443\u0436\u0431\u044b <p>\u0421\u0432\u044f\u0437\u044c \u0441 \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u0430\u043c\u0438 1\u0421 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>dep_cc_map</code>.</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#3-cost-elements","title":"3. \u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0442\u0440\u0430\u0442 (Cost Elements)","text":"<ul> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u044b: <code>elem_nodes</code>, <code>elem_edges</code>, <code>elem_map_rules</code> </li> <li>\u0418\u0435\u0440\u0430\u0440\u0445\u0438\u044f: \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 MFCPRIM \u0438\u0437 SAP CO:  </li> <li><code>MFC_PRIM_1</code> \u2014 \u043f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434 (LABOR_DIRECT)  </li> <li><code>MFC_PRIM_2</code> \u2014 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (OPR_DIRECT)  </li> <li><code>MFC_PRIM_3</code> \u2014 \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420 (DEPR_DIRECT)  </li> <li><code>MFC_OVH_LOG</code> \u2014 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 (OVH_LOG)  </li> <li><code>MFC_OVH_ADM</code> \u2014 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 (OVH_ADM)</li> </ul> <p>\u041c\u0430\u043f\u043f\u0438\u043d\u0433: \u041f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 OPEX (<code>opex_staging</code>) \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c (<code>elem_map_rules</code>) \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0447\u0451\u0442\u0430 \u0438\u043b\u0438 \u0441\u0442\u0430\u0442\u044c\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 <code>mapped_elem_id</code>.</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#4","title":"4. \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438: Excel-\u0444\u0430\u0439\u043b\u044b \u0438 TXT-\u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0438\u0437 1\u0421;  </li> <li>\u041f\u0430\u0440\u0441\u0435\u0440\u044b: \u0443\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u044b \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430\u043c \u0438 \u00ab\u0433\u0440\u044f\u0437\u043d\u044b\u043c\u00bb \u0434\u0430\u043d\u043d\u044b\u043c (<code>loaders.utils.read_1c_txt</code>, <code>read_excel</code>).</li> </ul> <p>\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438: - <code>items</code> \u2014 \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432; - <code>cc_nodes</code> \u2014 \u0446\u0435\u043d\u0442\u0440\u044b \u0437\u0430\u0442\u0440\u0430\u0442; - <code>elem_nodes</code> \u2014 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0442\u0440\u0430\u0442; - <code>ovh_tariffs</code> \u2014 \u0442\u0430\u0440\u0438\u0444\u044b \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 (A001\u2013A010); - <code>cost_rates</code> \u2014 \u0441\u0442\u0430\u0432\u043a\u0438 \u0442\u0440\u0443\u0434\u0430 \u0438 \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438.  </p> <p>\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438: <code>load_cc_structure_twofiles</code>, <code>load_ovh_tariffs</code>, <code>upsert_labor_rates_snapshot</code>, <code>stage_opex</code> \u2192 <code>commit_opex</code>.</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#5","title":"5. \u041f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0447\u0451\u0442\u0430","text":"<pre><code>flowchart TD\n    A[\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u043e\u0432] --&gt; B[\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 OPEX]\n    B --&gt; C[\"\u041c\u0430\u043f\u043f\u0438\u043d\u0433 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f\"]\n    C --&gt; D[\"\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u043b\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442&lt;br&gt;(v_component_pools)\"]\n    D --&gt; E[\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430\u043c&lt;br&gt;(apply_allocations)\"]\n    E --&gt; F[\"\u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438&lt;br&gt;(v_cogs_unit)\"]\n    F --&gt; G[\"\u041e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0432\u0435\u0440\u043a\u0438&lt;br&gt;(v_recon_checks, v_rate_parity)\"]</code></pre> \u042d\u0442\u0430\u043f \u0421\u043b\u043e\u0439 \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 staging <code>opex_staging</code>, <code>loaders.opex_loader</code> \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f budget <code>opex_budget</code>, <code>elem_map_rules</code> \u041f\u0443\u043b\u044b \u0437\u0430\u0442\u0440\u0430\u0442 pool <code>v_component_pools</code> \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f allocations <code>cost_allocations</code>, <code>apply_allocations()</code> \u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c reporting <code>v_cogs_unit</code>, <code>v_recon_checks</code>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#6","title":"6. \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0438 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li> <p>\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442: Allocation Wizard (<code>ui.alloc_wizard</code>):   \u0432\u044b\u0431\u043e\u0440 \u043f\u0435\u0440\u0438\u043e\u0434\u0430, \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f, \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442, \u0426\u0417, \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432;   \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043f\u0443\u043b\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430.</p> </li> <li> <p>\u0414\u0432\u0438\u0436\u043e\u043a: <code>calc.alloc_engine.apply_allocations()</code>   \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 <code>cost_allocations</code> \u043f\u043e \u0432\u0435\u0441\u0430\u043c \u0438\u0437 <code>driver_values</code>;   \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 <code>weights</code> \u0438 <code>rate</code>.</p> </li> </ul> <p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c: - <code>v_recon_checks</code> \u2014 \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u043b\u043e\u0432 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0432\u043d\u044f\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0435 \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0439; - <code>v_rate_parity</code> \u2014 \u0441\u0432\u0435\u0440\u043a\u0430 LABOR_DIRECT: \u043f\u0443\u043b \u2248 \u03a3 (\u0447\u0430\u0441\u044b \u00d7 \u0441\u0442\u0430\u0432\u043a\u0430).</p>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#7","title":"7. \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0437\u0430\u0442\u0440\u0430\u0442","text":"\u0412\u0438\u0434 \u0437\u0430\u0442\u0440\u0430\u0442 \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a OPEX \u0414\u0440\u0430\u0439\u0432\u0435\u0440 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u041f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434 <code>MFC_PRIM_1</code> \u0427\u0430\u0441\u044b (HOURS) \u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420 <code>MFC_PRIM_3</code> \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u041e\u041f\u0420 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (OVH_LOG) <code>A005\u2013A007</code> \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 (OVH_ADM) <code>A008\u2013A010</code> \u0417\u041f + \u041e\u041f\u0420 \u041e\u0431\u0449\u0435\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#8","title":"8. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u0432\u044c\u044e\u0445\u0438","text":"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 <code>cc_nodes</code>, <code>elem_nodes</code>, <code>ovh_tariffs</code>, <code>cost_rates</code> OPEX-\u0434\u0430\u043d\u043d\u044b\u0435 <code>opex_staging</code>, <code>opex_budget</code> \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f <code>driver_values</code>, <code>cost_allocations</code> \u041e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c <code>v_component_pools</code>, <code>v_cogs_unit</code>, <code>v_rate_parity</code>, <code>v_recon_checks</code>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#9","title":"9. \u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b","text":"<ul> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u2014 \u043f\u0430\u0440\u0430 \u0426\u0417 \u00d7 \u042d\u043b\u0435\u043c\u0435\u043d\u0442;  </li> <li>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b \u2014 <code>opex_budget</code> (\u0438\u043b\u0438 <code>fact_opex</code>);  </li> <li>\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0434\u0432\u0438\u0436\u043e\u043a allocations, \u043f\u0440\u044f\u043c\u043e\u0435 \u0447\u0442\u0435\u043d\u0438\u0435 <code>unit</code> \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e (<code>settings.no_unit_reads = 1</code>);  </li> <li>\u0412\u0441\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u043c \u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u043e\u043c;  </li> <li>\u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u043a\u0432\u043e\u0437\u043d\u044b\u043c\u0438 \u0432\u044c\u044e\u0445\u0430\u043c\u0438: <code>v_component_pools</code> \u2192 <code>cost_allocations</code> \u2192 <code>v_cogs_unit</code>.</li> </ul>"},{"location":"20_process/ACCOUNTING_PRINCIPLES/#10","title":"10. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b","text":"<ul> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c (BOM)</li> <li>\u041f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b (cost_rates)</li> </ul>"},{"location":"20_process/COST_STRUCTURE/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u043e\u0441\u043d\u043e\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0438","text":"<p>\u0412\u0435\u0440\u0441\u0438\u044f: 2025-10-29 \u041e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 Wilo-ERP (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f, Python + SQLite)</p>"},{"location":"20_process/COST_STRUCTURE/#1","title":"1. \u041e\u0431\u0449\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f","text":"<p>\u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u043e\u0441\u043d\u043e\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0438 \u0432 Wilo-ERP \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043f\u043e \u0442\u0440\u0451\u0445\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u0442\u0440\u0430\u0442:</p> <ol> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c (Material Cost) </li> <li>\u041f\u0440\u044f\u043c\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (Direct Manufacturing Cost) </li> <li>\u041d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (Overhead / Indirect Cost)</li> </ol> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u0432\u043e\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 (BOM, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, OPEX, \u0442\u0430\u0440\u0438\u0444\u044b) \u0438 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0437\u0434\u0435\u043b\u0438\u044f \u2014 \u043e\u0442 \u0437\u0430\u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0434\u043e \u043e\u0431\u0449\u0435\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445. </p>"},{"location":"20_process/COST_STRUCTURE_STATION/","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u043e\u0441\u043d\u043e\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0438","text":"<p>\u0412\u0435\u0440\u0441\u0438\u044f: 2025-10-29 \u041e\u0441\u043d\u043e\u0432\u0430\u043d\u043e \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 Wilo-ERP (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u0430\u044f \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f, Python + SQLite)</p>"},{"location":"20_process/COST_STRUCTURE_STATION/#1","title":"1. \u041e\u0431\u0449\u0430\u044f \u043a\u043e\u043d\u0446\u0435\u043f\u0446\u0438\u044f","text":"<p>\u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u043e\u0441\u043d\u043e\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0438 \u0432 Wilo-ERP \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u043f\u043e \u0442\u0440\u0451\u0445\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0437\u0430\u0442\u0440\u0430\u0442:</p> <ol> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c (Material Cost) </li> <li>\u041f\u0440\u044f\u043c\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (Direct Manufacturing Cost) </li> <li>\u041d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (Overhead / Indirect Cost)</li> </ol> <p>\u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u0432\u043e\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 (BOM, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, OPEX, \u0442\u0430\u0440\u0438\u0444\u044b) \u0438 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0437\u0434\u0435\u043b\u0438\u044f \u2014 \u043e\u0442 \u0437\u0430\u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0434\u043e \u043e\u0431\u0449\u0435\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0445 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445.</p> <p></p>"},{"location":"20_process/COST_STRUCTURE_STATION/#2","title":"2. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c","text":"<p>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u0437\u0430\u043a\u0443\u043f\u043e\u0447\u043d\u044b\u0435 \u0446\u0435\u043d\u044b (<code>bom_flat</code>, <code>rm_prices</code>, <code>mo_prices_history</code>).</p> <p>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442:</p> <ol> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0443\u044e\u0449\u0438\u0435 \u2014 \u043f\u0440\u044f\u043c\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u0434\u0435\u0440\u0435\u0432\u0430 BOM.  </li> <li>\u0411\u0440\u0430\u043a (Scrap) \u2014 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u043c\u0443 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0443 <code>scrap_share</code> \u0438\u0437 <code>ovh_tariffs</code>, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u0430\u0437\u0435.  </li> <li>\u0423\u0441\u043b\u0443\u0433\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 (Tolling Services) \u2014 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u043a\u0440\u0430\u0441\u043a\u0430, \u0441\u0432\u0430\u0440\u043a\u0430 \u0438\u043b\u0438 \u043c\u0435\u0445\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u043c \u043f\u043e\u0434\u0440\u044f\u0434\u0447\u0438\u043a\u043e\u043c.  </li> <li>\u0412 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0441 \u0442\u0438\u043f\u043e\u043c <code>service</code>;  </li> <li>\u0426\u0435\u043d\u0430 \u0431\u0435\u0440\u0451\u0442\u0441\u044f \u0438\u0437 <code>mo_prices_history</code> \u0438\u043b\u0438 <code>rm_prices</code>;  </li> <li>\u041f\u0440\u0438 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0438\u0437\u0434\u0435\u043b\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u0431\u0440\u0430\u043a\u0430 \u0438 \u0431\u0430\u0437\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0432\u0435\u0440\u0445\u044d\u0434\u043e\u0432.  </li> </ol> <p>\u0424\u043e\u0440\u043c\u0443\u043b\u0430: <pre><code>Material Cost = \u03a3(BOM.qty \u00d7 Price) + Scrap + Tolling Services\n</code></pre></p> <p>\u0422\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f: - <code>bom_flat</code> \u2014 \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0439 \u0441\u043e\u0441\u0442\u0430\u0432 \u0438\u0437\u0434\u0435\u043b\u0438\u044f - <code>rm_prices</code> / <code>mo_prices_history</code> \u2014 \u0446\u0435\u043d\u044b \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0443\u0441\u043b\u0443\u0433 - <code>v_price_by_scenario</code> \u2014 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0446\u0435\u043d\u044b \u043f\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c - <code>ovh_tariffs(scrap_share)</code> \u2014 \u0434\u043e\u043b\u044f \u0431\u0440\u0430\u043a\u0430  </p>"},{"location":"20_process/COST_STRUCTURE_STATION/#3","title":"3. \u041f\u0440\u044f\u043c\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b","text":"<p>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (<code>routing_flat</code>) \u0438 \u0441\u0442\u0430\u0432\u043a\u0438 (<code>cost_rates</code>, <code>labor_rates_snapshot</code>, <code>depr_rates_snapshot</code>).</p> <p>\u041f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0432\u043a\u0438 \u043f\u043e \u0446\u0435\u043d\u0442\u0440\u0430\u043c \u0437\u0430\u0442\u0440\u0430\u0442:</p> <ol> <li>\u0417\u0430\u0440\u0430\u0431\u043e\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 (Direct Labor) </li> <li>\u0427\u0430\u0441\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u00d7 \u0441\u0442\u0430\u0432\u043a\u0430 \u0438\u0437 <code>cost_rates(kind='labor')</code>.  </li> <li> <p>\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>apply_allocations()</code> \u043f\u043e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0443 <code>HOURS</code>.</p> </li> <li> <p>\u041f\u0440\u043e\u0447\u0438\u0435 \u043f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (Other Direct) </p> </li> <li>\u0422\u0430\u043a\u0436\u0435 \u0447\u0430\u0441\u043e\u0432\u044b\u0435 \u2014 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b, \u044d\u043d\u0435\u0440\u0433\u0438\u044e, \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442, \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u0435.  </li> <li>\u041e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u043e <code>cost_rates(kind='other')</code>.  </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u0442\u0435\u043c \u0436\u0435 \u0442\u0440\u0443\u0434\u043e\u0432\u044b\u043c \u0447\u0430\u0441\u0430\u043c (<code>HOURS</code>).</p> </li> <li> <p>\u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f (Depreciation) </p> </li> <li>\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0430\u0432\u043a\u0435 <code>cost_rates(kind='depr')</code>;  </li> <li>\u0411\u0430\u0437\u0430 \u2014 \u0447\u0430\u0441\u044b (<code>HOURS</code>) \u043f\u043e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c.  </li> </ol> <p>\u0424\u043e\u0440\u043c\u0443\u043b\u0430: <pre><code>Direct Cost = (Labor + Other + Depreciation) \u00d7 Hours\n</code></pre></p> <p>\u041c\u0435\u0445\u0430\u043d\u0438\u0437\u043c \u0440\u0430\u0441\u0447\u0451\u0442\u0430: - <code>routing_flat</code> \u2192 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u0440\u043c\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u044b \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438; - <code>cost_rates</code> \u2192 \u0441\u0442\u0430\u0432\u043a\u0438 \u043f\u043e \u0432\u0438\u0434\u0430\u043c \u043f\u0440\u044f\u043c\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432; - <code>apply_allocations()</code> \u2192 \u043f\u0438\u0448\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 <code>cost_allocations</code> \u043f\u043e <code>HOURS</code>; - <code>v_rate_parity</code> \u2192 \u0441\u0432\u0435\u0440\u044f\u0435\u0442 OPEX-\u043f\u0443\u043b \u0438 \u0441\u0443\u043c\u043c\u0443 \u00ab\u0447\u0430\u0441\u044b \u00d7 \u0441\u0442\u0430\u0432\u043a\u0430\u00bb.  </p>"},{"location":"20_process/COST_STRUCTURE_STATION/#4-overhead","title":"4. \u041d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b (Overhead)","text":"<p>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a: OPEX-\u0431\u044e\u0434\u0436\u0435\u0442 \u0438 \u0442\u0430\u0440\u0438\u0444\u044b \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0445 (<code>ovh_tariffs</code>, <code>ovh_flat</code>).</p> <p>\u0421\u043e\u0441\u0442\u0430\u0432 \u043d\u0435\u043f\u0440\u044f\u043c\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432:</p> <ol> <li>\u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420 (DEPR_OPR) </li> <li>\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u043c \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u0430\u0437\u044b (<code>MATCOST</code>).  </li> <li>\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 <code>ovh_tariffs(cost_type='depr_opr')</code>.  </li> <li> <p>\u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0426\u0417, \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u043e\u043b\u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432.</p> </li> <li> <p>\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e-\u0437\u0430\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 (LOG Overhead) </p> </li> <li>\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u0430\u0437\u0435 (<code>MATCOST</code>).  </li> <li> <p>\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 <code>ovh_tariffs(cost_type='log')</code>.</p> </li> <li> <p>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435 (ADM Overhead) </p> </li> <li>\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u0431\u0430\u0437\u0435 \u00ab\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430 + \u041e\u041f\u0420\u00bb (<code>PAYROLL_OTHER</code>).  </li> <li>\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 <code>ovh_tariffs(cost_type='adm')</code>.</li> </ol> <p>\u0424\u043e\u0440\u043c\u0443\u043b\u0430: <pre><code>Overhead = DEPR_OPR + LOG + ADM\n</code></pre></p> <p>\u041f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f: - \u041d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0437\u0430\u0432\u043e\u0434\u0430 \u043f\u0443\u043b\u044b \u0437\u0430\u0442\u0440\u0430\u0442 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 <code>v_component_pools</code>; - \u0414\u0440\u0430\u0439\u0432\u0435\u0440\u044b (<code>MATCOST</code>, <code>HOURS</code>, <code>PAYROLL_OTHER</code>) \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0431\u0430\u0437\u0443; - \u0410\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 <code>cost_allocations</code> \u0438 \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0432 <code>v_cogs_unit</code>.</p>"},{"location":"20_process/COST_STRUCTURE_STATION/#5","title":"5. \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u043e\u0441\u043d\u043e\u0439 \u0441\u0442\u0430\u043d\u0446\u0438\u0438","text":"\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0414\u0440\u0430\u0439\u0432\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u0430\u0437\u044b I. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0443\u044e\u0449\u0438\u0435 BOM / rm_prices \u2014 \u0426\u0435\u043d\u0430 \u0437\u0430 \u0435\u0434. \u00d7 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0411\u0440\u0430\u043a (Scrap) ovh_tariffs \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 % \u043f\u043e \u0437\u0430\u0432\u043e\u0434\u0443 \u0423\u0441\u043b\u0443\u0433\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 mo_prices_history \u2014 \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0441\u043b\u0443\u0433\u0438 II. \u041f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u0417\u0430\u0440\u0430\u0431\u043e\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 cost_rates(labor) \u0427\u0430\u0441\u044b Routing \u00d7 \u0441\u0442\u0430\u0432\u043a\u0430 \u041f\u0440\u043e\u0447\u0438\u0435 \u043f\u0440\u044f\u043c\u044b\u0435 cost_rates(other) \u0427\u0430\u0441\u044b Routing \u00d7 \u0441\u0442\u0430\u0432\u043a\u0430 \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f cost_rates(depr) \u0427\u0430\u0441\u044b Routing \u00d7 \u0441\u0442\u0430\u0432\u043a\u0430 III. \u041d\u0435\u043f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420 (DEPR_OPR) ovh_tariffs \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 % \u043e\u0442 MATCOST \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (LOG) ovh_tariffs \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0431\u0430\u0437\u0430 % \u043e\u0442 MATCOST \u0410\u0434\u043c\u0438\u043d / \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435 (ADM) ovh_tariffs \u0417\u041f + \u041e\u041f\u0420 % \u043e\u0442 PAYROLL_OTHER"},{"location":"20_process/COST_STRUCTURE_STATION/#6-v_cogs_unit","title":"6. \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f (v_cogs_unit)","text":"<p>\u0412\u0441\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 <code>v_cogs_unit</code>, \u0433\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0430 \u0441\u0443\u043c\u043c\u044b \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438\u0437 <code>cost_allocations</code>. \u042d\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u0443\u044e \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0443: OPEX \u2192 \u041f\u0443\u043b\u044b \u0437\u0430\u0442\u0440\u0430\u0442 \u2192 \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u2192 \u0421\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u0437\u0434\u0435\u043b\u0438\u044f.</p> <p>\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u0438\u0442\u043e\u0433\u043e\u0432\u043e\u0439 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438: <pre><code>Total Cost = Material + Direct + Overhead\n</code></pre></p>"},{"location":"20_process/planning/","title":"Index","text":"<p># Planning (Budget \\&amp; Forecast)</p> <p>## \u0427\u0442\u043e \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435</p> <p>- \u0413\u043e\u0434\u043e\u0432\u043e\u0439 \u0431\u044e\u0434\u0436\u0435\u0442 (Budget)</p> <p>- \u041c\u0435\u0441\u044f\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u044b (Forecasts F1/F2/\u2026)</p> <p>## \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043a\u0442\u043e/\u0447\u0442\u043e/\u043a\u043e\u0433\u0434\u0430)</p> <p>- \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e: \u043e\u0431\u044a\u0435\u043c\u044b, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0442\u0440\u0443\u0434\u043e\u0435\u043c\u043a\u043e\u0441\u0442\u044c (\u0434\u043e D-10)</p> <p>- \u0417\u0430\u043a\u0443\u043f\u043a\u0438: \u0446\u0435\u043d\u044b \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432, \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b (\u0434\u043e D-7)</p> <p>- \u0411\u0443\u0445\u0433\u0430\u043b\u0442\u0435\u0440\u0438\u044f: \u043e\u0441\u0442\u0430\u0442\u043a\u0438, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 (\u0434\u043e D-7)</p> <p>- \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0438\u043d\u0433: \u0441\u0442\u0430\u0432\u043a\u0438 \u0442\u0440\u0443\u0434\u0430/\u043c\u0430\u0448\u0438\u043d\u044b, \u041e\u041f\u0420 \u0442\u0430\u0440\u0438\u0444\u044b (\u0434\u043e D-5)</p> <p>## \u0428\u0430\u0433\u0438</p> <p>1. \u0421\u0431\u043e\u0440 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0432 <code>/templates</code>).</p> <p>2. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 (\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438).</p> <p>3. \u0420\u0430\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0432\u043e\u043a/\u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0432 Wilo-ERP.</p> <p>4. \u0421\u0431\u043e\u0440\u043a\u0430 Budget \u0438 \u0430\u043a\u0442\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Forecast.</p> <p>5. \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0438 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u0438\u0435.</p> <p>## \u0412\u044b\u0445\u043e\u0434\u044b</p> <p>- \u0420\u0435\u0435\u0441\u0442\u0440 \u0432\u0435\u0440\u0441\u0438\u0439 Budget/Forecast.</p> <p>- \u041d\u0430\u0431\u043e\u0440 \u043e\u0442\u0447\u0435\u0442\u043e\u0432: Unit Cost \u043f\u043e SKU, \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u043c\u0435\u043d\u0442\u0430.</p> <p>## \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b</p> <p>- \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c</p> <p>- \u041f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b (cost_rates)</p>"},{"location":"20_process/planning/bom/","title":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c: \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c BOM","text":"<p>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 Wilo \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445: 1. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 - \u0441\u044b\u0440\u044c\u0451 \u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0443\u044e\u0449\u0438\u0435 \u043f\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u043d\u044b\u043c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f\u043c. 2. \u0411\u0440\u0430\u043a \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 (scrap) - \u043f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0435 \u043a\u0430\u043a \u0434\u043e\u043b\u044f \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0431\u0430\u0437\u044b. 3. \u0423\u0441\u043b\u0443\u0433\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 - \u0432\u043d\u0435\u0448\u043d\u044f\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u043b\u0443\u0444\u0430\u0431\u0440\u0438\u043a\u0430\u0442\u043e\u0432 (\u043f\u043e\u0434\u0440\u044f\u0434\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438).</p> <p>\u041d\u0438\u0436\u0435 \u043e\u043f\u0438\u0441\u0430\u043d \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0432\u044b\u0433\u0440\u0443\u0437\u043e\u043a \u0434\u043e \u0432\u0438\u0442\u0440\u0438\u043d <code>v_*</code>, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 (\u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438, \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c).</p>"},{"location":"20_process/planning/bom/#_1","title":"\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","text":""},{"location":"20_process/planning/bom/#1-1erp","title":"1. \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0447\u0451\u0442 \u00ab\u0421\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0441\u0443\u0440\u0441\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439\u00bb (1\u0421:ERP)","text":"<p>\u0424\u0430\u0439\u043b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0448\u0430\u043f\u043a\u0438 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u043e\u043b\u0435\u0439:</p> \u041f\u043e\u043b\u0435 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0413\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>spec_code</code> \u041a\u043e\u0434 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 <code>bom_specs.stage</code> / <code>bom_specs</code> <code>product_id</code> \u041a\u043e\u0434 \u0438\u0437\u0434\u0435\u043b\u0438\u044f (\u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442) \u0441\u0432\u044f\u0437\u044c \u0441 <code>items</code> \u0438 \u043f\u043b\u0430\u043d\u043e\u0432\u044b\u043c\u0438 \u043e\u0431\u044a\u0451\u043c\u0430\u043c\u0438 <code>batch_size</code> \u0420\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u0440\u0442\u0438\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e \u00ab\u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\u00bb <code>batch_uom</code> \u0415\u0418 \u043f\u0430\u0440\u0442\u0438\u0438 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432 <code>bom_specs</code> <code>valid_from</code>, <code>valid_to</code> \u041f\u0435\u0440\u0438\u043e\u0434 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0439 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 <code>is_default</code> \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u043e\u0442\u0431\u043e\u0440 \u0434\u043b\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0443 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0432 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435 <code>planning/resources</code>.</p>"},{"location":"20_process/planning/bom/#2-bom","title":"2. \u0412\u044b\u0433\u0440\u0443\u0437\u043a\u0430 \u0440\u0435\u0441\u0443\u0440\u0441\u043d\u044b\u0445 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 BOM)","text":"<p>\u0424\u0430\u0439\u043b \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u0422\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f \u043f\u043e\u043b\u044f:</p> \u041f\u043e\u043b\u0435 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>spec_code</code> \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0448\u0430\u043f\u043a\u0443 <code>bom_components_stage</code> -&gt; <code>bom_spec_components</code> <code>line_no</code> (\u0435\u0441\u043b\u0438 \u043d\u0435\u0442 - \u0430\u0432\u0442\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f) \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u043a\u043b\u044e\u0447 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <code>component_id</code> \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b / \u043f\u043e\u043b\u0443\u0444\u0430\u0431\u0440\u0438\u043a\u0430\u0442 \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430 1\u0421 <code>qty_per_spec</code> \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u043f\u0430\u0440\u0442\u0438\u044e \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f <code>uom</code> \u0415\u0434\u0438\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438 <code>operation</code> \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f/\u0441\u0442\u0430\u0434\u0438\u044f (\u0432\u043a\u043b. SUBCON) \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0443\u0441\u043b\u0443\u0433 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 <code>stage</code> \u0414\u043e\u043f. \u043c\u0430\u0440\u043a\u0435\u0440 \u044d\u0442\u0430\u043f\u0430 \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430, \u0444\u0438\u043b\u044c\u0442\u0440\u044b <p>\u0424\u043e\u0440\u043c\u0430 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f\u043c\u0438 <code>loaders.bom_loader</code> - \u0441\u043c. \u043a\u0430\u0440\u0442\u0443 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u043a\u043e\u0434\u0435 (<code>need = [\"spec_code\", \"product_id\", \"batch_size\"]</code> \u0438 <code>need = [\"spec_code\", \"component_id\", \"qty_per_spec\"]</code>).  </p> <p>\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0448\u0430\u0431\u043b\u043e\u043d \u0440\u0435\u0441\u0443\u0440\u0441\u0430 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e.</p>"},{"location":"20_process/planning/bom/#3","title":"3. \u0426\u0435\u043d\u044b \u0443\u0441\u043b\u0443\u0433 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b","text":"<p>\u0414\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u043f\u043e\u0434\u0440\u044f\u0434\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0431\u0430\u0437\u044b <code>mo_catalog</code>, <code>mo_prices_history</code>. \u0422\u0440\u0435\u0431\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u043b\u044f:</p> \u041f\u043e\u043b\u0435 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 <code>after_item_id</code> \u041a\u043e\u0434 \u043f\u043e\u043b\u0443\u0444\u0430\u0431\u0440\u0438\u043a\u0430\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 <code>price</code>, <code>currency</code> \u0422\u0430\u0440\u0438\u0444 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 <code>vendor</code> \u041a\u043e\u043d\u0442\u0440\u0430\u0433\u0435\u043d\u0442 (\u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f) <code>effective_from</code>, <code>effective_to</code> \u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0446\u0435\u043d\u044b <code>source</code>, <code>loaded_at</code> \u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 <p>\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a: <code>loaders.loader_mo_prices</code>, UI-\u0444\u043e\u0440\u043c\u0430 \u0432 <code>ui.views_upload</code>.</p>"},{"location":"20_process/planning/bom/#_2","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f","text":"\u0428\u0430\u0433 \u0424\u0443\u043d\u043a\u0446\u0438\u044f / \u0441\u043a\u0440\u0438\u043f\u0442 \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0448\u0430\u043f\u043e\u043a <code>loaders.bom_loader.load_bom_specs_xlsx</code> \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432 <code>bom_specs_stage</code> \u0441 <code>load_id</code> \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0448\u0430\u043f\u043e\u043a <code>loaders.bom_loader.upsert_bom_specs_from_stage</code> \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 <code>bom_specs</code> (\u0432\u0435\u0440\u0441\u0438\u043e\u043d\u043d\u043e\u0441\u0442\u044c, <code>is_default</code>) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0442\u0440\u043e\u043a <code>loaders.bom_loader.load_bom_components_xlsx</code> \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432 <code>bom_components_stage</code> \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a <code>loaders.bom_loader.normalize_bom_components_stage</code> \u0430\u0432\u0442\u043e-\u043d\u0443\u043c\u0435\u0440\u0430\u0446\u0438\u044f <code>line_no</code>, \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u043c\u0443\u0441\u043e\u0440\u0430 \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0441\u0442\u0440\u043e\u043a <code>loaders.bom_loader.upsert_bom_components_from_stage</code> \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 <code>bom_spec_components</code> \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 <code>calc.materialize_sql.materialize_bom_flat</code> \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u0432 <code>bom_flat</code> \u0420\u0430\u0441\u0447\u0451\u0442 \u0446\u0435\u043d \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 <code>calc.materialize.materialize_mo_cost_unit</code> \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 <code>bom_flat</code> \u0438 <code>mo_last_price_current</code> -&gt; <code>mo_cost_unit</code> \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u041c\u041e <code>db.ensure_mo.ensure_mo_schema</code> \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 <code>mo_last_price_current</code>, <code>mo_prices_history</code> <p>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043b\u043e\u0433\u0438\u0440\u0443\u044e\u0442 <code>load_id</code> / <code>computed_at</code> \u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c\u0441\u044f \u0447\u0435\u0440\u0435\u0437 UI (<code>ui.views_upload</code>) \u0438\u043b\u0438 CLI (<code>python -m loaders.bom_loader ...</code>).  </p>"},{"location":"20_process/planning/bom/#_3","title":"\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u044b","text":""},{"location":"20_process/planning/bom/#1","title":"1. \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430","text":"<ol> <li>\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0435 CTE (<code>sql/materialize/bom_flat_build_*.sql</code>) \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0444\u0430\u0431\u0440\u0438\u043a\u0430\u0442\u044b \u0434\u043e \u0441\u044b\u0440\u044c\u0435\u0432\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 <code>bom_flat</code> (<code>parent_item_id</code>, <code>component_item_id</code>, <code>qty_per_unit</code>, <code>level</code>, <code>path</code>).  </li> <li>\u0426\u0435\u043d\u044b \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0438\u0437 <code>rm_prices</code> \u0447\u0435\u0440\u0435\u0437 <code>v_price_by_scenario</code> \u043b\u0438\u0431\u043e <code>mo_last_price_current</code> (\u0434\u043b\u044f \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0430\u0439\u0441-\u043b\u0438\u0441\u0442\u0430).  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438:</li> <li><code>calc.materialize.materialize_mo_cost_unit</code> - \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0443\u043c\u043c\u0443 (<code>qty_per_unit \u00d7 price</code>) \u0434\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b <code>mo_cost_unit</code> \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 <code>mo_cost_unit_monthly</code>.</li> <li><code>calc.mo_materials.get_mo_materials_df</code> - \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043e\u0442\u0447\u0451\u0442 \u0434\u043b\u044f \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 <code>mo_cost_unit</code>, <code>prod_budget</code>).</li> </ol>"},{"location":"20_process/planning/bom/#2","title":"2. \u0411\u0440\u0430\u043a \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432","text":"<ol> <li>\u0411\u0430\u0437\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0431\u0435\u0440\u0451\u0442\u0441\u044f \u0438\u0437 <code>ovh_flat</code> (\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0430\u044f) \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 <code>calc.materialize.materialize_ovh_flat</code>.  </li> <li>\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0434\u043e\u043b\u0438 \u0431\u0440\u0430\u043a\u0430 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 <code>ovh_tariffs</code> (<code>cost_type = 'scrap'</code>).  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>calc.materialize.materialize_scrap_cost_unit</code> \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u043d\u0430 \u0434\u043e\u043b\u044e \u0431\u0440\u0430\u043a\u0430 \u0438 \u043f\u0438\u0448\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 <code>scrap_cost_unit</code> (<code>product_id</code>, <code>scrap_cost</code>).  </li> <li>\u042d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 <code>calc.budget.build_budget_frames</code> \u0438 <code>calc.cost_tree.fetch_materials_cost</code>, \u0433\u0434\u0435 \u0441\u043a\u0440\u0430\u043f \u0438\u0434\u0451\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 (<code>scrap_unit</code>).  </li> </ol>"},{"location":"20_process/planning/bom/#3_1","title":"3. \u0423\u0441\u043b\u0443\u0433\u0438 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430","text":"<ol> <li>\u041f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0432 <code>bom_spec_components.operation</code> \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0445\u0441\u044f \u043a \u043d\u0430\u0440\u0443\u0436\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>SUBCON</code>), \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0449\u0443\u0442\u0441\u044f \u0432 <code>mo_catalog</code> / <code>mo_prices_history</code>.  </li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f <code>calc.materialize.materialize_mo_cost_unit</code> \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>mo_cost_unit</code>: \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0444\u0430\u0431\u0440\u0438\u043a\u0430\u0442\u0430 \u0438 \u0433\u043e\u0442\u043e\u0432\u043e\u0433\u043e \u0438\u0437\u0434\u0435\u043b\u0438\u044f \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e, \u0446\u0435\u043d\u0430 \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0443\u0441\u043b\u0443\u0433\u0438.  </li> <li>\u0412\u044c\u044e\u0445\u0430 <code>mo_last_price_current</code> \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u0431\u043e\u0440 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043d\u044b \u043f\u0440\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0434\u0430\u0442\u044b.  </li> <li>\u0421\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b \u0434\u0430\u043b\u044c\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u044b\u0445 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f\u0445 (<code>calc.budget.unit_cost_breakdown_v2</code>) \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0442\u0447\u0451\u0442 <code>MFC Report</code>.  </li> </ol>"},{"location":"20_process/planning/bom/#_4","title":"\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u0442\u043e\u0447\u043a\u0438 \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u044f","text":"\u0412\u0438\u0442\u0440\u0438\u043d\u0430 / \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0427\u0442\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0413\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>v_bom_costs_scenario</code> <code>db.schema.ensure_scenario_cost_views</code> \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e x \u0446\u0435\u043d\u0430\" \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u043f\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u044b (<code>calc.cost_tree.fetch_materials_cost_by_scenario</code>), UI cost tree <code>mo_cost_unit</code>, <code>mo_cost_unit_monthly</code> <code>calc.materialize.materialize_mo_cost_unit</code> \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044c \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0440\u044f\u0434\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433 \u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 <code>calc.mo_materials</code>, \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u044b\u0435 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438, Streamlit UI <code>scrap_cost_unit</code> <code>calc.materialize.materialize_scrap_cost_unit</code> \u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b \u043d\u0430 \u0431\u0440\u0430\u043a <code>calc.budget.build_budget_frames</code>, <code>v_cogs_unit</code> (\u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 <code>MATCOST</code>) <code>mo_last_price_current</code> <code>db.ensure_mo.ensure_mo_schema</code> \u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0430\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0446\u0435\u043d\u0430 \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 <code>materialize_mo_cost_unit</code>, UI \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 <code>v_cogs_unit</code> <code>db.schema.ensure_scenario_cost_views</code> \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 (\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b + \u0431\u0440\u0430\u043a + \u0443\u0441\u043b\u0443\u0433\u0438 + allocations) dashboards, variance-\u0430\u043d\u0430\u043b\u0438\u0437, \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 CO/PA <p>\u0412\u0441\u0435 \u0442\u0440\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 <code>v_cogs_unit</code> \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b downstream\u2011\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c: - \u041f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - <code>docs/20_process/planning/index.md</code>, \u043e\u0442\u0447\u0451\u0442\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (<code>calc.budget.export_budget_to_excel</code>). - \u041e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c - <code>period_close_reporting</code> (\u043c\u043e\u0441\u0442\u044b \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0438 MFC Report). - \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0446\u0435\u043d - <code>ui.views_cost_tree</code>, <code>tools/debug_budget.py</code>.  </p> <p>\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u0430\u044f \u0446\u0435\u043f\u043e\u0447\u043a\u0430 \u00ab\u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430 -&gt; staging -&gt; \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f -&gt; \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f -&gt; v_*\u00bb \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u0434\u0430\u0451\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043b\u043e\u043a\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0443. </p>"},{"location":"20_process/planning/direct_costs/","title":"\u041f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b: \u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0447\u0430\u0441\u044b","text":"<p>\u041f\u0440\u044f\u043c\u044b\u0435 \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0442 \u0438 \u0446\u0435\u043d\u0442\u0440 \u0437\u0430\u0442\u0440\u0430\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f. \u041d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 <code>component_code</code>: - <code>LABOR_DIRECT</code> - \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043d\u0430\u044f \u043f\u043b\u0430\u0442\u0430 \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 (\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0430\u0441\u0430 \u0442\u0440\u0443\u0434\u0430). - <code>OPR_DIRECT</code> - \u043f\u0440\u043e\u0447\u0438\u0435 \u043f\u0440\u044f\u043c\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b (\u043f\u0440\u0435\u043c\u0438\u0438, \u0434\u043e\u043f\u043b\u0430\u0442\u044b, \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u044b\u0435). - <code>DEPR_DIRECT</code> - \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043b\u0438\u043d\u0438\u0439, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u0430\u044f \u043d\u0430 \u0447\u0430\u0441 \u0440\u0430\u0431\u043e\u0442\u044b.</p> <p>\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043d\u0443\u0436\u043d\u044b \u0434\u0432\u0435 \u0433\u0440\u0443\u043f\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: 1. \u0421\u0442\u0430\u0432\u043a\u0438 (<code>cost_rates.rate_value</code>) \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0433\u043e\u0434\u0430/\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f, \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u0430 \u0438 \u0446\u0435\u043d\u0442\u0440\u0430 \u0437\u0430\u0442\u0440\u0430\u0442. 2. \u0427\u0430\u0441\u044b (<code>routing_flat.hours_per_unit</code>) \u043f\u043e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0441 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0434\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438.</p> <p>\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0446\u0435\u043f\u043e\u0447\u043a\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u0447\u0430\u0441\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432, \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0442\u0430\u0431\u043b\u0438\u0446 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043f\u043e\u043b\u0435\u0439.</p>"},{"location":"20_process/planning/direct_costs/#_2","title":"\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","text":""},{"location":"20_process/planning/direct_costs/#1-excel-direct_cost_loader","title":"1. Excel-\u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0430 direct_cost_loader","text":"<p>\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Streamlit (<code>ui.views_upload.render_direct_cost_loader</code>) \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 Excel \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0435\u0433\u043e \u0432 \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u043e\u043b\u043e\u043d\u043e\u043a:</p> \u041a\u043e\u043b\u043e\u043d\u043a\u0430 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u041f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 <code>CostCenter</code>, <code>CC</code>, <code>cc_id</code> \u0426\u0435\u043d\u0442\u0440 \u0437\u0430\u0442\u0440\u0430\u0442 <code>cost_rates.cc_id</code> <code>WorkCenter</code>, <code>Department</code> \u041a\u043e\u0434 \u0446\u0435\u0445\u0430/\u0443\u0447\u0430\u0441\u0442\u043a\u0430 <code>cost_rates.department_code</code> (\u0447\u0435\u0440\u0435\u0437 <code>ColumnMap.dept_col</code>) \u041c\u0435\u0441\u044f\u0447\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b (<code>2026-01</code>, <code>2026-02</code> ...) \u0421\u0442\u0430\u0432\u043a\u0438 \u0437\u0430 \u043c\u0435\u0441\u044f\u0446 <code>cost_rates.period_or_year</code> (YYYY-MM) \u0413\u043e\u0434\u043e\u0432\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 (<code>Tariff</code>, <code>Yearly</code>, <code>Rate</code>) \u0421\u0440\u0435\u0434\u043d\u0435\u0433\u043e\u0434\u043e\u0432\u0430\u044f \u0441\u0442\u0430\u0432\u043a\u0430 <code>cost_rates.period_or_year</code> (YYYY) <code>Scenario</code> (\u043e\u043f\u0446\u0438\u044f) \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f <code>cost_rates.scenario</code> <code>Currency</code>, <code>Unit</code> (UI \u043f\u043e\u043b\u044f) \u0412\u0430\u043b\u044e\u0442\u0430 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f <code>cost_rates.currency</code>, <code>cost_rates.unit</code>"},{"location":"20_process/planning/direct_costs/#2-opex-","title":"2. OPEX-\u0431\u044e\u0434\u0436\u0435\u0442 (\u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0441\u0442\u0430\u0432\u043e\u043a)","text":"<p>\u0421\u0442\u0430\u0432\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432: - <code>opex_budget</code>, <code>opex_budget_effective</code> - \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e <code>cc_id</code> \u0438 <code>elem_id</code>. - <code>dep_cc_map</code> - \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u0432 (<code>department_code</code>) \u0438 \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442 (<code>cc_id</code>). - <code>prod_budget</code> - \u043f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u043e\u0431\u044a\u0451\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043f\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c, \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0430\u0441\u043e\u0432. - \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u0433\u0440\u0443\u043f\u043f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (\u043d\u0430\u0431\u043e\u0440 \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u044b\u0445 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432) \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 <code>cost_rate_components</code> \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445.</p>"},{"location":"20_process/planning/direct_costs/#3","title":"3. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u044b \u0438 \u0447\u0430\u0441\u044b \u043f\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c","text":"<ul> <li>Excel-\u0444\u0430\u0439\u043b \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 (<code>loaders.upsert_routings</code>) \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0442\u043e\u043b\u0431\u0446\u044b <code>\u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441</code>, <code>\u0412\u0438\u0434 \u0440\u0430\u0431\u043e\u0442</code>, <code>\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e</code> (\u0447\u0430\u0441\u044b), <code>\u0420\u0435\u0441\u0443\u0440\u0441\u043d\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f.\u041a\u043e\u0434</code>, <code>\u041d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430.\u041a\u043e\u0434</code> \u0438 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b.</li> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u044b: <code>routings</code>, <code>routing_operations</code> \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 <code>operation</code>, <code>department</code>, <code>hours</code>.</li> <li>\u041f\u043e\u0441\u043b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 (\u0441\u043c. \u043d\u0438\u0436\u0435) \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f <code>routing_flat</code> \u0441 <code>product_id</code>, <code>department_code</code>, <code>hours_per_unit</code>.</li> </ul>"},{"location":"20_process/planning/direct_costs/#excel","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0442\u0430\u0432\u043e\u043a \u0438\u0437 Excel","text":"\u0428\u0430\u0433 \u041c\u043e\u0434\u0443\u043b\u044c / \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 <code>loaders.direct_cost_loader._read_xlsx</code> \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043b\u0438\u0441\u0442 \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a <code>_detect_columns</code> \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u044f CC, \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442, \u043c\u0435\u0441\u044f\u0446\u044b, \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0442\u0430\u0440\u0438\u0444 \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f <code>_normalize_long</code> \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0432 \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443 \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 <code>period_or_year</code>, <code>scenario</code>, <code>component_code</code>, <code>department_code</code>, <code>cc_id</code>, <code>rate_value</code>, <code>unit</code>, <code>currency</code>, <code>source</code> \u0417\u0430\u043f\u0438\u0441\u044c \u0432 \u0411\u0414 <code>_upsert_cost_rates</code> \u0427\u0435\u0440\u0435\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443 <code>tmp_cost_rates_load</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 <code>INSERT OR REPLACE</code> \u0432 <code>cost_rates</code>, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044f <code>run_id</code>, <code>loaded_at</code> \u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 <code>ui.views_upload.render_direct_cost_loader</code> \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (<code>LABOR_DIRECT</code> / <code>OPR_DIRECT</code> / <code>DEPR_DIRECT</code>), \u0432\u0430\u043b\u044e\u0442\u0443 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f, \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443 <p>\u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>cost_rates</code> \u043f\u043e\u0441\u043b\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u043e\u043b\u0435\u0439: <code>period_or_year</code>, <code>scenario</code>, <code>component_code</code>, <code>department_code</code>, <code>cc_id</code>, <code>product_id</code>, <code>rate_value</code>, <code>unit</code>, <code>currency</code>, <code>source</code>, <code>run_id</code>, <code>loaded_at</code>. \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u043a\u043b\u044e\u0447: <code>(period_or_year, scenario, component_code, department_code, cc_id, product_id)</code>.</p>"},{"location":"20_process/planning/direct_costs/#opex-","title":"\u0420\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043e\u043a \u0438\u0437 OPEX-\u0431\u044e\u0434\u0436\u0435\u0442\u0430","text":"<p>\u0421\u043a\u0440\u0438\u043f\u0442\u044b \u0432 <code>calc/opr_rates_calc.py</code> \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0442\u0430\u0432\u043a\u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.</p> \u0428\u0430\u0433 \u041c\u043e\u0434\u0443\u043b\u044c / SQL \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 <code>DEFAULT_RATE_COMPONENTS</code> / <code>list_rate_components</code> \u0421\u043f\u0438\u0441\u043e\u043a \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u043f\u0440\u044f\u043c\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0427\u0430\u0441\u044b <code>sql/opr_rates_calc/select_hours_by_department.sql</code> \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 <code>hours_year</code> = \u03a3(\u043f\u043b\u0430\u043d\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0451\u043c \u00d7 <code>routing_flat.hours_per_unit</code>) \u043f\u043e <code>prod_budget</code> \u0438 <code>routing_flat</code>, \u0444\u0438\u043b\u044c\u0442\u0440\u0443\u044f \u043f\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e \u0438 \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0421\u0443\u043c\u043c\u044b OPEX <code>sql/opr_rates_calc/select_amounts_by_cc_for_elemgroup.sql</code> \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u044b \u043f\u043e <code>opex_budget_effective</code> \u0434\u043b\u044f \u043d\u0443\u0436\u043d\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u0421\u0432\u0435\u0434\u0435\u043d\u0438\u0435 <code>calc/opr_rates_calc.calculate_tariff_summary</code> (\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438) \u0421\u0442\u0440\u043e\u0438\u0442 DataFrame c \u0441\u0443\u043c\u043c\u0430\u043c\u0438 \u0438 \u0447\u0430\u0441\u0430\u043c\u0438, \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u0432\u043a\u0443 <code>amount_total / hours_year</code> \u0417\u0430\u043f\u0438\u0441\u044c \u0441\u0442\u0430\u0432\u043e\u043a <code>calc/opr_rates_calc.save_rates_cost_rates</code> + <code>sql/opr_rates_calc/upsert_cost_rates.sql</code> \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 <code>cost_rates</code> \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 (<code>source = 'opr_calc'</code>, <code>run_id = uuid</code>) <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0441\u0442\u0430\u0432\u043a\u0430\u043c\u0438 (<code>_load_rates_from_cost_rates</code>) \u0438 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u00ab\u0447\u0442\u043e \u0435\u0441\u043b\u0438\u00bb (\u0432\u044b\u0431\u043e\u0440 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u043c\u0435\u0441\u044f\u0446\u0435\u0432, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0433\u0440\u0443\u043f\u043f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432).</p>"},{"location":"20_process/planning/direct_costs/#_3","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0447\u0430\u0441\u043e\u0432 \u0438\u0437 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432","text":"\u0428\u0430\u0433 \u041c\u043e\u0434\u0443\u043b\u044c / \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0414\u0435\u0442\u0430\u043b\u0438 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 <code>loaders.upsert_routings</code> (\u0447\u0430\u0441\u0442\u044c <code>loaders.loaders</code>) \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432 <code>routing_operations</code>, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (<code>DEPT_RULES</code>) \u041f\u043b\u043e\u0441\u043a\u0438\u0439 routing <code>calc.materialize_sql.materialize_routing_flat</code> (\u0438\u043b\u0438 <code>calc.routing_flat.materialize_routing_flat</code>) \u0421\u043a\u0440\u0438\u043f\u0442\u044b <code>sql/materialize/routing_tree_build.sql</code> \u0438 <code>routing_flat_build.sql</code> \u0441\u043e\u0437\u0434\u0430\u044e\u0442 <code>routing_flat</code> \u0441 \u043f\u043e\u043b\u044f\u043c\u0438 <code>product_id</code>, <code>node_product_id</code>, <code>department_code</code>, <code>hours_per_unit</code>, <code>operation_id</code>, <code>routing_group</code> \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u0432 <code>loaders.loaders.diagnose_routings</code>, <code>ui.views_quality</code> \u041f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0435\u0437 \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u0430 \u0438\u043b\u0438 \u0441 \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u0447\u0430\u0441\u0430\u043c\u0438 \u0421\u0432\u044f\u0437\u043a\u0430 \u0441 \u0446\u0435\u043d\u0442\u0440\u0430\u043c\u0438 \u0437\u0430\u0442\u0440\u0430\u0442 <code>dep_cc_map</code> \u041f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0441\u0442\u0430\u0432\u043e\u043a \u0438 \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043c\u0430\u043f\u043f\u0438\u043d\u0433\u0430 <code>department_code -&gt; cc_id</code> <p>\u0427\u0430\u0441\u044b \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 (<code>routing_flat.hours_per_unit</code>) \u0443\u043c\u043d\u043e\u0436\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u043e\u0432. \u0415\u0441\u043b\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043d\u043e\u0432\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c <code>routing_flat</code> \u043f\u0435\u0440\u0435\u0434 \u043f\u0435\u0440\u0435\u0441\u0447\u0451\u0442\u043e\u043c \u0441\u0442\u0430\u0432\u043e\u043a \u0438\u043b\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0439.</p>"},{"location":"20_process/planning/direct_costs/#_4","title":"\u0412\u0438\u0442\u0440\u0438\u043d\u044b \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":"\u0410\u0440\u0442\u0435\u0444\u0430\u043a\u0442 \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0413\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>cost_rates</code> \u041b\u0438\u0431\u043e <code>direct_cost_loader</code>, \u043b\u0438\u0431\u043e <code>calc/opr_rates_calc.save_rates_cost_rates</code> \u0421\u0442\u0430\u0432\u043a\u0438 \u043f\u043e \u0433\u043e\u0434\u0430\u043c/\u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c \u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c \u0421\u043b\u0443\u0436\u0438\u0442 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u043c \u0434\u043b\u044f <code>v_routing_costs_scenario</code>, <code>calc.cost_tree.fetch_direct_cost</code>, \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u044b\u0445 \u043e\u0442\u0447\u0451\u0442\u043e\u0432 <code>routing_flat</code> <code>materialize_routing_flat</code> \u0427\u0430\u0441\u044b \u043f\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u0435 \u0447\u0430\u0441\u043e\u0432 (<code>select_hours_by_department.sql</code>) \u0438 \u0432 <code>v_routing_costs_scenario</code> <code>v_routing_costs_scenario</code> <code>db.schema.ensure_scenario_cost_views</code> \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 = <code>hours_per_unit \u00d7 rate_value</code> \u043f\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044e \u0438 \u0433\u043e\u0434\u0443 \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0434\u043b\u044f <code>calc.cost_tree.fetch_direct_cost_by_scenario</code>, <code>calc.budget.unit_cost_breakdown_v2</code>, UI cost tree <code>v_cogs_unit</code> \u0422\u0430\u043c \u0436\u0435 \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u043f\u0440\u044f\u043c\u044b\u0435 \u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0438\u0442\u0440\u0438\u043d\u0430 \u0434\u043b\u044f \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, variance-\u0430\u043d\u0430\u043b\u0438\u0437\u043e\u0432 \u0438 MFC Report"},{"location":"20_process/planning/direct_costs/#_5","title":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f","text":"<ul> <li>UI: <code>ui.views_upload</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u043a\u043b\u0430\u0434\u043a\u0443 \u00ab\u0421\u0442\u0430\u0432\u043a\u0438 \u043f\u0440\u044f\u043c\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442\u00bb, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0443\u044e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c Excel, \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 <code>cost_rates</code>.</li> <li>CLI / \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u044f: \u043c\u043e\u0434\u0443\u043b\u0438 <code>calc/opr_rates_calc.py</code>, <code>sql/opr_rates_calc/*</code> \u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u0437 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>python -m calc.opr_rates_calc ...</code>) \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0442\u0430\u0432\u043e\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0443\u0442\u0432\u0435\u0440\u0436\u0434\u0451\u043d\u043d\u044b\u0445 \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432.</li> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430: <code>loaders.direct_cost_loader._validate</code> \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0446\u0435\u043d\u0442\u0440\u044b \u0437\u0430\u0442\u0440\u0430\u0442, \u043f\u0443\u0441\u0442\u044b\u0435 \u0442\u0430\u0440\u0438\u0444\u044b \u0438 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b; <code>calc.cost_tree.audit_schema_and_data</code> \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u0445 \u0432 <code>cost_rates</code> \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0445.</li> </ul>"},{"location":"20_process/planning/direct_costs/#_6","title":"\u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>flowchart LR\n    subgraph Rates[\"\u0421\u0442\u0430\u0432\u043a\u0438\"]\n        excel[\"Excel direct_cost_loader\"]\n        opex[\"OPEX \u0431\u044e\u0434\u0436\u0435\u0442\u044b\\n(opex_budget_effective)\"]\n        loader[\"loaders.direct_cost_loader\"]\n        opr_calc[\"calc/opr_rates_calc\"]\n        excel --&gt; loader --&gt; cost_rates\n        opex --&gt; opr_calc --&gt; cost_rates\n    end\n    subgraph Hours[\"\u0427\u0430\u0441\u044b\"]\n        rout_xlsx[\"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u043d\u044b\u0435 \u043a\u0430\u0440\u0442\u044b\"]\n        rout_loader[\"loaders.upsert_routings\"]\n        rout_flat[\"routing_flat\"]\n        rout_xlsx --&gt; rout_loader --&gt; rout_flat\n    end\n    cost_rates --&gt; v_routing[\"v_routing_costs_scenario\"]\n    rout_flat --&gt; v_routing\n    v_routing --&gt; v_cogs[\"v_cogs_unit\"]</code></pre> <p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0447\u0430\u0441\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u043f\u0440\u044f\u043c\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0432 \u0431\u044e\u0434\u0436\u0435\u0442\u0435, \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f\u0445 \u0438 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c \u0441\u0442\u0430\u0432\u043e\u043a \u0438\u043b\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432. </p>"},{"location":"20_process/planning/test/","title":"Test","text":"<p>\u0420\u0430\u0441\u0447\u0435\u0442 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u0442\u0430\u043f\u044b</p>"},{"location":"40_runbooks/run_close_period/","title":"\u041e\u0431\u0437\u043e\u0440 \u043c\u043e\u0434\u0443\u043b\u0435\u0439","text":"<p># Runbook: \u0417\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u043f\u0435\u0440\u0438\u043e\u0434\u0430</p> <p>**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:** \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u044b MFC report \u0438 Unit Cost \u043f\u043e SKU \u0437\u0430 \u043f\u0435\u0440\u0438\u043e\u0434.</p> <p>## \u0427\u0435\u043a-\u043b\u0438\u0441\u0442 (\u043a\u043e\u0440\u043e\u0442\u043a\u043e)</p> <p>- [ ] \u0413\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u0438\u0447\u043a\u0438 \u0438 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u043e\u0432</p> <p>- [ ] \u0417\u0430\u043f\u0443\u0441\u043a \u0440\u0430\u0441\u0447\u0435\u0442\u043e\u0432 \u0432 Wilo-ERP</p> <p>- [ ] \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u0441\u0432\u0435\u0440\u043a\u0438</p> <p>- [ ] \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u043e\u0442\u0447\u0435\u0442\u043e\u0432</p> <p>## \u041f\u043e\u0448\u0430\u0433\u043e\u0432\u043e</p> <p>1. \u041f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044c \u0444\u0430\u043a\u0442\u044b \u0438 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438.</p> <p>2. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0440\u0430\u0441\u0447\u0435\u0442 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 (\u0441\u043a\u0440\u0438\u043f\u0442/\u043a\u043d\u043e\u043f\u043a\u0430).</p> <p>3. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0447\u0435\u0442\u044b (\u0440\u0430\u0437\u0434\u0435\u043b *Troubleshooting*).</p> <p>4. \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c **MFC report** \u0438 **SKU Unit Cost**.</p> <p>5. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442\u044b \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u0438\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435\u0439.</p>"},{"location":"zz_old/","title":"Wilo-ERP","text":""},{"location":"zz_old/#_1","title":"\u0427\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (\u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0435\u0439\u0447\u0430\u0441)","text":"<p>Wilo-ERP \u2014 \u044d\u0442\u043e \u00ab\u043c\u0438\u043d\u0438-ERP\u00bb \u043d\u0430 Python + SQLite + Streamlit-UI, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043c\u044b\u043a\u0430\u0435\u0442 \u0446\u0438\u043a\u043b: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0432\u0438\u0447\u043a\u0438 \u0438\u0437 1\u0421/Excel \u2192 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b/\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438/\u0442\u0430\u0440\u0438\u0444\u044b/overhead) \u2192 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u043c\u0435\u0436\u0434\u0443 \u0426\u0424\u041e \u2192 OPEX \u2192 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 Excel.</p> <p>\u041d\u0438\u0436\u0435 \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u0438 \u0438\u0445 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>1) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 1\u0421 \u0438 Excel - \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u00ab\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0447\u0451\u0442\u044b\u00bb 1\u0421 (TXT/XLSX) \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 Excel-\u0444\u0430\u0439\u043b\u044b: \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430, BOM/\u0440\u0435\u0441\u0443\u0440\u0441\u043d\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routing), \u043e\u0431\u044a\u0451\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u0446\u0435\u043d\u044b RM, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438. - \u041f\u0430\u0440\u0441\u0435\u0440\u044b \u0442\u043e\u043b\u0435\u0440\u0430\u043d\u0442\u043d\u044b \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430\u043c/\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c \u0438 \u00ab\u0433\u0440\u044f\u0437\u043d\u044b\u043c\u00bb \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430\u043c. - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u2014 \u0441\u0442\u0435\u0439\u0434\u0436\u0438\u043d\u0433-\u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 (items, BOM, routings, prices, volumes, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u0426\u0424\u041e/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442).</p> <p>2) \u0420\u0430\u0441\u0447\u0451\u0442 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445) - \u0414\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438: \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 BOM (\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e, \u0434\u043e \u043b\u0438\u0441\u0442\u044c\u0435\u0432), \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u044a\u0451\u043c\u044b (\u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e), \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u043d\u0430 RM. - \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442/\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432, \u0447\u0430\u0441\u044b/\u043d\u043e\u0440\u043c\u044b, \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u044b\u0445. - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u2014 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043f\u043e CC \u00d7 Element \u00d7 Period), \u0441 load_id, sheet \u0438 \u0442.\u043f.</p> <p>3) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX - \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a OPEX: \u0441\u0442\u0435\u0439\u0434\u0436\u0438\u043d\u0433 \u0431\u0435\u0437 \u0436\u0451\u0441\u0442\u043a\u0438\u0445 FK, \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430/\u0441\u0442\u0430\u0442\u044c\u0438 \u2192 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0437\u0430\u0442\u0440\u0430\u0442), \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u00ab\u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445\u00bb \u0426\u0424\u041e/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0444\u043b\u0430\u0433\u0438 <code>unmapped</code>, <code>missing_cc</code>, <code>bad_amount</code>, <code>dup_candidate</code>. - \u041a\u043e\u043c\u043c\u0438\u0442 \u0432 \u00ab\u0447\u0438\u0441\u0442\u0443\u044e\u00bb \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439.</p> <p>4) \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0437\u0430\u0442\u0440\u0430\u0442 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c\u0438 (\u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u044b) - \u041b\u043e\u0433\u0438\u043a\u0430 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u0443\u0441\u043b\u0443\u0433: \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f/\u0434\u0430\u0440\u0438\u0442\u0435\u043b\u044f, \u0447\u0442\u043e\u0431\u044b \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u0438 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0431\u044b\u043b\u0430 \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u043e\u0439. - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u043e\u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0442\u0430\u0440\u0438\u0444\u043e\u0432, \u0441\u0432\u043e\u0434\u0430 CC\u00d7Element.</p> <p>5) \u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u0430 \u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b - \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0442\u0430\u0432\u043a\u0443 (\u0447\u0430\u0441/\u0441\u043c\u0435\u043d\u0430/\u043f\u0435\u0440\u0438\u043e\u0434) \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u0430 \u043f\u043e \u0426\u0424\u041e/\u0443\u0447\u0430\u0441\u0442\u043a\u0430\u043c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043e\u0431\u044a\u0451\u043c\u0430 \u0447\u0430\u0441\u043e\u0432 \u0438 \u0444\u043e\u043d\u0434\u0430 \u043e\u043f\u043b\u0430\u0442\u044b (\u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432). - \u0422\u0430\u0440\u0438\u0444 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 \u0431\u044e\u0434\u0436\u0435\u0442.</p> <p>6) \u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u043e\u0432\u0435\u0440\u0445\u044d\u0434\u043e\u0432 (\u041e\u041f\u0420/\u041e\u0425\u0420) - \u0422\u0430\u0431\u043b\u0438\u0446\u0430 <code>ovh_tariffs</code> \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u0434\u043b\u0438\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442: <code>(overhead_group, year, cost_type, share)</code>. - \u0422\u0438\u043f\u044b: <code>scrap</code> (\u0431\u0440\u0430\u043a, \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432), <code>depr_opr</code> (\u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420, \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432), <code>log</code> (\u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430, \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432), <code>adm</code> (\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435, \u043e\u0442 \u0431\u0430\u0437\u044b \u0417\u041f+\u041e\u041f\u0420). - \u0412 UI \u0442\u0440\u0438 \u0432\u043a\u043b\u0430\u0434\u043a\u0438: \u00ab\u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420\u00bb, \u00ab\u041e\u0425\u0420 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430\u00bb, \u00ab\u041e\u0425\u0420 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435\u00bb. \u0415\u0441\u0442\u044c \u043a\u043d\u043e\u043f\u043a\u0438 \u00ab\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c\u00bb (\u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440: \u043c\u0430\u0442\u0431\u0430\u0437\u0430, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, % \u0434\u043e\u043b\u044f, \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u043e \u0437\u0430\u0432\u043e\u0434\u0443) \u0438 \u00ab\u0417\u0430\u043f\u0438\u0441\u0430\u0442\u044c\u00bb (\u0430\u043f\u0441\u0435\u0440\u0442 \u0432 <code>ovh_tariffs</code>). - \u0414\u043b\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u043c\u0430\u0442\u0431\u0430\u0437 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u043e \u0437\u0430\u0432\u043e\u0434\u0443. - \u041c\u0430\u0441\u0441\u043e\u0432\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 <code>ovh_year</code>.</p> <p>7) \u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 Excel - \u0415\u0434\u0438\u043d\u044b\u0435 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 (\u043f\u043e \u0441\u043b\u043e\u044f\u043c): CC\u00d7Element\u00d7Period, \u043e\u0442\u0447\u0451\u0442\u044b \u043f\u043e OPEX, \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u0442\u0440\u0443\u0434, overhead, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0432\u044c\u044e. - \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b \u0441\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a (load_id), \u043b\u043e\u0433\u0430\u043c\u0438/\u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u043c\u0430\u043f\u043f\u0438\u043d\u0433\u0430.</p> <p>8) \u0412\u0430\u0436\u043d\u043e: \u0432\u0441\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c\u0438 (price_scn, vol_scn). \u041b\u044e\u0431\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043e\u0442\u0447\u0451\u0442 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f, \u0438\u043d\u0430\u0447\u0435 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0437 active_scenarios.</p> <p>9) PPV: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043e\u0442\u0447\u0435\u0442 \u043f\u043e \u0446\u0435\u043d\u043e\u0432\u043e\u043c\u0443 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044e. \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u0446\u0435\u043d: \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u0430\u044f, \u0442\u0435\u043a\u0443\u0449\u0430\u044f,... \u0412\u044b\u0431\u043e\u0440 \u043e\u0431\u044a\u0435\u043c\u043e\u0432 \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u041e\u0442\u0447\u0435\u0442 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0433\u0440\u0443\u043f\u043f\u043e\u0432\u044b\u043c\u0438 commodity group. \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a items</p>"},{"location":"zz_old/#_2","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":"<ul> <li>\u042f\u0437\u044b\u043a \u0438 \u0421\u0423\u0411\u0414: Python 3.x, SQLite.  </li> <li>UI: Streamlit.  </li> <li>\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0430\u043a\u0435\u0442\u043e\u0432:  </li> <li><code>calc</code> \u2014 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u0430, \u0442\u0430\u0440\u0438\u0444\u043e\u0432, \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432, \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.  </li> <li><code>db</code> \u2014 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0441\u0445\u0435\u043c\u044b, \u0437\u0430\u043f\u0440\u043e\u0441\u044b, ensure-\u0444\u0443\u043d\u043a\u0446\u0438\u0438.  </li> <li><code>loaders</code> \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (CCG, MFCPRIM, BOM, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0446\u0435\u043d\u044b, \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b, OPEX).  </li> <li><code>ui</code> \u2014 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Streamlit: \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0439, \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432, \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u043e\u0432.  </li> <li><code>config</code> \u2014 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438.  </li> <li><code>app</code> \u2014 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0411\u0414.  </li> </ul> <p>\u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430: 7 \u043f\u0430\u043a\u0435\u0442\u043e\u0432, 39 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, 251 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, 13 \u043a\u043b\u0430\u0441\u0441\u043e\u0432.</p>"},{"location":"zz_old/#_3","title":"\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ul> <li>\u0422\u0430\u0431\u043b\u0438\u0446\u044b: 35, \u0412\u044c\u044e\u0445\u0438: 3.  </li> <li>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438:  </li> <li><code>items</code>, <code>bom</code>, <code>routings</code> \u2014 \u041d\u0421\u0418 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438 \u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432.  </li> <li><code>rm_prices</code>, <code>mo_prices_history</code> \u2014 \u0446\u0435\u043d\u044b \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0443\u0441\u043b\u0443\u0433.  </li> <li><code>prod_budget</code>, <code>opex_budget</code>, <code>opex_staging</code> \u2014 \u0431\u044e\u0434\u0436\u0435\u0442\u044b.  </li> <li><code>labor_rates</code>, <code>depr_rates_snapshot</code>, <code>opr_rates_snapshot</code> \u2014 \u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u044b.  </li> <li><code>transfer_*</code> \u2014 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432.  </li> <li>\u0412\u044c\u044e\u0445\u0438: <code>mo_last_price_current</code>, <code>personnel_yearly</code>, <code>personnel_yearly_effective</code>.  </li> <li>\u041f\u043e\u043b\u043d\u0430\u044f \u0441\u0445\u0435\u043c\u0430 \u0432 DB_SCHEMA.md.</li> </ul>"},{"location":"zz_old/#_4","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b","text":"<ol> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u041d\u0421\u0418 \u2014 \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430, BOM, \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0446\u0435\u043d\u044b, \u0426\u0424\u041e, \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0442\u0440\u0430\u0442.  </li> <li>\u0411\u044e\u0434\u0436\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u2014 \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 BOM, \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u044a\u0451\u043c\u044b, \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d.  </li> <li>\u0411\u044e\u0434\u0436\u0435\u0442 OPEX \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0447\u0435\u0440\u0435\u0437 staging, \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c, \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f, \u043a\u043e\u043c\u043c\u0438\u0442.  </li> <li>\u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u2014 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b, \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f, \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 (\u043f\u043e \u0426\u0424\u041e \u0438 \u0433\u043e\u0434\u0430\u043c).  </li> <li>\u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u2014 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 headcount.  </li> <li>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.  </li> <li>\u041e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c \u2014 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 Excel \u043f\u043e \u0441\u043b\u043e\u044f\u043c (CC\u00d7Element\u00d7Period), \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b, \u043b\u043e\u0433\u0438.</li> </ol>"},{"location":"zz_old/#_5","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<ol> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 (Python 3.11+, pandas, numpy, openpyxl, streamlit).  </li> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c UI: <pre><code>streamlit run ui/app_streamlit.py\n</code></pre></li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041d\u0421\u0418 \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 (MFCPRIM, CCG).  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u2014 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c detail_rules / fallback_rules.  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c BOM, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b, \u0441\u0442\u0430\u0432\u043a\u0438.  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0411\u044e\u0434\u0436\u0435\u0442 \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c prod_budget, opex_budget.  </li> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u043f\u0440\u043e\u0433\u043d\u0430\u0442\u044c quality-\u0447\u0435\u043a\u0435\u0440\u044b.  </li> </ol>"},{"location":"zz_old/#_6","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<ul> <li>Project overview \u2014 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.  </li> <li>Architecture summary \u2014 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430.  </li> <li>Database schema \u2014 SQL-DDL \u0442\u0430\u0431\u043b\u0438\u0446 \u0438 \u0432\u044c\u044e\u0445.  </li> <li>Data dictionary \u2014 \u043a\u043e\u043d\u0434\u0435\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u0430\u043d\u043d\u044b\u0445.  </li> </ul>"},{"location":"zz_old/ARCHITECTURE_SUMMARY/","title":"ARCHITECTURE_SUMMARY","text":"<p>Generated: 2025-10-20 16:25 (local) Commit: 5fb6b11</p>"},{"location":"zz_old/ARCHITECTURE_SUMMARY/#_1","title":"\u0427\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u043b\u043e\u0441\u044c","text":"<ul> <li>\u041c\u043e\u0434\u0443\u043b\u0438 (\u043a\u043e\u0434):</li> <li>calc.materialize</li> <li>calc.materialize_sql</li> <li>calc.mo_materials</li> <li>\u041e\u0431\u044a\u0435\u043a\u0442\u044b \u0411\u0414:</li> <li>opex_staging</li> <li>price_scenarios</li> <li>rm_price_load</li> <li>rm_prices</li> <li>v_price_by_scenario</li> </ul>"},{"location":"zz_old/ARCHITECTURE_SUMMARY/#_2","title":"\u041a\u0430\u043a \u0442\u0435\u0447\u0451\u0442 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>\u041e\u0442 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u044b\u0440\u044c\u0435\u0432\u044b\u0445 \u0446\u0435\u043d \u2192 staging \u2192 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0438 (BOM/calc/UI). \u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b: \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a (rm_price_loads), \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0446\u0435\u043d\u044b (rm_prices), \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 (v_price_by_scenario).</p>"},{"location":"zz_old/ARCHITECTURE_SUMMARY/#-","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0430\u0432\u0442\u043e-\u0434\u043e\u043a\u0438","text":"<ul> <li>\u041a\u043e\u043c\u0430\u043d\u0434\u0430: <code>python tools/gen_docs.py</code></li> </ul>"},{"location":"zz_old/ARCHITECTURE_SUMMARY/#_3","title":"\u0413\u0434\u0435 \u043f\u0440\u0430\u0432\u0438\u0442\u044c","text":"<ul> <li><code>db/schema.py</code> \u2014 ensure_rm_price_load_table / ensure_rm_prices / ensure_price_views</li> <li><code>loaders</code> \u2014 \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u044b\u0440\u044c\u0435\u0432\u044b\u0445 \u0446\u0435\u043d \u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432</li> <li><code>calc</code> \u2014 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0438 \u0438 \u0440\u0430\u0441\u0447\u0451\u0442\u044b</li> <li><code>app</code> \u2014 \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0438 UI</li> </ul>"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/","title":"Data dictionary (condensed)","text":"<ul> <li>Tables: 35, Views: 3</li> </ul>"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#bom","title":"<code>bom</code>","text":"column type notnull default pk parent_item_id TEXT 1 1 component_item_id TEXT 1 2 qty_per_unit REAL 1 0 valid_from TEXT 1 3 valid_to TEXT 1 0 level INTEGER 1 0 path TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#bom_spec_components","title":"<code>bom_spec_components</code>","text":"column type notnull default pk spec_code TEXT 1 1 line_no INTEGER 1 2 component_id TEXT 1 0 qty_per_spec REAL 1 0 uom TEXT 0 0 operation TEXT 0 0 stage TEXT 0 0 valid_from TEXT 1 '1900-01-01' 3 valid_to TEXT 1 '2999-12-31' 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#bom_specs","title":"<code>bom_specs</code>","text":"column type notnull default pk spec_code TEXT 0 1 product_id TEXT 1 0 batch_size REAL 1 1 0 batch_uom TEXT 0 0 valid_from TEXT 1 '1900-01-01' 0 valid_to TEXT 1 '2999-12-31' 0 is_default INTEGER 1 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#dep_cc_map","title":"<code>dep_cc_map</code>","text":"column type notnull default pk department_code TEXT 0 1 cc_id TEXT 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#depr_cost_unit","title":"<code>depr_cost_unit</code>","text":"column type notnull default pk product_id TEXT 1 1 department_code TEXT 1 2 hours_total REAL 1 0 rate_per_hour REAL 0 0 currency TEXT 0 0 cost_total REAL 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#depr_cost_unit_total","title":"<code>depr_cost_unit_total</code>","text":"column type notnull default pk product_id TEXT 0 1 cost_total REAL 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#depr_rates_snapshot","title":"<code>depr_rates_snapshot</code>","text":"column type notnull default pk department_code TEXT 0 0 cc_id TEXT 0 0 rate_per_hour REAL 1 0 hours_year REAL 0 0 personnel_cost_year REAL 0 0 bud_year INTEGER 0 0 currency TEXT 1 'RUB' 0 source TEXT 0 0 calc_at TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#items","title":"<code>items</code>","text":"column type notnull default pk item_id TEXT 0 1 article TEXT 0 0 name TEXT 0 0 uom TEXT 0 0 is_produced INTEGER 1 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#labor_rates","title":"<code>labor_rates</code>","text":"column type notnull default pk period TEXT 1 1 department_code TEXT 1 2 rate_per_hour REAL 1 0 currency TEXT 1 'RUB' 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#labor_rates_snapshot","title":"<code>labor_rates_snapshot</code>","text":"column type notnull default pk department_code TEXT 0 0 cc_id TEXT 0 0 rate_per_hour REAL 0 0 hours_year REAL 0 0 personnel_cost_year REAL 0 0 bud_year INTEGER 0 0 source TEXT 0 0 calc_at TEXT 0 0 currency TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#mo_catalog","title":"<code>mo_catalog</code>","text":"column type notnull default pk before_item_id TEXT 1 0 after_item_id TEXT 1 0 is_active INTEGER 1 1 0 source TEXT 0 0 loaded_at TEXT 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#mo_cost_unit","title":"<code>mo_cost_unit</code>","text":"column type notnull default pk product_id TEXT 1 1 component_item_id TEXT 1 2 qty_per_unit REAL 1 0 price REAL 1 0 amount REAL 1 0 currency TEXT 1 'RUB' 0 computed_at TEXT 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#mo_prices_history","title":"<code>mo_prices_history</code>","text":"column type notnull default pk after_item_id TEXT 1 0 price REAL 1 0 currency TEXT 1 'RUB' 0 vendor TEXT 0 0 effective_from TEXT 0 0 effective_to TEXT 0 0 source TEXT 0 0 loaded_at TEXT 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#opex_budget","title":"<code>opex_budget</code>","text":"column type notnull default pk id INTEGER 0 1 load_id TEXT 1 0 cc_id TEXT 1 0 elem_id TEXT 1 0 bud_year INTEGER 1 0 amount REAL 1 0 text_note TEXT 0 0 comments TEXT 0 0 supplier_text TEXT 0 0 source_sheet TEXT 0 0 created_at INTEGER 1 strftime('%s','now') 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#opex_staging","title":"<code>opex_staging</code>","text":"column type notnull default pk id INTEGER 0 1 load_id TEXT 1 0 sheet_name TEXT 0 0 cc_id TEXT 0 0 cost_type TEXT 0 0 account_descr TEXT 0 0 bud_2026 REAL 0 0 text_note TEXT 0 0 comments TEXT 0 0 supplier_text TEXT 0 0 mapped_elem_id TEXT 0 0 missing_cc INTEGER 1 0 0 unmapped_elem INTEGER 1 0 0 bad_amount INTEGER 1 0 0 dup_candidate INTEGER 1 0 0 created_at INTEGER 1 strftime('%s','now') 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#opr_cost_unit","title":"<code>opr_cost_unit</code>","text":"column type notnull default pk product_id TEXT 1 1 department_code TEXT 1 2 hours_total REAL 1 0 rate_per_hour REAL 0 0 currency TEXT 0 0 cost_total REAL 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#opr_cost_unit_total","title":"<code>opr_cost_unit_total</code>","text":"column type notnull default pk product_id TEXT 0 1 cost_total REAL 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#opr_rates_snapshot","title":"<code>opr_rates_snapshot</code>","text":"column type notnull default pk department_code TEXT 0 0 cc_id TEXT 0 0 rate_per_hour REAL 1 0 hours_year REAL 0 0 personnel_cost_year REAL 0 0 bud_year INTEGER 0 0 currency TEXT 1 'RUB' 0 source TEXT 0 0 calc_at TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#ovh_cost_unit","title":"<code>ovh_cost_unit</code>","text":"column type notnull default pk product_id TEXT 0 1 depr_opr_cost REAL 1 0.0 0 log_cost REAL 1 0.0 0 adm_cost REAL 1 0.0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#ovh_flat","title":"<code>ovh_flat</code>","text":"column type notnull default pk product_id TEXT 1 1 overhead_group TEXT 1 2 mat_cost REAL 1 0.0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#ovh_tariffs","title":"<code>ovh_tariffs</code>","text":"column type notnull default pk overhead_group TEXT 1 1 year INTEGER 1 2 scrap_share REAL 0 0 depr_opr_share REAL 0 0 log_share REAL 0 0 adm_share REAL 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#personnel_monthly","title":"<code>personnel_monthly</code>","text":"column type notnull default pk cc_id TEXT 1 1 ym TEXT 1 2 headcount REAL 1 0 source TEXT 0 0 note TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#prod_budget","title":"<code>prod_budget</code>","text":"column type notnull default pk product_id TEXT 1 1 month_code TEXT 1 2 qty REAL 1 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#rm_prices","title":"<code>rm_prices</code>","text":"column type notnull default pk item_code TEXT 1 1 article TEXT 0 0 uom TEXT 0 0 price REAL 1 0 currency TEXT 1 'RUB' 2 source TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#routing_operations","title":"<code>routing_operations</code>","text":"column type notnull default pk routing_op_id INTEGER 0 1 routing_id INTEGER 1 0 seq INTEGER 1 0 operation TEXT 1 0 department TEXT 0 0 hours REAL 1 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#routing_tree","title":"<code>routing_tree</code>","text":"column type notnull default pk root_product_id TEXT 0 1 node_product_id TEXT 0 2 level INTEGER 0 0 qty_per_unit REAL 0 0 path TEXT 0 0 routing_id TEXT 0 0 routing_group TEXT 0 0 routing_name TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#routings","title":"<code>routings</code>","text":"column type notnull default pk routing_id INTEGER 0 1 routing_group TEXT 1 0 spec_code TEXT 0 0 item_id TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#run_history","title":"<code>run_history</code>","text":"column type notnull default pk run_id TEXT 0 1 started_at TEXT 0 0 ended_at TEXT 0 0 scope TEXT 0 0 params_json TEXT 0 0 status TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#run_log","title":"<code>run_log</code>","text":"column type notnull default pk run_id TEXT 0 0 step TEXT 0 0 product_id TEXT 0 0 level TEXT 0 0 msg TEXT 0 0 extra_json TEXT 0 0 ts TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#scrap_cost_unit","title":"<code>scrap_cost_unit</code>","text":"column type notnull default pk product_id TEXT 0 1 scrap_cost REAL 1 0.0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#sqlite_sequence","title":"<code>sqlite_sequence</code>","text":"column type notnull default pk name 0 0 seq 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#transfer_batches","title":"<code>transfer_batches</code>","text":"column type notnull default pk batch_id TEXT 0 1 bud_year INTEGER 1 0 rule_id INTEGER 1 0 created_at TEXT 0 datetime('now') 0 created_by TEXT 0 0 comment TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#transfer_opex_items","title":"<code>transfer_opex_items</code>","text":"column type notnull default pk batch_id TEXT 1 1 from_cc_id TEXT 1 2 to_cc_id TEXT 1 3 to_elem_id TEXT 0 0 elem_id TEXT 1 4 amount_delta REAL 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#transfer_personnel_items","title":"<code>transfer_personnel_items</code>","text":"column type notnull default pk id INTEGER 0 1 batch_id TEXT 1 0 from_cc_id TEXT 0 0 to_cc_id TEXT 1 0 headcount_delta REAL 1 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#transfer_rules","title":"<code>transfer_rules</code>","text":"column type notnull default pk rule_id INTEGER 0 1 name TEXT 1 0 donor_cc_id TEXT 1 0 enabled INTEGER 1 1 0 scope TEXT 0 'direct_personnel' 0 recipient_cc_id TEXT 0 0"},{"location":"zz_old/DATA_DICTIONARY_CONDENSED/#views","title":"Views","text":"<ul> <li><code>mo_last_price_current</code></li> <li><code>personnel_yearly</code></li> <li><code>personnel_yearly_effective</code></li> </ul>"},{"location":"zz_old/DB_SCHEMA/","title":"DB_SCHEMA","text":"<p>Generated: 2025-10-20 16:25 (local) Commit: 5fb6b11</p> <p>Schema built by: <code>db.schema.ensure_schema</code></p>"},{"location":"zz_old/DB_SCHEMA/#objects","title":"Objects","text":"<ul> <li>Tables:</li> <li>TABLE: active_alloc_sets</li> <li>TABLE: active_periods</li> <li>TABLE: active_scenarios</li> <li>TABLE: activity_to_routing</li> <li>TABLE: bom</li> <li>TABLE: bom_spec_components</li> <li>TABLE: bom_specs</li> <li>TABLE: bom_specs_new</li> <li>TABLE: commodity_map</li> <li>TABLE: cost_allocations</li> <li>TABLE: cost_rates</li> <li>TABLE: dep_cc_map</li> <li>TABLE: depr_rates_snapshot</li> <li>TABLE: driver_sets</li> <li>TABLE: driver_values</li> <li>TABLE: drivers</li> <li>TABLE: elem_to_ovh</li> <li>TABLE: fact_measures</li> <li>TABLE: item_nodes</li> <li>TABLE: items</li> <li>TABLE: lineage_links</li> <li>TABLE: mfc_cc_set_items</li> <li>TABLE: mfc_cc_sets</li> <li>TABLE: mfc_elem_set_items</li> <li>TABLE: mfc_elem_sets</li> <li>TABLE: mfc_report_defs</li> <li>TABLE: mfc_report_line_rules</li> <li>TABLE: mfc_report_lines</li> <li>TABLE: mo_catalog</li> <li>TABLE: mo_cost_unit</li> <li>TABLE: mo_prices_history</li> <li>TABLE: opex_budget</li> <li>TABLE: opex_cycle_batches</li> <li>TABLE: opex_cycle_defs</li> <li>TABLE: opex_cycle_rules</li> <li>TABLE: opex_staging (materials pipeline)</li> <li>TABLE: opr_rates_snapshot</li> <li>TABLE: ovh_bases_year</li> <li>TABLE: ovh_cost_unit</li> <li>TABLE: ovh_flat</li> <li>TABLE: ovh_nodes</li> <li>TABLE: ovh_tariffs</li> <li>TABLE: ovh_tariffs_new</li> <li>TABLE: ovh_tariffs_wide_bak</li> <li>TABLE: personnel_monthly</li> <li>TABLE: price_scenarios (materials pipeline)</li> <li>TABLE: prod_budget</li> <li>TABLE: rm_price_load (materials pipeline)</li> <li>TABLE: rm_prices (materials pipeline)</li> <li>TABLE: routing_nodes</li> <li>TABLE: routing_operations</li> <li>TABLE: routing_tree</li> <li>TABLE: routings</li> <li>TABLE: rule_scope</li> <li>TABLE: rule_sets</li> <li>TABLE: rules</li> <li>TABLE: run_history</li> <li>TABLE: run_log</li> <li>TABLE: schema_version</li> <li>TABLE: scrap_cost_unit</li> <li>TABLE: sqlite_sequence</li> <li>TABLE: transfer_batches</li> <li>TABLE: transfer_opex_items</li> <li>TABLE: transfer_personnel_items</li> <li>TABLE: transfer_rule_recipients</li> <li>TABLE: transfer_rules</li> <li>Views:</li> <li>VIEW: mo_last_price_current</li> <li>VIEW: opex_budget_effective</li> <li>VIEW: ovh_tariffs_wide_compat</li> <li>VIEW: personnel_yearly</li> <li>VIEW: personnel_yearly_effective</li> <li>VIEW: v_alloc_lineage</li> <li>VIEW: v_allocation_rule_effective</li> <li>VIEW: v_cogs_unit</li> <li>VIEW: v_component_pools</li> <li>VIEW: v_driver_catalog</li> <li>VIEW: v_driver_values</li> <li>VIEW: v_elem_component_map</li> <li>VIEW: v_item_cg</li> <li>VIEW: v_labor_cost_unit_total</li> <li>VIEW: v_opr_cost_unit_total</li> <li>VIEW: v_ovh_cost_unit</li> <li>VIEW: v_ovh_flat_compat</li> <li>VIEW: v_price_by_article</li> <li>VIEW: v_price_by_scenario (materials pipeline)</li> <li>VIEW: v_prod_budget_active</li> <li>VIEW: v_rate_parity</li> <li>VIEW: v_recon_checks</li> </ul>"},{"location":"zz_old/DB_SCHEMA/#table-active_alloc_sets","title":"TABLE: active_alloc_sets","text":"<pre><code>CREATE TABLE active_alloc_sets(\n          scenario TEXT PRIMARY KEY,\n          rule_set_id TEXT NOT NULL,\n          valid_from TEXT,\n          valid_to   TEXT\n        )\n</code></pre> # name type notnull default pk 0 scenario TEXT 0 1 1 rule_set_id TEXT 1 0 2 valid_from TEXT 0 0 3 valid_to TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-active_periods","title":"TABLE: active_periods","text":"<pre><code>CREATE TABLE active_periods(\n          id INTEGER PRIMARY KEY CHECK(id=1),\n          month_code TEXT NOT NULL -- 'YYYY-MM'\n        )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 month_code TEXT 1 0"},{"location":"zz_old/DB_SCHEMA/#table-active_scenarios","title":"TABLE: active_scenarios","text":"<pre><code>CREATE TABLE active_scenarios(\n      id INTEGER PRIMARY KEY CHECK (id=1),\n      vol_scenario   TEXT,  -- \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 'BG26_VOL'\n      price_scenario TEXT   -- \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 'FC3' \u0438\u043b\u0438 'BG26' (\u0435\u0441\u043b\u0438 \u0431\u0443\u0434\u0435\u0448\u044c \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u0442\u044c price-\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438 \u043a\u0430\u043a \u0432 price-loads)\n    )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 vol_scenario TEXT 0 0 2 price_scenario TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-activity_to_routing","title":"TABLE: activity_to_routing","text":"<pre><code>CREATE TABLE activity_to_routing (\n            activity_code   TEXT NOT NULL,\n            routing_node_id TEXT NOT NULL,\n            PRIMARY KEY (activity_code, routing_node_id)\n        )\n</code></pre> # name type notnull default pk 0 activity_code TEXT 1 1 1 routing_node_id TEXT 1 2"},{"location":"zz_old/DB_SCHEMA/#table-bom","title":"TABLE: bom","text":"<pre><code>CREATE TABLE bom(\n      parent_item_id    TEXT NOT NULL,\n      component_item_id TEXT NOT NULL,\n      qty_per_unit      REAL NOT NULL CHECK(qty_per_unit&gt;=0),\n      valid_from        TEXT NOT NULL,\n      valid_to          TEXT NOT NULL,\n      level             INTEGER NOT NULL,\n      path              TEXT,\n      PRIMARY KEY(parent_item_id, component_item_id, valid_from)\n    )\n</code></pre> # name type notnull default pk 0 parent_item_id TEXT 1 1 1 component_item_id TEXT 1 2 2 qty_per_unit REAL 1 0 3 valid_from TEXT 1 3 4 valid_to TEXT 1 0 5 level INTEGER 1 0 6 path TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-bom_spec_components","title":"TABLE: bom_spec_components","text":"<pre><code>CREATE TABLE bom_spec_components(\n      spec_code    TEXT NOT NULL,\n      line_no      INTEGER NOT NULL,\n      component_id TEXT NOT NULL,\n      qty_per_spec REAL NOT NULL CHECK(qty_per_spec&gt;=0),\n      uom          TEXT,\n      operation    TEXT,\n      stage        TEXT,\n      valid_from   TEXT NOT NULL DEFAULT '1900-01-01',\n      valid_to     TEXT NOT NULL DEFAULT '2999-12-31',\n      PRIMARY KEY(spec_code, line_no, valid_from)\n    )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 1 1 1 line_no INTEGER 1 2 2 component_id TEXT 1 0 3 qty_per_spec REAL 1 0 4 uom TEXT 0 0 5 operation TEXT 0 0 6 stage TEXT 0 0 7 valid_from TEXT 1 '1900-01-01' 3 8 valid_to TEXT 1 '2999-12-31' 0"},{"location":"zz_old/DB_SCHEMA/#table-bom_specs","title":"TABLE: bom_specs","text":"<pre><code>CREATE TABLE bom_specs(\n      spec_code  TEXT PRIMARY KEY,\n      product_id TEXT NOT NULL,\n      batch_size REAL NOT NULL DEFAULT 1 CHECK(batch_size&gt;0),\n      batch_uom  TEXT,\n      valid_from TEXT NOT NULL DEFAULT '1900-01-01',\n      valid_to   TEXT NOT NULL DEFAULT '2999-12-31',\n      is_default INTEGER NOT NULL DEFAULT 1 CHECK(is_default IN (0,1))\n    )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 0 1 1 product_id TEXT 1 0 2 batch_size REAL 1 1 0 3 batch_uom TEXT 0 0 4 valid_from TEXT 1 '1900-01-01' 0 5 valid_to TEXT 1 '2999-12-31' 0 6 is_default INTEGER 1 1 0"},{"location":"zz_old/DB_SCHEMA/#table-bom_specs_new","title":"TABLE: bom_specs_new","text":"<pre><code>CREATE TABLE bom_specs_new(\n              spec_code   TEXT NOT NULL,\n              product_id  TEXT NOT NULL,\n              batch_size  REAL NOT NULL DEFAULT 1.0,\n              batch_uom   TEXT,\n              valid_from  TEXT NOT NULL,\n              valid_to    TEXT NOT NULL DEFAULT '2999-12-31',\n              is_default  INTEGER NOT NULL DEFAULT 1,\n              PRIMARY KEY (spec_code, valid_from)\n            )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 1 1 1 product_id TEXT 1 0 2 batch_size REAL 1 1.0 0 3 batch_uom TEXT 0 0 4 valid_from TEXT 1 2 5 valid_to TEXT 1 '2999-12-31' 0 6 is_default INTEGER 1 1 0"},{"location":"zz_old/DB_SCHEMA/#table-commodity_map","title":"TABLE: commodity_map","text":"<pre><code>CREATE TABLE commodity_map (\n        matl_prefix            TEXT PRIMARY KEY,   -- \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 '123'\n        matl_group_text_opt    TEXT,               -- \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u043f\u043e\u043b\u043d\u043e\u0435 \u0438\u043c\u044f Matl Group\n        commodity_group        TEXT NOT NULL,      -- \u043d\u043e\u043c\u0435\u0440 CG, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 '123'\n        commodity_group_text   TEXT                -- \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 CG\n    )\n</code></pre> # name type notnull default pk 0 matl_prefix TEXT 0 1 1 matl_group_text_opt TEXT 0 0 2 commodity_group TEXT 1 0 3 commodity_group_text TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-cost_allocations","title":"TABLE: cost_allocations","text":"<pre><code>CREATE TABLE cost_allocations (\n            period         TEXT NOT NULL,              -- 'YYYY-MM'\n            scenario       TEXT NOT NULL DEFAULT 'BASE',\n            component_code TEXT NOT NULL,              -- e.g., 'LABOR_DIRECT'\n            product_id     TEXT NOT NULL,\n            cc_id          TEXT NOT NULL,\n            rule_id        INTEGER NOT NULL,\n            amount         REAL NOT NULL,\n            weight         REAL,\n            run_id         TEXT,\n            PRIMARY KEY (period, scenario, component_code, product_id, cc_id, rule_id)\n        )\n</code></pre> # name type notnull default pk 0 period TEXT 1 1 1 scenario TEXT 1 'BASE' 2 2 component_code TEXT 1 3 3 product_id TEXT 1 4 4 cc_id TEXT 1 5 5 rule_id INTEGER 1 6 6 amount REAL 1 0 7 weight REAL 0 0 8 run_id TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-cost_rates","title":"TABLE: cost_rates","text":"<pre><code>CREATE TABLE cost_rates (\n            period_or_year TEXT NOT NULL,\n            scenario       TEXT NOT NULL DEFAULT '',\n            component_code TEXT NOT NULL,\n            cc_id          TEXT NOT NULL DEFAULT '',\n            product_id     TEXT NOT NULL DEFAULT '',\n            rate_value     REAL NOT NULL,\n            unit           TEXT,\n            source         TEXT,\n            run_id         TEXT,\n            PRIMARY KEY (period_or_year, scenario, component_code, cc_id, product_id)\n        )\n</code></pre> # name type notnull default pk 0 period_or_year TEXT 1 1 1 scenario TEXT 1 '' 2 2 component_code TEXT 1 3 3 cc_id TEXT 1 '' 4 4 product_id TEXT 1 '' 5 5 rate_value REAL 1 0 6 unit TEXT 0 0 7 source TEXT 0 0 8 run_id TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-dep_cc_map","title":"TABLE: dep_cc_map","text":"<pre><code>CREATE TABLE dep_cc_map (\n      department_code TEXT PRIMARY KEY,  \n      cc_id           TEXT NOT NULL      \n    )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 1 1 cc_id TEXT 1 0"},{"location":"zz_old/DB_SCHEMA/#table-depr_rates_snapshot","title":"TABLE: depr_rates_snapshot","text":"<pre><code>CREATE TABLE depr_rates_snapshot (\n            department_code     TEXT,\n            cc_id               TEXT,\n            rate_per_hour       REAL NOT NULL CHECK(rate_per_hour&gt;=0),\n            hours_year          REAL,\n            personnel_cost_year REAL,\n            bud_year            INTEGER,\n            currency            TEXT NOT NULL DEFAULT 'RUB',\n            source              TEXT,\n            calc_at             TEXT,\n            loaded_at           TEXT DEFAULT (datetime('now'))\n        )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 1 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 currency TEXT 1 'RUB' 0 7 source TEXT 0 0 8 calc_at TEXT 0 0 9 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DB_SCHEMA/#table-driver_sets","title":"TABLE: driver_sets","text":"<pre><code>CREATE TABLE driver_sets (\n            set_id     TEXT PRIMARY KEY,\n            name       TEXT,\n            version    INTEGER,\n            valid_from TEXT,\n            valid_to   TEXT,\n            status     TEXT\n        )\n</code></pre> # name type notnull default pk 0 set_id TEXT 0 1 1 name TEXT 0 0 2 version INTEGER 0 0 3 valid_from TEXT 0 0 4 valid_to TEXT 0 0 5 status TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-driver_values","title":"TABLE: driver_values","text":"<pre><code>CREATE TABLE driver_values (\n            set_id      TEXT NOT NULL,\n            period      TEXT NOT NULL,                  -- 'YYYY-MM'\n            scenario    TEXT,\n            driver_code TEXT NOT NULL,\n            product_id  TEXT,\n            cc_id       TEXT,\n            elem_id     TEXT,\n            value       REAL NOT NULL,\n            unit        TEXT,\n            source_ref  TEXT,\n            loaded_at   TEXT NOT NULL DEFAULT (datetime('now')),\n            PRIMARY KEY (set_id, period, driver_code, product_id, cc_id),\n            FOREIGN KEY (driver_code) REFERENCES drivers(driver_code),\n            FOREIGN KEY (set_id) REFERENCES driver_sets(set_id)\n        )\n</code></pre> # name type notnull default pk 0 set_id TEXT 1 1 1 period TEXT 1 2 2 scenario TEXT 0 0 3 driver_code TEXT 1 3 4 product_id TEXT 0 4 5 cc_id TEXT 0 5 6 elem_id TEXT 0 0 7 value REAL 1 0 8 unit TEXT 0 0 9 source_ref TEXT 0 0 10 loaded_at TEXT 1 datetime('now') 0 <p>Foreign keys: - set_id -&gt; driver_sets(set_id) (on update NO ACTION, on delete NO ACTION, match NONE) - driver_code -&gt; drivers(driver_code) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-drivers","title":"TABLE: drivers","text":"<pre><code>CREATE TABLE drivers (\n            driver_code   TEXT PRIMARY KEY,\n            name          TEXT,\n            unit          TEXT,\n            granularity   TEXT,                    -- e.g. product_cc, cc, product\n            agg_rule      TEXT,                    -- e.g. sum, avg\n            source_policy TEXT,\n            is_ratio      INTEGER NOT NULL DEFAULT 0 CHECK(is_ratio IN (0,1))\n        )\n</code></pre> # name type notnull default pk 0 driver_code TEXT 0 1 1 name TEXT 0 0 2 unit TEXT 0 0 3 granularity TEXT 0 0 4 agg_rule TEXT 0 0 5 source_policy TEXT 0 0 6 is_ratio INTEGER 1 0 0"},{"location":"zz_old/DB_SCHEMA/#table-elem_to_ovh","title":"TABLE: elem_to_ovh","text":"<pre><code>CREATE TABLE elem_to_ovh (\n            elem_id    TEXT NOT NULL,\n            ovh_node_id TEXT NOT NULL,\n            PRIMARY KEY (elem_id, ovh_node_id)\n        )\n</code></pre> # name type notnull default pk 0 elem_id TEXT 1 1 1 ovh_node_id TEXT 1 2"},{"location":"zz_old/DB_SCHEMA/#table-fact_measures","title":"TABLE: fact_measures","text":"<pre><code>CREATE TABLE fact_measures (\n            period        TEXT NOT NULL,\n            scenario      TEXT NOT NULL DEFAULT '',\n            product_id    TEXT NOT NULL,\n            component_code TEXT NOT NULL DEFAULT '',\n            measure_code  TEXT NOT NULL,\n            value         REAL NOT NULL,\n            unit          TEXT,\n            PRIMARY KEY (period, scenario, product_id, component_code, measure_code)\n        )\n</code></pre> # name type notnull default pk 0 period TEXT 1 1 1 scenario TEXT 1 '' 2 2 product_id TEXT 1 3 3 component_code TEXT 1 '' 4 4 measure_code TEXT 1 5 5 value REAL 1 0 6 unit TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-item_nodes","title":"TABLE: item_nodes","text":"<pre><code>CREATE TABLE item_nodes (\n            node_id   TEXT PRIMARY KEY,\n            parent_id TEXT,\n            name      TEXT,\n            level     INTEGER,\n            path      TEXT\n        )\n</code></pre> # name type notnull default pk 0 node_id TEXT 0 1 1 parent_id TEXT 0 0 2 name TEXT 0 0 3 level INTEGER 0 0 4 path TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-items","title":"TABLE: items","text":"<pre><code>CREATE TABLE items(\n      item_id     TEXT PRIMARY KEY,\n      article     TEXT,\n      name        TEXT,\n      uom         TEXT,\n      is_produced INTEGER NOT NULL DEFAULT 0\n    , routing_group TEXT, ovh_group_code TEXT, matl_group TEXT, product_hierarchy TEXT)\n</code></pre> # name type notnull default pk 0 item_id TEXT 0 1 1 article TEXT 0 0 2 name TEXT 0 0 3 uom TEXT 0 0 4 is_produced INTEGER 1 0 0 5 routing_group TEXT 0 0 6 ovh_group_code TEXT 0 0 7 matl_group TEXT 0 0 8 product_hierarchy TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-lineage_links","title":"TABLE: lineage_links","text":"<pre><code>CREATE TABLE lineage_links (\n            src_table TEXT NOT NULL,\n            src_pk    TEXT NOT NULL,\n            dst_table TEXT NOT NULL,\n            dst_pk    TEXT NOT NULL,\n            rule_id   INTEGER,\n            run_id    TEXT\n        )\n</code></pre> # name type notnull default pk 0 src_table TEXT 1 0 1 src_pk TEXT 1 0 2 dst_table TEXT 1 0 3 dst_pk TEXT 1 0 4 rule_id INTEGER 0 0 5 run_id TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-mfc_cc_set_items","title":"TABLE: mfc_cc_set_items","text":"<pre><code>CREATE TABLE mfc_cc_set_items(\n        set_id  INTEGER NOT NULL,\n        cc_id   TEXT    NOT NULL,\n        PRIMARY KEY(set_id, cc_id),\n        FOREIGN KEY(set_id) REFERENCES mfc_cc_sets(set_id)\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 1 1 1 cc_id TEXT 1 2 <p>Foreign keys: - set_id -&gt; mfc_cc_sets(set_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-mfc_cc_sets","title":"TABLE: mfc_cc_sets","text":"<pre><code>CREATE TABLE mfc_cc_sets(\n        set_id      INTEGER PRIMARY KEY AUTOINCREMENT,\n        set_name    TEXT UNIQUE NOT NULL,\n        expand_mode TEXT NOT NULL DEFAULT 'leaves'   -- 'leaves' | 'subtree' | 'exact'\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 0 1 1 set_name TEXT 1 0 2 expand_mode TEXT 1 'leaves' 0"},{"location":"zz_old/DB_SCHEMA/#table-mfc_elem_set_items","title":"TABLE: mfc_elem_set_items","text":"<pre><code>CREATE TABLE mfc_elem_set_items(\n        set_id  INTEGER NOT NULL,\n        elem_id TEXT    NOT NULL,\n        PRIMARY KEY(set_id, elem_id),\n        FOREIGN KEY(set_id) REFERENCES mfc_elem_sets(set_id)\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 1 1 1 elem_id TEXT 1 2 <p>Foreign keys: - set_id -&gt; mfc_elem_sets(set_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-mfc_elem_sets","title":"TABLE: mfc_elem_sets","text":"<pre><code>CREATE TABLE mfc_elem_sets(\n        set_id      INTEGER PRIMARY KEY AUTOINCREMENT,\n        set_name    TEXT UNIQUE NOT NULL,\n        expand_mode TEXT NOT NULL DEFAULT 'subtree'  -- 'subtree' | 'leaves' | 'exact'\n    )\n</code></pre> # name type notnull default pk 0 set_id INTEGER 0 1 1 set_name TEXT 1 0 2 expand_mode TEXT 1 'subtree' 0"},{"location":"zz_old/DB_SCHEMA/#table-mfc_report_defs","title":"TABLE: mfc_report_defs","text":"<pre><code>CREATE TABLE mfc_report_defs (\n        report_id       TEXT PRIMARY KEY,                 -- 'TARGET_2026'\n        name            TEXT NOT NULL,                    -- 'Target Cost 2026'\n        bud_year        INTEGER NOT NULL,                 -- 2026\n        vol_scenario    TEXT,                             -- NULL = \u0431\u0440\u0430\u0442\u044c \u0438\u0437 active_scenarios\n        price_scenario  TEXT,                             -- NULL = \u0431\u0440\u0430\u0442\u044c \u0438\u0437 active_scenarios\n        created_at      TEXT DEFAULT (datetime('now'))\n    )\n</code></pre> # name type notnull default pk 0 report_id TEXT 0 1 1 name TEXT 1 0 2 bud_year INTEGER 1 0 3 vol_scenario TEXT 0 0 4 price_scenario TEXT 0 0 5 created_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DB_SCHEMA/#table-mfc_report_line_rules","title":"TABLE: mfc_report_line_rules","text":"<pre><code>CREATE TABLE mfc_report_line_rules (\n        report_id   TEXT NOT NULL,\n        line_no     INTEGER NOT NULL,\n        rule_no     INTEGER NOT NULL,                     -- \u0447\u0442\u043e\u0431\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u044b\u043b\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0430\u0432\u0438\u043b\n        source_type TEXT NOT NULL,                        -- \u0441\u043c. \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435\n        cc_root     TEXT,                                 -- \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0435\u0440\u0435\u0432\u0430 \u0426\u0417 (NULL = \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u0430)\n        elem_root   TEXT,                                 -- \u043a\u043e\u0440\u0435\u043d\u044c \u0434\u0435\u0440\u0435\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 (NULL = \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u0430)\n        cost_type   TEXT,                                 -- \u043f\u043e\u0434\u0442\u0438\u043f \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 (\u043d\u0430\u043f\u0440., 'machine'|'ext_tools' \u0434\u043b\u044f depr)\n        weight      REAL DEFAULT 1.0,                     -- \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 (+/-/\u0434\u043e\u043b\u044f)\n        note        TEXT, cc_set_id INTEGER, elem_set_id INTEGER,\n        PRIMARY KEY (report_id, line_no, rule_no),\n        FOREIGN KEY (report_id, line_no) REFERENCES mfc_report_lines(report_id, line_no),\n        CHECK (source_type IN (\n            'material','subcontracting','scrap',\n            'opex','depr','structure','acos',\n            'trading_ic','trading_ext'\n        ))\n    )\n</code></pre> # name type notnull default pk 0 report_id TEXT 1 1 1 line_no INTEGER 1 2 2 rule_no INTEGER 1 3 3 source_type TEXT 1 0 4 cc_root TEXT 0 0 5 elem_root TEXT 0 0 6 cost_type TEXT 0 0 7 weight REAL 0 1.0 0 8 note TEXT 0 0 9 cc_set_id INTEGER 0 0 10 elem_set_id INTEGER 0 0 <p>Foreign keys: - report_id -&gt; mfc_report_lines(report_id) (on update NO ACTION, on delete NO ACTION, match NONE) - line_no -&gt; mfc_report_lines(line_no) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-mfc_report_lines","title":"TABLE: mfc_report_lines","text":"<pre><code>CREATE TABLE mfc_report_lines (\n        report_id   TEXT NOT NULL,\n        line_no     INTEGER NOT NULL,                     -- \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430\n        report_line TEXT    NOT NULL,                     -- \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043e\u0442\u0447\u0451\u0442\u0435\n        PRIMARY KEY (report_id, line_no),\n        FOREIGN KEY (report_id) REFERENCES mfc_report_defs(report_id)\n    )\n</code></pre> # name type notnull default pk 0 report_id TEXT 1 1 1 line_no INTEGER 1 2 2 report_line TEXT 1 0 <p>Foreign keys: - report_id -&gt; mfc_report_defs(report_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-mo_catalog","title":"TABLE: mo_catalog","text":"<pre><code>CREATE TABLE mo_catalog (\n        before_item_id TEXT NOT NULL,\n        after_item_id  TEXT NOT NULL,\n        is_active      INTEGER NOT NULL DEFAULT 1,\n        source         TEXT,\n        loaded_at      TEXT NOT NULL,\n        UNIQUE(before_item_id, after_item_id)\n    )\n</code></pre> # name type notnull default pk 0 before_item_id TEXT 1 0 1 after_item_id TEXT 1 0 2 is_active INTEGER 1 1 0 3 source TEXT 0 0 4 loaded_at TEXT 1 0"},{"location":"zz_old/DB_SCHEMA/#table-mo_cost_unit","title":"TABLE: mo_cost_unit","text":"<pre><code>CREATE TABLE mo_cost_unit (\n        product_id          TEXT NOT NULL,\n        component_item_id   TEXT NOT NULL,\n        qty_per_unit        REAL NOT NULL,\n        price               REAL NOT NULL,\n        amount              REAL NOT NULL,\n        currency            TEXT NOT NULL DEFAULT 'RUB',\n        computed_at         TEXT NOT NULL,\n        PRIMARY KEY (product_id, component_item_id)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 component_item_id TEXT 1 2 2 qty_per_unit REAL 1 0 3 price REAL 1 0 4 amount REAL 1 0 5 currency TEXT 1 'RUB' 0 6 computed_at TEXT 1 0"},{"location":"zz_old/DB_SCHEMA/#table-mo_prices_history","title":"TABLE: mo_prices_history","text":"<pre><code>CREATE TABLE mo_prices_history (\n        after_item_id   TEXT NOT NULL,\n        price           REAL NOT NULL,\n        currency        TEXT NOT NULL DEFAULT 'RUB',\n        vendor          TEXT,\n        effective_from  TEXT,\n        effective_to    TEXT,\n        source          TEXT,\n        loaded_at       TEXT NOT NULL\n    )\n</code></pre> # name type notnull default pk 0 after_item_id TEXT 1 0 1 price REAL 1 0 2 currency TEXT 1 'RUB' 0 3 vendor TEXT 0 0 4 effective_from TEXT 0 0 5 effective_to TEXT 0 0 6 source TEXT 0 0 7 loaded_at TEXT 1 0"},{"location":"zz_old/DB_SCHEMA/#table-opex_budget","title":"TABLE: opex_budget","text":"<pre><code>CREATE TABLE opex_budget (\n    id                       INTEGER PRIMARY KEY AUTOINCREMENT,\n    load_id                  TEXT    NOT NULL,\n    cc_id                    TEXT    NOT NULL,                 -- FK \u2192 cc_nodes.cc_id\n    elem_id                  TEXT    NOT NULL,                 -- FK \u2192 elem_nodes.elem_id\n    bud_year                 INTEGER NOT NULL,                 -- \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 2026\n    amount                   REAL    NOT NULL,                 -- \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n\n    text_note                TEXT,\n    comments                 TEXT,\n    supplier_text            TEXT,\n    source_sheet             TEXT,\n\n    created_at               INTEGER NOT NULL DEFAULT (strftime('%s','now')),\n\n    FOREIGN KEY (cc_id)   REFERENCES cc_nodes(cc_id),\n    FOREIGN KEY (elem_id) REFERENCES elem_nodes(elem_id)\n)\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 load_id TEXT 1 0 2 cc_id TEXT 1 0 3 elem_id TEXT 1 0 4 bud_year INTEGER 1 0 5 amount REAL 1 0 6 text_note TEXT 0 0 7 comments TEXT 0 0 8 supplier_text TEXT 0 0 9 source_sheet TEXT 0 0 10 created_at INTEGER 1 strftime('%s','now') 0 <p>Foreign keys: - elem_id -&gt; elem_nodes(elem_id) (on update NO ACTION, on delete NO ACTION, match NONE) - cc_id -&gt; cc_nodes(cc_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-opex_cycle_batches","title":"TABLE: opex_cycle_batches","text":"<pre><code>CREATE TABLE opex_cycle_batches (\n      batch_id TEXT PRIMARY KEY,\n      cycle_id INTEGER NOT NULL,\n      FOREIGN KEY(batch_id) REFERENCES transfer_batches(batch_id),\n      FOREIGN KEY(cycle_id) REFERENCES opex_cycle_defs(cycle_id)\n    )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 0 1 1 cycle_id INTEGER 1 0 <p>Foreign keys: - cycle_id -&gt; opex_cycle_defs(cycle_id) (on update NO ACTION, on delete NO ACTION, match NONE) - batch_id -&gt; transfer_batches(batch_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-opex_cycle_defs","title":"TABLE: opex_cycle_defs","text":"<pre><code>CREATE TABLE opex_cycle_defs (\n        cycle_id    INTEGER PRIMARY KEY AUTOINCREMENT,\n        name        TEXT NOT NULL,            -- \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0435 \u0438\u043c\u044f \"Buildings\u2192Prod\"\n        bud_year    INTEGER NOT NULL,         -- \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u0433\u043e\u0434\u0443 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043d\u0430\u0431\u043e\u0440\n        elem_root   TEXT NOT NULL,            -- \u043a\u043e\u0440\u0435\u043d\u044c \u0433\u0440\u0443\u043f\u043f\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n        enabled     INTEGER NOT NULL DEFAULT 1,\n        rule_id     INTEGER,\n        UNIQUE(name, bud_year)\n    )\n</code></pre> # name type notnull default pk 0 cycle_id INTEGER 0 1 1 name TEXT 1 0 2 bud_year INTEGER 1 0 3 elem_root TEXT 1 0 4 enabled INTEGER 1 1 0 5 rule_id INTEGER 0 0"},{"location":"zz_old/DB_SCHEMA/#table-opex_cycle_rules","title":"TABLE: opex_cycle_rules","text":"<pre><code>CREATE TABLE opex_cycle_rules (\n        cycle_id     INTEGER NOT NULL,\n        donor_cc_id  TEXT    NOT NULL,\n        to_cc_id     TEXT    NOT NULL,\n        to_elem_id   TEXT,\n        share        REAL    NOT NULL CHECK(share&gt;=0 AND share&lt;=1),\n        FOREIGN KEY (cycle_id) REFERENCES opex_cycle_defs(cycle_id),\n        UNIQUE(cycle_id, donor_cc_id, to_cc_id)\n    )\n</code></pre> # name type notnull default pk 0 cycle_id INTEGER 1 0 1 donor_cc_id TEXT 1 0 2 to_cc_id TEXT 1 0 3 to_elem_id TEXT 0 0 4 share REAL 1 0 <p>Foreign keys: - cycle_id -&gt; opex_cycle_defs(cycle_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-opex_staging-materials-pipeline","title":"TABLE: opex_staging (materials pipeline)","text":"<pre><code>CREATE TABLE opex_staging (\n    id                       INTEGER PRIMARY KEY AUTOINCREMENT,\n    load_id                  TEXT    NOT NULL,                 -- UUID \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n    sheet_name               TEXT,                             -- \u0438\u043c\u044f \u043b\u0438\u0441\u0442\u0430 Excel\n    cc_id                    TEXT,                             -- CC \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0430\n    cost_type                TEXT,\n    account_descr            TEXT,\n    bud_2026                 REAL,                             -- \u0441\u0443\u043c\u043c\u0430 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 'BUD 2026'\n    text_note                TEXT,                             -- 'Text'\n    comments                 TEXT,                             -- 'Comments'\n    supplier_text            TEXT,                             -- 'Suppliers/Text'\n\n    mapped_elem_id           TEXT,                             -- \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0430\u0432\u0438\u043b (elem_id) \u0438\u043b\u0438 NULL\n\n    -- \u0444\u043b\u0430\u0433\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n    missing_cc               INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 CC \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u0411\u0414\n    unmapped_elem            INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e\n    bad_amount               INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 bud_2026 \u043f\u0443\u0441\u0442/\u043d\u0435\u0447\u0438\u0441\u043b\u043e\n    dup_candidate            INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0443\u0431\u043b\u044c\n\n    created_at               INTEGER NOT NULL DEFAULT (strftime('%s','now')),\n\n    -- \u043c\u044f\u0433\u043a\u0438\u0435 FK (\u0431\u0435\u0437 ON DELETE/UPDATE CASCADE, \u0447\u0442\u043e\u0431\u044b staging \u043d\u0435 \u043f\u0430\u0434\u0430\u043b \u043f\u0440\u0438 \u0430\u0434\u043c\u0438\u043d-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445)\n    FOREIGN KEY (cc_id)       REFERENCES cc_nodes(cc_id),\n    FOREIGN KEY (mapped_elem_id) REFERENCES elem_nodes(elem_id)\n)\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 load_id TEXT 1 0 2 sheet_name TEXT 0 0 3 cc_id TEXT 0 0 4 cost_type TEXT 0 0 5 account_descr TEXT 0 0 6 bud_2026 REAL 0 0 7 text_note TEXT 0 0 8 comments TEXT 0 0 9 supplier_text TEXT 0 0 10 mapped_elem_id TEXT 0 0 11 missing_cc INTEGER 1 0 0 12 unmapped_elem INTEGER 1 0 0 13 bad_amount INTEGER 1 0 0 14 dup_candidate INTEGER 1 0 0 15 created_at INTEGER 1 strftime('%s','now') 0 <p>Foreign keys: - mapped_elem_id -&gt; elem_nodes(elem_id) (on update NO ACTION, on delete NO ACTION, match NONE) - cc_id -&gt; cc_nodes(cc_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-opr_rates_snapshot","title":"TABLE: opr_rates_snapshot","text":"<pre><code>CREATE TABLE opr_rates_snapshot (\n            department_code     TEXT,\n            cc_id               TEXT,\n            rate_per_hour       REAL NOT NULL CHECK(rate_per_hour&gt;=0),\n            hours_year          REAL,\n            personnel_cost_year REAL,\n            bud_year            INTEGER,\n            currency            TEXT NOT NULL DEFAULT 'RUB',\n            source              TEXT,\n            calc_at             TEXT,\n            loaded_at           TEXT DEFAULT (datetime('now'))\n        )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 1 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 currency TEXT 1 'RUB' 0 7 source TEXT 0 0 8 calc_at TEXT 0 0 9 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_bases_year","title":"TABLE: ovh_bases_year","text":"<pre><code>CREATE TABLE ovh_bases_year (\n        year            INTEGER        NOT NULL,\n        overhead_group  TEXT           NOT NULL,\n        -- \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043a\u0430 \u0437\u0430 \u0433\u043e\u0434 \u0438 \u0435\u0451 \u0434\u043e\u043b\u044f \u0432 total \u043f\u043e \u0432\u0441\u0435\u043c A001..A010\n        mat_base_year   REAL           NOT NULL DEFAULT 0.0,\n        mat_share       REAL,\n        -- \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b (\u0434\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f)\n        base_depr_src   REAL           NOT NULL DEFAULT 0.0,   -- \u0410\u043c\u043e\u0440\u0442. \u041e\u041f\u0420 (CC 25407 \u00d7 MFC_PRIM_3)\n        base_log_src    REAL           NOT NULL DEFAULT 0.0,   -- \u041e\u0425\u0420 \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 (P45/46/47 \u00d7 MFC_PRIM)\n        base_adm_src    REAL           NOT NULL DEFAULT 0.0,   -- \u041e\u0425\u0420 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447. (P41/43/44/48 \u00d7 MFC_PRIM) \u043c\u0438\u043d\u0443\u0441 \u0410\u043c\u043e\u0440\u0442. \u041e\u041f\u0420\n        -- \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u0434\u043e\u043b\u044f\u043c mat_share\n        dist_depr       REAL           NOT NULL DEFAULT 0.0,\n        dist_log        REAL           NOT NULL DEFAULT 0.0,\n        dist_adm        REAL           NOT NULL DEFAULT 0.0,   -- \u043f\u043e\u043a\u0430 = base_adm_src\u00d7mat_share; \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0447\u0435\u0440\u0435\u0437 (\u0442\u0440\u0443\u0434+\u041e\u041f\u0420)\n        -- \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 / \u0442\u0435\u0445\u043f\u043e\u043b\u044f\n        opex_load_ids   TEXT,                                   -- UUID \u0441\u043f\u0438\u0441\u043a\u043e\u043c (\u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e), \u0435\u0441\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a\n        prod_months     TEXT,                                   -- \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: '2026-01..2026-12'\n        calc_at         TEXT           DEFAULT (datetime('now')),\n        created_at      INTEGER        NOT NULL DEFAULT (strftime('%s','now')),\n        PRIMARY KEY (year, overhead_group)\n    )\n</code></pre> # name type notnull default pk 0 year INTEGER 1 1 1 overhead_group TEXT 1 2 2 mat_base_year REAL 1 0.0 0 3 mat_share REAL 0 0 4 base_depr_src REAL 1 0.0 0 5 base_log_src REAL 1 0.0 0 6 base_adm_src REAL 1 0.0 0 7 dist_depr REAL 1 0.0 0 8 dist_log REAL 1 0.0 0 9 dist_adm REAL 1 0.0 0 10 opex_load_ids TEXT 0 0 11 prod_months TEXT 0 0 12 calc_at TEXT 0 datetime('now') 0 13 created_at INTEGER 1 strftime('%s','now') 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_cost_unit","title":"TABLE: ovh_cost_unit","text":"<pre><code>CREATE TABLE ovh_cost_unit (\n        product_id TEXT PRIMARY KEY,\n        depr_opr_cost REAL NOT NULL DEFAULT 0.0,  -- \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420\n        log_cost REAL NOT NULL DEFAULT 0.0,       -- \u041e\u0425\u0420 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430\n        adm_cost REAL NOT NULL DEFAULT 0.0        -- \u041e\u0425\u0420 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 depr_opr_cost REAL 1 0.0 0 2 log_cost REAL 1 0.0 0 3 adm_cost REAL 1 0.0 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_flat","title":"TABLE: ovh_flat","text":"<pre><code>CREATE TABLE ovh_flat (\n            product_id TEXT NOT NULL,\n            overhead_group TEXT NOT NULL,\n            driver_code TEXT,\n            driver_value_per_unit REAL,\n            source TEXT,\n            year INTEGER,\n            department_code TEXT,\n            -- legacy compatibility\n            mat_cost REAL,\n            base_kind TEXT,\n            base_value_per_unit REAL, node_product_id TEXT,\n            PRIMARY KEY (product_id, overhead_group, driver_code)\n        )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 overhead_group TEXT 1 2 2 driver_code TEXT 0 3 3 driver_value_per_unit REAL 0 0 4 source TEXT 0 0 5 year INTEGER 0 0 6 department_code TEXT 0 0 7 mat_cost REAL 0 0 8 base_kind TEXT 0 0 9 base_value_per_unit REAL 0 0 10 node_product_id TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_nodes","title":"TABLE: ovh_nodes","text":"<pre><code>CREATE TABLE ovh_nodes (\n            node_id    TEXT PRIMARY KEY,\n            parent_id  TEXT,\n            ovh_group  TEXT,\n            name       TEXT,\n            level      INTEGER,\n            path       TEXT\n        )\n</code></pre> # name type notnull default pk 0 node_id TEXT 0 1 1 parent_id TEXT 0 0 2 ovh_group TEXT 0 0 3 name TEXT 0 0 4 level INTEGER 0 0 5 path TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_tariffs","title":"TABLE: ovh_tariffs","text":"<pre><code>CREATE TABLE ovh_tariffs (\n                    overhead_group TEXT NOT NULL,\n                    year           INTEGER NOT NULL,\n                    scenario       TEXT NOT NULL DEFAULT '',\n                    cost_type      TEXT NOT NULL,\n                    share          REAL,\n                    PRIMARY KEY (overhead_group, year, scenario, cost_type)\n                )\n</code></pre> # name type notnull default pk 0 overhead_group TEXT 1 1 1 year INTEGER 1 2 2 scenario TEXT 1 '' 3 3 cost_type TEXT 1 4 4 share REAL 0 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_tariffs_new","title":"TABLE: ovh_tariffs_new","text":"<pre><code>CREATE TABLE ovh_tariffs_new (\n            overhead_group TEXT NOT NULL,\n            year           INTEGER NOT NULL,\n            scenario       TEXT NOT NULL DEFAULT '',\n            cost_type      TEXT NOT NULL,\n            share          REAL,\n            PRIMARY KEY (overhead_group, year, scenario, cost_type)\n        )\n</code></pre> # name type notnull default pk 0 overhead_group TEXT 1 1 1 year INTEGER 1 2 2 scenario TEXT 1 '' 3 3 cost_type TEXT 1 4 4 share REAL 0 0"},{"location":"zz_old/DB_SCHEMA/#table-ovh_tariffs_wide_bak","title":"TABLE: ovh_tariffs_wide_bak","text":"<pre><code>CREATE TABLE \"ovh_tariffs_wide_bak\" (\n        overhead_group TEXT NOT NULL,\n        year INTEGER NOT NULL,\n        scrap_share REAL,       -- \u0411\u0440\u0430\u043a: \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\n        depr_opr_share REAL,    -- \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420: \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\n        log_share REAL,         -- \u041e\u0425\u0420 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430: \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\n        adm_share REAL,         -- \u041e\u0425\u0420 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447.: \u043e\u0442 (\u0442\u0440\u0443\u0434 + \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420_\u043f\u043e_\u0433\u0440\u0443\u043f\u043f\u0435)\n        PRIMARY KEY (overhead_group, year)\n    )\n</code></pre> # name type notnull default pk 0 overhead_group TEXT 1 1 1 year INTEGER 1 2 2 scrap_share REAL 0 0 3 depr_opr_share REAL 0 0 4 log_share REAL 0 0 5 adm_share REAL 0 0"},{"location":"zz_old/DB_SCHEMA/#table-personnel_monthly","title":"TABLE: personnel_monthly","text":"<pre><code>CREATE TABLE personnel_monthly(\n            cc_id   TEXT NOT NULL,\n            ym      TEXT NOT NULL,         -- 'YYYY-MM'\n            headcount REAL NOT NULL CHECK(headcount&gt;=0),\n            source  TEXT,\n            note    TEXT,\n            loaded_at TEXT DEFAULT (datetime('now')),\n            PRIMARY KEY(cc_id, ym)\n        )\n</code></pre> # name type notnull default pk 0 cc_id TEXT 1 1 1 ym TEXT 1 2 2 headcount REAL 1 0 3 source TEXT 0 0 4 note TEXT 0 0 5 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/DB_SCHEMA/#table-price_scenarios-materials-pipeline","title":"TABLE: price_scenarios (materials pipeline)","text":"<pre><code>CREATE TABLE price_scenarios (\n      scenario_code TEXT PRIMARY KEY,   -- 'BG25', 'FC3', 'BG26', ...\n      asof_date     TEXT NOT NULL       -- 'YYYY-MM-DD'\n    )\n</code></pre> # name type notnull default pk 0 scenario_code TEXT 0 1 1 asof_date TEXT 1 0"},{"location":"zz_old/DB_SCHEMA/#table-prod_budget","title":"TABLE: prod_budget","text":"<pre><code>CREATE TABLE prod_budget (\n        product_id   TEXT NOT NULL,\n        month_code   TEXT NOT NULL,   -- 'YYYY-MM'\n        qty          REAL NOT NULL DEFAULT 0,\n        -- \u041d\u041e\u0412\u041e\u0415:\n        scenario     TEXT NOT NULL DEFAULT 'BASE',\n        PRIMARY KEY (product_id, month_code, scenario)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 month_code TEXT 1 2 2 qty REAL 1 0 0 3 scenario TEXT 1 'BASE' 3"},{"location":"zz_old/DB_SCHEMA/#table-rm_price_load-materials-pipeline","title":"TABLE: rm_price_load (materials pipeline)","text":"<pre><code>CREATE TABLE rm_price_load (\n        load_id     TEXT PRIMARY KEY,\n        comment     TEXT,\n        source      TEXT,\n        price_date  TEXT,\n        loaded_at   TEXT NOT NULL DEFAULT (datetime('now')),\n        created_by  TEXT\n    )\n</code></pre> # name type notnull default pk 0 load_id TEXT 0 1 1 comment TEXT 0 0 2 source TEXT 0 0 3 price_date TEXT 0 0 4 loaded_at TEXT 1 datetime('now') 0 5 created_by TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-rm_prices-materials-pipeline","title":"TABLE: rm_prices (materials pipeline)","text":"<pre><code>CREATE TABLE \"rm_prices\" (\n            item_code       TEXT NOT NULL,\n            currency        TEXT NOT NULL DEFAULT 'RUB',\n            effective_from  TEXT NOT NULL,                   -- \u043a\u043b\u044e\u0447 \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u0438\n            price           REAL NOT NULL,\n            article         TEXT,\n            uom             TEXT,\n            load_id         TEXT NOT NULL,                   -- uuid \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n            source          TEXT,\n            loaded_at       TEXT NOT NULL DEFAULT (datetime('now')),\n            PRIMARY KEY (item_code, currency, effective_from)\n        )\n</code></pre> # name type notnull default pk 0 item_code TEXT 1 1 1 currency TEXT 1 'RUB' 2 2 effective_from TEXT 1 3 3 price REAL 1 0 4 article TEXT 0 0 5 uom TEXT 0 0 6 load_id TEXT 1 0 7 source TEXT 0 0 8 loaded_at TEXT 1 datetime('now') 0"},{"location":"zz_old/DB_SCHEMA/#table-routing_nodes","title":"TABLE: routing_nodes","text":"<pre><code>CREATE TABLE routing_nodes (\n            node_id       TEXT PRIMARY KEY,\n            parent_id     TEXT,\n            routing_group TEXT,\n            name          TEXT,\n            level         INTEGER,\n            path          TEXT\n        )\n</code></pre> # name type notnull default pk 0 node_id TEXT 0 1 1 parent_id TEXT 0 0 2 routing_group TEXT 0 0 3 name TEXT 0 0 4 level INTEGER 0 0 5 path TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-routing_operations","title":"TABLE: routing_operations","text":"<pre><code>CREATE TABLE routing_operations(\n      routing_op_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      routing_id    INTEGER NOT NULL,\n      seq           INTEGER NOT NULL,\n      operation     TEXT NOT NULL,\n      department    TEXT,\n      hours         REAL NOT NULL DEFAULT 0 CHECK(hours&gt;=0),\n      UNIQUE(routing_id, seq)\n    )\n</code></pre> # name type notnull default pk 0 routing_op_id INTEGER 0 1 1 routing_id INTEGER 1 0 2 seq INTEGER 1 0 3 operation TEXT 1 0 4 department TEXT 0 0 5 hours REAL 1 0 0"},{"location":"zz_old/DB_SCHEMA/#table-routing_tree","title":"TABLE: routing_tree","text":"<pre><code>CREATE TABLE routing_tree(\n      root_product_id  TEXT,\n      node_product_id  TEXT,\n      level            INTEGER,\n      qty_per_unit     REAL,\n      path             TEXT,\n      routing_id       TEXT,\n      routing_group    TEXT,\n      routing_name     TEXT,\n      PRIMARY KEY(root_product_id, node_product_id)\n    )\n</code></pre> # name type notnull default pk 0 root_product_id TEXT 0 1 1 node_product_id TEXT 0 2 2 level INTEGER 0 0 3 qty_per_unit REAL 0 0 4 path TEXT 0 0 5 routing_id TEXT 0 0 6 routing_group TEXT 0 0 7 routing_name TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-routings","title":"TABLE: routings","text":"<pre><code>CREATE TABLE routings(\n      routing_id   INTEGER PRIMARY KEY AUTOINCREMENT,\n      routing_group TEXT NOT NULL,\n      spec_code     TEXT,\n      item_id       TEXT\n    )\n</code></pre> # name type notnull default pk 0 routing_id INTEGER 0 1 1 routing_group TEXT 1 0 2 spec_code TEXT 0 0 3 item_id TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-rule_scope","title":"TABLE: rule_scope","text":"<pre><code>CREATE TABLE rule_scope (\n            rule_id     INTEGER NOT NULL,\n            cc_node_id  TEXT,\n            elem_node_id TEXT,\n            PRIMARY KEY (rule_id, cc_node_id, elem_node_id),\n            FOREIGN KEY (rule_id) REFERENCES rules(rule_id)\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 1 1 1 cc_node_id TEXT 0 2 2 elem_node_id TEXT 0 3 <p>Foreign keys: - rule_id -&gt; rules(rule_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-rule_sets","title":"TABLE: rule_sets","text":"<pre><code>CREATE TABLE rule_sets (\n            rule_set_id TEXT PRIMARY KEY,\n            name        TEXT,\n            version     INTEGER,\n            valid_from  TEXT,\n            valid_to    TEXT,\n            status      TEXT\n        )\n</code></pre> # name type notnull default pk 0 rule_set_id TEXT 0 1 1 name TEXT 0 0 2 version INTEGER 0 0 3 valid_from TEXT 0 0 4 valid_to TEXT 0 0 5 status TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-rules","title":"TABLE: rules","text":"<pre><code>CREATE TABLE rules (\n            rule_id     INTEGER PRIMARY KEY AUTOINCREMENT,\n            rule_set_id TEXT NOT NULL,\n            priority    INTEGER NOT NULL,\n            driver_code TEXT,\n            params_json TEXT,\n            FOREIGN KEY (rule_set_id) REFERENCES rule_sets(rule_set_id)\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 0 1 1 rule_set_id TEXT 1 0 2 priority INTEGER 1 0 3 driver_code TEXT 0 0 4 params_json TEXT 0 0 <p>Foreign keys: - rule_set_id -&gt; rule_sets(rule_set_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-run_history","title":"TABLE: run_history","text":"<pre><code>CREATE TABLE run_history(\n      run_id      TEXT PRIMARY KEY,\n      started_at  TEXT,\n      ended_at    TEXT,\n      scope       TEXT,             -- e.g. \"all_produced\" | \"explicit_list\"\n      params_json TEXT,\n      status      TEXT              -- \"ok\" | \"error\" | \"partial\"\n    )\n</code></pre> # name type notnull default pk 0 run_id TEXT 0 1 1 started_at TEXT 0 0 2 ended_at TEXT 0 0 3 scope TEXT 0 0 4 params_json TEXT 0 0 5 status TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-run_log","title":"TABLE: run_log","text":"<pre><code>CREATE TABLE run_log(\n      run_id      TEXT,\n      step        TEXT,             -- \"bom\" | \"tree\" | \"flat\" | \"hours\" | \"labor_cost\" | \"opr_cost\" | \"depr_cost\"\n      product_id  TEXT,\n      level       TEXT,             -- \"INFO\" | \"WARN\" | \"ERROR\"\n      msg         TEXT,\n      extra_json  TEXT,\n      ts          TEXT\n    )\n</code></pre> # name type notnull default pk 0 run_id TEXT 0 0 1 step TEXT 0 0 2 product_id TEXT 0 0 3 level TEXT 0 0 4 msg TEXT 0 0 5 extra_json TEXT 0 0 6 ts TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#table-schema_version","title":"TABLE: schema_version","text":"<pre><code>CREATE TABLE schema_version(version INTEGER PRIMARY KEY,name TEXT NOT NULL,applied_at TEXT NOT NULL DEFAULT (datetime('now')))\n</code></pre> # name type notnull default pk 0 version INTEGER 0 1 1 name TEXT 1 0 2 applied_at TEXT 1 datetime('now') 0"},{"location":"zz_old/DB_SCHEMA/#table-scrap_cost_unit","title":"TABLE: scrap_cost_unit","text":"<pre><code>CREATE TABLE scrap_cost_unit (\n        product_id TEXT PRIMARY KEY,\n        scrap_cost REAL NOT NULL DEFAULT 0.0\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 scrap_cost REAL 1 0.0 0"},{"location":"zz_old/DB_SCHEMA/#table-sqlite_sequence","title":"TABLE: sqlite_sequence","text":"<pre><code>CREATE TABLE sqlite_sequence(name,seq)\n</code></pre> # name type notnull default pk 0 name 0 0 1 seq 0 0"},{"location":"zz_old/DB_SCHEMA/#table-transfer_batches","title":"TABLE: transfer_batches","text":"<pre><code>CREATE TABLE transfer_batches(\n            batch_id   TEXT PRIMARY KEY,   -- UUID\n            bud_year   INTEGER NOT NULL,\n            rule_id    INTEGER NOT NULL,\n            created_at TEXT DEFAULT (datetime('now')),\n            created_by TEXT,\n            comment    TEXT,\n            FOREIGN KEY(rule_id) REFERENCES transfer_rules(rule_id)\n        )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 0 1 1 bud_year INTEGER 1 0 2 rule_id INTEGER 1 0 3 created_at TEXT 0 datetime('now') 0 4 created_by TEXT 0 0 5 comment TEXT 0 0 <p>Foreign keys: - rule_id -&gt; transfer_rules(rule_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-transfer_opex_items","title":"TABLE: transfer_opex_items","text":"<pre><code>CREATE TABLE transfer_opex_items(\n            batch_id     TEXT NOT NULL,\n            from_cc_id   TEXT NOT NULL,\n            to_cc_id     TEXT NOT NULL,\n            elem_id      TEXT NOT NULL,\n            to_elem_id   TEXT,\n            amount_delta REAL NOT NULL,\n            PRIMARY KEY (batch_id, from_cc_id, to_cc_id, elem_id),\n            FOREIGN KEY (batch_id) REFERENCES transfer_batches(batch_id)\n        )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 1 1 1 from_cc_id TEXT 1 2 2 to_cc_id TEXT 1 3 3 elem_id TEXT 1 4 4 to_elem_id TEXT 0 0 5 amount_delta REAL 1 0 <p>Foreign keys: - batch_id -&gt; transfer_batches(batch_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-transfer_personnel_items","title":"TABLE: transfer_personnel_items","text":"<pre><code>CREATE TABLE \"transfer_personnel_items\"(\n            id              INTEGER PRIMARY KEY AUTOINCREMENT,\n            batch_id        TEXT NOT NULL,\n            from_cc_id      TEXT,            -- \u0432 \u0441\u0442\u0430\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445 \u043c\u043e\u0433\u043b\u043e \u0431\u044b\u0442\u044c NULL\n            to_cc_id        TEXT NOT NULL,\n            headcount_delta REAL NOT NULL,\n            FOREIGN KEY(batch_id) REFERENCES transfer_batches(batch_id)\n        )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 batch_id TEXT 1 0 2 from_cc_id TEXT 0 0 3 to_cc_id TEXT 1 0 4 headcount_delta REAL 1 0 <p>Foreign keys: - batch_id -&gt; transfer_batches(batch_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-transfer_rule_recipients","title":"TABLE: transfer_rule_recipients","text":"<pre><code>CREATE TABLE transfer_rule_recipients(\n        rule_id INTEGER NOT NULL,\n        recipient_cc_id TEXT NOT NULL,\n        share REAL NOT NULL,\n        PRIMARY KEY(rule_id, recipient_cc_id),\n        FOREIGN KEY(rule_id) REFERENCES transfer_rules(rule_id)\n    )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 1 1 1 recipient_cc_id TEXT 1 2 2 share REAL 1 0 <p>Foreign keys: - rule_id -&gt; transfer_rules(rule_id) (on update NO ACTION, on delete NO ACTION, match NONE)</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#table-transfer_rules","title":"TABLE: transfer_rules","text":"<pre><code>CREATE TABLE transfer_rules(\n            rule_id        INTEGER PRIMARY KEY AUTOINCREMENT,\n            name           TEXT NOT NULL,\n            donor_cc_id    TEXT NOT NULL,\n            enabled        INTEGER NOT NULL DEFAULT 1,\n            scope          TEXT DEFAULT 'direct_personnel',\n            recipient_cc_id TEXT\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 0 1 1 name TEXT 1 0 2 donor_cc_id TEXT 1 0 3 enabled INTEGER 1 1 0 4 scope TEXT 0 'direct_personnel' 0 5 recipient_cc_id TEXT 0 0"},{"location":"zz_old/DB_SCHEMA/#view-mo_last_price_current","title":"VIEW: mo_last_price_current","text":"<pre><code>CREATE VIEW mo_last_price_current AS\n    WITH ranked AS (\n        SELECT *, ROW_NUMBER() OVER (\n            PARTITION BY after_item_id ORDER BY datetime(loaded_at) DESC\n        ) rn\n        FROM mo_prices_history\n    )\n    SELECT after_item_id, price, currency, vendor, source, loaded_at\n    FROM ranked WHERE rn = 1\n</code></pre> <p>References (best-effort): - mo_prices_history - ranked</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-opex_budget_effective","title":"VIEW: opex_budget_effective","text":"<pre><code>CREATE VIEW opex_budget_effective AS\n        WITH base AS (\n            SELECT cc_id, elem_id, bud_year, SUM(amount) AS amount\n            FROM opex_budget\n            GROUP BY cc_id, elem_id, bud_year\n        ),\n        plus AS (\n            SELECT i.to_cc_id AS cc_id, COALESCE(i.to_elem_id, i.elem_id) AS elem_id, b.bud_year, SUM(i.amount_delta) AS plus_amt\n            FROM transfer_opex_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY i.to_cc_id, COALESCE(i.to_elem_id, i.elem_id), b.bud_year\n        ),\n        minus AS (\n            SELECT i.from_cc_id AS cc_id, i.elem_id, b.bud_year, SUM(-i.amount_delta) AS minus_amt\n            FROM transfer_opex_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY i.from_cc_id, i.elem_id, b.bud_year\n        ),\n        keys AS (\n            SELECT cc_id, elem_id, bud_year FROM base\n            UNION\n            SELECT cc_id, elem_id, bud_year FROM plus\n            UNION\n            SELECT cc_id, elem_id, bud_year FROM minus\n        )\n        SELECT k.cc_id, k.elem_id, k.bud_year,\n               COALESCE(b.amount, 0) + COALESCE(p.plus_amt, 0) + COALESCE(m.minus_amt, 0) AS amount_effective\n        FROM keys k\n        LEFT JOIN base  b ON b.cc_id = k.cc_id AND b.elem_id = k.elem_id AND b.bud_year = k.bud_year\n        LEFT JOIN plus  p ON p.cc_id = k.cc_id AND p.elem_id = k.elem_id AND p.bud_year = k.bud_year\n        LEFT JOIN minus m ON m.cc_id = k.cc_id AND m.elem_id = k.elem_id AND m.bud_year = k.bud_year\n</code></pre> <p>References (best-effort): - opex_budget - transfer_opex_items - transfer_batches - base - plus - minus - keys</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-ovh_tariffs_wide_compat","title":"VIEW: ovh_tariffs_wide_compat","text":"<pre><code>CREATE VIEW ovh_tariffs_wide_compat AS\n                SELECT\n                    overhead_group,\n                    year,\n                    MAX(CASE WHEN cost_type='scrap'    THEN share END) AS scrap_share,\n                    MAX(CASE WHEN cost_type='depr_opr' THEN share END) AS depr_opr_share,\n                    MAX(CASE WHEN cost_type='log'      THEN share END) AS log_share,\n                    MAX(CASE WHEN cost_type='adm'      THEN share END) AS adm_share\n                FROM ovh_tariffs\n                GROUP BY overhead_group, year\n</code></pre> <p>References (best-effort): - ovh_tariffs</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-personnel_yearly","title":"VIEW: personnel_yearly","text":"<pre><code>CREATE VIEW personnel_yearly AS\n        SELECT TRIM(cc_id) AS cc_id,\n               CAST(substr(TRIM(ym), 1, 4) AS INTEGER) AS bud_year,\n               AVG(headcount) AS headcount_avg_year\n        FROM personnel_monthly\n        GROUP BY TRIM(cc_id), CAST(substr(TRIM(ym), 1, 4) AS INTEGER)\n</code></pre> <p>References (best-effort): - personnel_monthly</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-personnel_yearly_effective","title":"VIEW: personnel_yearly_effective","text":"<pre><code>CREATE VIEW personnel_yearly_effective AS\n        WITH base AS (\n            SELECT TRIM(cc_id) AS cc_id,\n                   CAST(substr(TRIM(ym), 1, 4) AS INTEGER) AS bud_year,\n                   AVG(headcount) AS headcount_avg_year\n            FROM personnel_monthly\n            GROUP BY TRIM(cc_id), CAST(substr(TRIM(ym), 1, 4) AS INTEGER)\n        ),\n        delta_in AS (\n            SELECT TRIM(i.to_cc_id) AS cc_id,\n                   CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER) AS bud_year,\n                   SUM(i.headcount_delta) AS delta\n            FROM transfer_personnel_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY TRIM(i.to_cc_id), CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER)\n        ),\n        delta_out AS (\n            SELECT TRIM(i.from_cc_id) AS cc_id,\n                   CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER) AS bud_year,\n                   -SUM(i.headcount_delta) AS delta\n            FROM transfer_personnel_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            WHERE i.from_cc_id IS NOT NULL\n            GROUP BY TRIM(i.from_cc_id), CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER)\n        ),\n        deltas AS (\n            SELECT cc_id, bud_year, SUM(delta) AS headcount_delta_year\n            FROM (\n                SELECT * FROM delta_in\n                UNION ALL\n                SELECT * FROM delta_out\n            )\n            GROUP BY cc_id, bud_year\n        ),\n        keys AS (\n            SELECT cc_id, bud_year FROM base\n            UNION\n            SELECT cc_id, bud_year FROM deltas\n        )\n        SELECT k.cc_id,\n               k.bud_year,\n               COALESCE(b.headcount_avg_year, 0) + COALESCE(d.headcount_delta_year, 0)\n                   AS headcount_avg_year_effective\n        FROM keys k\n        LEFT JOIN base   b ON b.cc_id = k.cc_id AND b.bud_year = k.bud_year\n        LEFT JOIN deltas d ON d.cc_id = k.cc_id AND d.bud_year = k.bud_year\n</code></pre> <p>References (best-effort): - personnel_monthly - transfer_personnel_items - transfer_batches - delta_in - delta_out - base - deltas - keys</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_alloc_lineage","title":"VIEW: v_alloc_lineage","text":"<pre><code>CREATE VIEW v_alloc_lineage AS\n        SELECT * FROM lineage_links\n</code></pre> <p>References (best-effort): - lineage_links</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_allocation_rule_effective","title":"VIEW: v_allocation_rule_effective","text":"<pre><code>CREATE VIEW v_allocation_rule_effective AS\n        WITH scoped AS (\n            SELECT r.rule_set_id,\n                   rs.rule_id,\n                   rs.cc_node_id AS cc_id,\n                   rs.elem_node_id AS elem_id,\n                   r.priority,\n                   r.driver_code,\n                   (CASE WHEN rs.cc_node_id IS NOT NULL THEN 1 ELSE 0 END\n                    + CASE WHEN rs.elem_node_id IS NOT NULL THEN 1 ELSE 0 END) AS specificity\n            FROM rules r\n            LEFT JOIN rule_scope rs ON rs.rule_id = r.rule_id\n        ),\n        ranked AS (\n            SELECT *,\n                   ROW_NUMBER() OVER (\n                     PARTITION BY rule_set_id, cc_id, elem_id\n                     ORDER BY specificity DESC, priority ASC, rule_id ASC\n                   ) AS rn\n            FROM scoped\n        )\n        SELECT rule_set_id, cc_id, elem_id, rule_id, driver_code, priority, specificity\n        FROM ranked\n        WHERE rn = 1\n</code></pre> <p>References (best-effort): - rules - rule_scope - scoped - ranked</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_cogs_unit","title":"VIEW: v_cogs_unit","text":"<pre><code>CREATE VIEW v_cogs_unit AS\n        WITH alloc AS (\n          SELECT ca.period, ca.scenario, ca.product_id, ca.component_code, SUM(ca.amount) AS amount\n          FROM cost_allocations ca\n          JOIN rules r ON r.rule_id = ca.rule_id\n          JOIN active_alloc_sets aas ON aas.scenario = ca.scenario AND aas.rule_set_id = r.rule_set_id\n          GROUP BY ca.period, ca.scenario, ca.product_id, ca.component_code\n        ),\n        mat AS (\n          SELECT dv.period,\n                 COALESCE(dv.scenario, 'BASE') AS scenario,\n                 dv.product_id,\n                 'MATCOST' AS component_code,\n                 SUM(dv.value) AS amount\n          FROM driver_values dv\n          WHERE dv.driver_code = 'MATCOST'\n          GROUP BY dv.period, COALESCE(dv.scenario, 'BASE'), dv.product_id\n        ),\n        allc AS (\n          SELECT * FROM alloc\n          UNION ALL\n          SELECT * FROM mat\n        )\n        SELECT a.period,\n               a.scenario,\n               a.product_id,\n               a.component_code,\n               a.amount,\n               b.qty,\n               CASE WHEN COALESCE(b.qty,0)=0 THEN 0.0 ELSE a.amount / b.qty END AS amount_per_unit\n        FROM allc a\n        LEFT JOIN v_prod_budget_active b\n          ON b.product_id = a.product_id AND b.month_code = a.period\n</code></pre> <p>References (best-effort): - cost_allocations - rules - active_alloc_sets - driver_values - alloc - mat - allc - v_prod_budget_active</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_component_pools","title":"VIEW: v_component_pools","text":"<pre><code>CREATE VIEW v_component_pools AS\n        WITH base AS (\n          SELECT cc_id, elem_id, bud_year, amount_effective\n          FROM opex_budget_effective\n        ),\n        mapped AS (\n          SELECT b.cc_id, m.component_code, b.bud_year, b.amount_effective\n          FROM base b\n          JOIN v_elem_component_map m ON m.elem_id = b.elem_id\n        ),\n        months(m) AS (\n          VALUES(1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)\n        ),\n        expanded AS (\n          SELECT printf('%04d-%02d', bud_year, m) AS period,\n                 'PLAN' AS scenario,\n                 cc_id,\n                 component_code,\n                 amount_effective / 12.0 AS amount\n          FROM mapped, months\n        )\n        SELECT period, scenario, cc_id, component_code, SUM(amount) AS amount\n        FROM expanded\n        GROUP BY period, scenario, cc_id, component_code\n</code></pre> <p>References (best-effort): - opex_budget_effective - base - v_elem_component_map - mapped - expanded</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_driver_catalog","title":"VIEW: v_driver_catalog","text":"<pre><code>CREATE VIEW v_driver_catalog AS\n        SELECT driver_code, name, unit, granularity, agg_rule, source_policy, is_ratio\n        FROM drivers\n</code></pre> <p>References (best-effort): - drivers</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_driver_values","title":"VIEW: v_driver_values","text":"<pre><code>CREATE VIEW v_driver_values AS\n        SELECT set_id, period, scenario, driver_code, product_id, cc_id, elem_id, value, unit, source_ref, loaded_at\n        FROM driver_values\n</code></pre> <p>References (best-effort): - driver_values</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_elem_component_map","title":"VIEW: v_elem_component_map","text":"<pre><code>CREATE VIEW v_elem_component_map AS\n        WITH RECURSIVE\n        roots(component_code, root_id) AS (\n          SELECT 'LABOR_DIRECT', 'MFC_PRIM_1' UNION ALL\n          SELECT 'OPR_DIRECT',   'MFC_PRIM_2' UNION ALL\n          SELECT 'DEPR_DIRECT',  'MFC_PRIM_3'\n        ),\n        closure(component_code, elem_id) AS (\n          SELECT component_code, root_id FROM roots\n          UNION ALL\n          SELECT c.component_code, e.child_id\n          FROM closure c\n          JOIN elem_edges e ON e.parent_id = c.elem_id\n        )\n        SELECT DISTINCT component_code, elem_id\n        FROM closure\n</code></pre> <p>References (best-effort): - roots - closure - elem_edges</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_item_cg","title":"VIEW: v_item_cg","text":"<pre><code>CREATE VIEW v_item_cg AS\n    SELECT\n      i.item_id,\n      i.article,\n      i.name,\n      i.uom,\n      i.matl_group,\n      i.product_hierarchy,\n      cm.commodity_group,\n      cm.commodity_group_text\n    FROM items i\n    LEFT JOIN commodity_map cm\n      ON cm.matl_prefix = substr(COALESCE(i.matl_group,''),1,3)\n</code></pre> <p>References (best-effort): - items - commodity_map</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_labor_cost_unit_total","title":"VIEW: v_labor_cost_unit_total","text":"<pre><code>CREATE VIEW v_labor_cost_unit_total AS\n        WITH cfg AS (\n          SELECT month_code AS period FROM active_periods WHERE id=1\n        ),\n        alloc AS (\n          SELECT ca.product_id, SUM(ca.amount) AS amount\n          FROM cost_allocations ca, cfg\n          WHERE ca.period = cfg.period AND ca.component_code = 'LABOR_DIRECT'\n          GROUP BY ca.product_id\n        ),\n        qty AS (\n          SELECT b.product_id, b.qty FROM v_prod_budget_active b, cfg\n          WHERE b.month_code = cfg.period\n        )\n        SELECT a.product_id,\n               CASE WHEN COALESCE(q.qty,0)=0 THEN 0.0 ELSE a.amount / q.qty END AS cost_total\n        FROM alloc a\n        LEFT JOIN qty q ON q.product_id = a.product_id\n</code></pre> <p>References (best-effort): - active_periods - cost_allocations - v_prod_budget_active - alloc - qty</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_opr_cost_unit_total","title":"VIEW: v_opr_cost_unit_total","text":"<pre><code>CREATE VIEW v_opr_cost_unit_total AS\n        WITH cfg AS (\n          SELECT month_code AS period FROM active_periods WHERE id=1\n        ),\n        alloc AS (\n          SELECT ca.product_id, SUM(ca.amount) AS amount\n          FROM cost_allocations ca, cfg\n          WHERE ca.period = cfg.period AND ca.component_code = 'OPR_DIRECT'\n          GROUP BY ca.product_id\n        ),\n        qty AS (\n          SELECT b.product_id, b.qty FROM v_prod_budget_active b, cfg\n          WHERE b.month_code = cfg.period\n        )\n        SELECT a.product_id,\n               CASE WHEN COALESCE(q.qty,0)=0 THEN 0.0 ELSE a.amount / q.qty END AS cost_total\n        FROM alloc a\n        LEFT JOIN qty q ON q.product_id = a.product_id\n</code></pre> <p>References (best-effort): - active_periods - cost_allocations - v_prod_budget_active - alloc - qty</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_ovh_cost_unit","title":"VIEW: v_ovh_cost_unit","text":"<pre><code>CREATE VIEW v_ovh_cost_unit AS\n        SELECT product_id, depr_opr_cost, log_cost, adm_cost FROM ovh_cost_unit\n</code></pre> <p>References (best-effort): - ovh_cost_unit</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_ovh_flat_compat","title":"VIEW: v_ovh_flat_compat","text":"<pre><code>CREATE VIEW v_ovh_flat_compat AS\n        SELECT\n          product_id,\n          node_product_id,\n          overhead_group,\n          driver_code           AS base_kind,\n          driver_value_per_unit AS base_value_per_unit,\n          driver_value_per_unit AS mat_cost,\n          source,\n          year\n        FROM ovh_flat\n</code></pre> <p>References (best-effort): - ovh_flat</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_price_by_article","title":"VIEW: v_price_by_article","text":"<pre><code>CREATE VIEW v_price_by_article AS\n    SELECT\n      item_code,\n      MAX(CASE WHEN scenario_code='BG25' THEN price END) AS BG25,\n      MAX(CASE WHEN scenario_code='FC3'  THEN price END) AS FC3,\n      MAX(CASE WHEN scenario_code='BG26' THEN price END) AS BG26\n    FROM v_price_by_scenario\n    WHERE currency='RUB'   -- \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u043e\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c/\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\n    GROUP BY item_code\n</code></pre> <p>References (best-effort): - v_price_by_scenario</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_price_by_scenario-materials-pipeline","title":"VIEW: v_price_by_scenario (materials pipeline)","text":"<pre><code>CREATE VIEW v_price_by_scenario AS\n    WITH items AS (\n      SELECT DISTINCT item_code, currency FROM rm_prices\n    )\n    SELECT\n      ps.scenario_code,\n      i.item_code,\n      i.currency,\n      (\n        SELECT rp.price\n        FROM rm_prices rp\n        WHERE rp.item_code = i.item_code\n          AND rp.currency  = i.currency\n          AND rp.effective_from &lt;= ps.asof_date\n        ORDER BY rp.effective_from DESC\n        LIMIT 1\n      ) AS price\n    FROM price_scenarios ps\n    CROSS JOIN items i\n</code></pre> <p>References (best-effort): - rm_prices - price_scenarios - items</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_prod_budget_active","title":"VIEW: v_prod_budget_active","text":"<pre><code>CREATE VIEW v_prod_budget_active AS\n    WITH cfg AS (SELECT vol_scenario FROM active_scenarios WHERE id=1)\n    SELECT b.*\n    FROM prod_budget b\n    JOIN cfg ON cfg.vol_scenario = b.scenario\n</code></pre> <p>References (best-effort): - active_scenarios - prod_budget - cfg</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_rate_parity","title":"VIEW: v_rate_parity","text":"<pre><code>CREATE VIEW v_rate_parity AS\n        WITH \n        -- Effective rates per department (pick best/latest)\n        rates_ranked AS (\n          SELECT department_code, rate_per_hour, currency, bud_year, source, calc_at,\n                 ROW_NUMBER() OVER (\n                   PARTITION BY department_code\n                   ORDER BY COALESCE(bud_year,0) DESC,\n                            CASE WHEN lower(COALESCE(source,''))='calc' THEN 0 ELSE 1 END,\n                            datetime(COALESCE(calc_at,'1970-01-01')) DESC\n                 ) AS rn\n          FROM v_labor_rates_snapshot\n        ),\n        effective_rates AS (\n          SELECT department_code, rate_per_hour\n          FROM rates_ranked WHERE rn=1\n        ),\n        -- Hours per unit per product and department from routing_flat\n        hrs AS (\n          SELECT product_id, department_code, SUM(hours_per_unit) AS hpu\n          FROM routing_flat\n          GROUP BY product_id, department_code\n        ),\n        -- Plan qty by period (PLAN scenario only for parity)\n        plan AS (\n          SELECT month_code AS period, product_id, qty\n          FROM prod_budget\n          WHERE scenario = 'PLAN'\n        ),\n        -- Compute routing\u00d7rate\u00d7qty per (period, cc, product)\n        rrq AS (\n          SELECT p.period,\n                 m.cc_id,\n                 h.product_id,\n                 SUM(h.hpu * er.rate_per_hour * p.qty) AS amount\n          FROM hrs h\n          JOIN effective_rates er ON er.department_code = h.department_code\n          JOIN dep_cc_map m ON m.department_code = h.department_code\n          JOIN plan p ON p.product_id = h.product_id\n          GROUP BY p.period, m.cc_id, h.product_id\n        ),\n        sum_rrq AS (\n          SELECT period, cc_id, SUM(amount) AS amount\n          FROM rrq\n          GROUP BY period, cc_id\n        ),\n        pools AS (\n          SELECT period, scenario, cc_id, component_code, amount\n          FROM v_component_pools\n          WHERE component_code='LABOR_DIRECT'\n        )\n        SELECT p.period,\n               p.scenario,\n               p.cc_id,\n               p.component_code,\n               p.amount AS pool_from_opex,\n               COALESCE(r.amount,0) AS sum_routing_rate_qty,\n               COALESCE(p.amount,0) - COALESCE(r.amount,0) AS delta\n        FROM pools p\n        LEFT JOIN sum_rrq r ON r.period = p.period AND r.cc_id = p.cc_id\n</code></pre> <p>References (best-effort): - v_labor_rates_snapshot - rates_ranked - routing_flat - prod_budget - hrs - effective_rates - dep_cc_map - plan - rrq - v_component_pools - pools - sum_rrq</p> <p></p>"},{"location":"zz_old/DB_SCHEMA/#view-v_recon_checks","title":"VIEW: v_recon_checks","text":"<pre><code>CREATE VIEW v_recon_checks AS\n        WITH plan AS (\n          SELECT product_id, qty, month_code FROM v_prod_budget_active\n        ),\n        pool AS (\n          SELECT m.cc_id,\n                 p.month_code AS period,\n                 SUM(l.cost_total * p.qty) AS pool_amount\n          FROM labor_cost_unit l\n          JOIN dep_cc_map m ON m.department_code = l.department_code\n          JOIN plan p ON p.product_id = l.product_id\n          GROUP BY m.cc_id, p.month_code\n        ),\n        alloc AS (\n          SELECT ca.cc_id, ca.period, SUM(ca.amount) AS allocated\n          FROM cost_allocations ca\n          JOIN rules r ON r.rule_id = ca.rule_id\n          JOIN active_alloc_sets aas ON aas.scenario = ca.scenario AND aas.rule_set_id = r.rule_set_id\n          WHERE ca.component_code = 'LABOR_DIRECT'\n          GROUP BY ca.cc_id, ca.period\n        )\n        SELECT COALESCE(p.cc_id, a.cc_id) AS cc_id,\n               COALESCE(p.period, a.period) AS period,\n               COALESCE(p.pool_amount,0) AS pool_amount,\n               COALESCE(a.allocated,0) AS allocated,\n               COALESCE(a.allocated,0) - COALESCE(p.pool_amount,0) AS delta\n        FROM pool p\n        LEFT JOIN alloc a ON a.cc_id = p.cc_id AND a.period = p.period\n        UNION\n        SELECT a.cc_id, a.period, 0 AS pool_amount, a.allocated, a.allocated AS delta\n        FROM alloc a\n        WHERE NOT EXISTS (SELECT 1 FROM pool p WHERE p.cc_id = a.cc_id AND p.period = a.period)\n</code></pre> <p>References (best-effort): - v_prod_budget_active - labor_cost_unit - dep_cc_map - plan - cost_allocations - rules - active_alloc_sets - pool - alloc</p>"},{"location":"zz_old/ERD/","title":"ERD","text":"<p>Generated: 2025-10-20 16:25 (local) Commit: 5fb6b11</p> <p>\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0433\u0440\u0430\u0444 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446 \u043f\u043e \u0432\u043d\u0435\u0448\u043d\u0438\u043c \u043a\u043b\u044e\u0447\u0430\u043c.</p> <ul> <li>DOT: <code>./erd/schema.dot</code></li> <li>SVG: (graphviz \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d)</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/","title":"Implementation Summary \u2014 Phase A \u2192 C and Allocation Wizard (2025\u201110\u201109)","text":"<p>This document summarizes all changes implemented today across schema, ETL, allocation engine, unified cost views, performance, CLI tools, and Streamlit UI, including the new Allocation Wizard.</p>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#overview","title":"Overview","text":"<ul> <li>Added Phase A core tables and compat views; minimal ETL for drivers with zero filtering.</li> <li>Seeded 2026 sample data; implemented drivers ETL for HOURS, MATCOST, PAYROLL_OTHER; utility CLIs.</li> <li>Added Phase B allocation core (cost_allocations, lineage) + engine v1 with CC\u2011closure, elem\u2192component mapping, \u201cweights\u201d and \u201crate\u201d policies, and scenario\u2011aware planning.</li> <li>Added Phase C unified <code>v_cogs_unit</code> and compat cost views driven by active period; refactored UI calculators to use the new layer. Improved startup performance.</li> <li>Built a two\u2011tab Allocation Wizard (Create/Edit) with rule publishing, deletion, and \u201capply\u201d operations.</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#schema-migrations-dbschemapy","title":"Schema Migrations (db/schema.py)","text":"<ul> <li>v6 <code>phase_a_core_and_compat</code>:</li> <li>Tables: <code>drivers</code>, <code>driver_sets</code>, <code>driver_values</code>, <code>cost_rates</code>, <code>fact_measures</code>, hierarchy skeletons (<code>item_nodes</code>, <code>routing_nodes</code>, <code>ovh_nodes</code>), bridges.</li> <li>Compat views: <code>v_driver_catalog</code>, <code>v_driver_values</code>, <code>v_labor_cost_unit_total</code>, <code>v_opr_cost_unit_total</code>, <code>v_ovh_cost_unit</code> (passthrough initially).</li> <li>v7 <code>phase_b_alloc_core</code>:</li> <li>Tables: <code>cost_allocations</code> (PK period+scenario+component+product+cc+rule), <code>lineage_links</code>.</li> <li>Views: <code>v_allocation_rule_effective</code>, <code>v_alloc_lineage</code>, <code>v_cogs_unit</code> (initial), <code>v_recon_checks</code> (recon at component level via UNION emulation).</li> <li>v8 <code>phase_b_recon_components</code>: component\u2011aware <code>v_recon_checks</code> (LABOR_DIRECT, OPR_DIRECT, DEPR_DIRECT).</li> <li>v9 <code>phase_c_active_period_and_compat_views</code>:</li> <li>Table: <code>active_periods(id=1, month_code)</code>.</li> <li>Redefined compat views <code>v_labor_cost_unit_total</code>, <code>v_opr_cost_unit_total</code> to derive from allocations and plan for active period.</li> <li>v10 <code>phase_c_unify_cogs_view</code>:</li> <li>Unified <code>v_cogs_unit</code> = allocations UNION MATCOST from <code>driver_values</code>, with unit via plan join.</li> <li>v11 <code>phase_c_perf_indexes</code>:</li> <li>Indices: <code>cost_allocations(period)</code>, <code>(period,scenario)</code>, <code>(period,component_code)</code>, <code>(product_id)</code> and <code>driver_values(period)</code>.</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#drivers-and-etl-calcdriver_etlpy-tools","title":"Drivers and ETL (calc/driver_etl.py, tools)","text":"<ul> <li><code>populate_hours_plan_driver_values(conn, set_id, month)</code> \u2014 HOURS(PLAN) by product\u00d7CC; zero rows filtered (<code>ABS(value)&gt;1e-9</code>).</li> <li><code>populate_matcost_plan_driver_values(conn, set_id, month)</code> \u2014 BOM\u00d7last RM price \u00d7 plan (RUB), product\u2011level.</li> <li><code>populate_payroll_other_plan_driver_values(conn, set_id, month)</code> \u2014 OPEX effective yearly/12 to CC monthly.</li> <li><code>ensure_driver_catalog_min(conn)</code> \u2014 registers HOURS, MATCOST, PAYROLL_OTHER in <code>drivers</code>.</li> <li>Zero cleanup utility: <code>delete_zero_driver_values(...)</code> and CLI <code>tools/cleanup_driver_values.py</code>.</li> <li>Seed and runners:</li> <li><code>tools/seed_2026.py</code> \u2014 seeds minimal items/BOM/routings, dep\u2192CC mapping, RM prices; loads plan for all 2026; materializes hours; runs ETL for all drivers.</li> <li><code>tools/etl_hours.py</code>, <code>tools/etl_drivers.py</code> \u2014 month/year runners.</li> </ul> <p>Usage examples: - <code>python tools/etl_hours.py --month 2026-01 --set-id PLAN_HOURS_2026</code> - <code>python tools/etl_drivers.py --year 2026 --drivers all --set-id-hours PLAN_HOURS_2026 --set-id-matcost PLAN_MATCOST_2026 --set-id-payroll PLAN_PAYOTHER_2026</code></p>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#allocation-engine-calcalloc_enginepy-and-clis","title":"Allocation Engine (calc/alloc_engine.py) and CLIs","text":"<ul> <li>Engine entry: <code>apply_allocations(conn, period, scenario, rule_set_id, run_id=None, components=None)</code>.</li> <li>CC expansion: resolves CC group to leaf CCs via <code>cc_edges</code> (fallback to <code>cc_nodes.parent_id</code>).</li> <li>Element\u2192component mapping: <code>MFC_PRIM_1\u2192LABOR_DIRECT</code>, <code>MFC_PRIM_2\u2192OPR_DIRECT</code>, <code>MFC_PRIM_3\u2192DEPR_DIRECT</code>.</li> <li>Policies per rule (from <code>rules.params_json</code>):</li> <li><code>policy = 'rate'</code>: direct computation per (cc_leaf, component): <code>\u03a3(unit_cost \u00d7 qty)</code> per product \u2014 writes allocations without weights (lineage from unit source tables).</li> <li><code>policy = 'weights'</code>: per (cc_leaf, component), computes the same per\u2011pair pool and splits by <code>driver_values</code> weights (e.g., HOURS). Pool now uses the chosen volume scenario (see below).</li> <li>Optional <code>component</code> override in params to force component table mapping.</li> <li>Scenario handling: planning qty now taken from <code>prod_budget WHERE month_code=:period AND scenario=:scenario</code> (replaces dependence on active scenario), both for <code>rate</code> and <code>weights</code> paths.</li> <li>Component filter: optional <code>components=[...]</code> to restrict apply to selected components.</li> <li>CLIs:</li> <li><code>tools/alloc_apply.py --period YYYY-MM --scenario PLAN --rule-set DEFAULT_2026</code></li> <li><code>tools/alloc_apply_year.py --year 2026 --scenario PLAN --rule-set DEFAULT_2026</code></li> <li>Rule seeding: <code>tools/alloc_rules_seed.py --rule-set DEFAULT_2026 --cc RU1OP1P21</code> (creates 3 rules for MFC_PRIM_1/2/3 \u2192 HOURS).</li> <li>Reporting: <code>tools/alloc_report.py --year 2026 --scenario PLAN</code> (component totals, recon anomalies, sample COGS/unit).</li> </ul> <p>Notes: - Recon view <code>v_recon_checks</code> compares component pools (unit tables \u00d7 plan) vs summed allocations per CC and month \u2014 should be \u22480 allowing rounding. - Pools are computed per (cc_leaf, component), not a single CC aggregate.</p>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#unified-costs-and-compat-views","title":"Unified Costs and Compat Views","text":"<ul> <li><code>v_cogs_unit</code> now returns rows for components from allocations and adds MATCOST from driver_values. Unit is computed by dividing amount by plan qty for the period.</li> <li>Compat views for unit totals (<code>v_labor_cost_unit_total</code>, <code>v_opr_cost_unit_total</code>) derive from <code>cost_allocations</code> constrained by <code>active_periods.month_code</code>.</li> <li>Active period configuration CLI: <code>tools/set_active_period.py --period 2026-01</code>.</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#streamlit-ui-changes","title":"Streamlit UI Changes","text":"<ul> <li>Refactor calculators to new layer:</li> <li><code>ui/views_item_cost.py</code> now uses <code>v_cogs_unit</code>; list of periods/scenarios loaded from base tables (fast), and computation happens on button click.</li> <li><code>ui/data_cogs.py</code> \u2014 data access helpers (fast periods/scenarios, fetch, pivot).</li> <li>Performance improvements:</li> <li>Avoid heavy queries to <code>v_cogs_unit</code> during first render.</li> <li>New DB indices (see v11) speed up common filters.</li> <li>App tabs updated (<code>ui/app_streamlit.py</code>) to include a new \u201cAllocations\u201d tab.</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#allocation-wizard-uialloc_wizardpy","title":"Allocation Wizard (ui/alloc_wizard.py)","text":"<ul> <li>Two tabs: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 (steps 0\u20137) and \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.</li> <li>Creation steps (0\u20137):</li> <li>Step 0 \u2014 Context: period range, scenario (PLAN/ACT/FORECAST/BASE), rule set selection or creation (draft), optional product scope, quick metrics.</li> <li>Step 1 \u2014 Target &amp; component: select <code>component_code</code>, description, policy (<code>weights</code> or <code>rate</code>).</li> <li>Step 2 \u2014 Scope (pools): pick CC nodes and element nodes (tree groups); closure shows leaf counts; pool estimate for first month using <code>\u03a3(unit_cost \u00d7 qty)</code> per (cc_leaf, component) and chosen scenario.</li> <li>Step 3 \u2014 Drivers: <code>driver_code</code>, <code>driver_set</code>, fallback; preview weights top\u201110 per CC; checks for empties/zeros.</li> <li>Step 4 \u2014 Overrides (optional): JSON list of extra rules with scopes/priority; conflict responsibility noted.</li> <li>Step 5 \u2014 Simulation (dry\u2011run light): show pool sum and weights per CC for the first month.</li> <li>Step 6 \u2014 Publish (draft\u2192active): creates/updates rule_set; inserts base rule and its <code>rule_scope</code> (cc\u00d7elem cartesian of leaves); inserts overrides; set ACTIVE if requested.</li> <li>Step 7 \u2014 Apply: calls <code>apply_allocations</code> for all months in range.</li> <li>Editing tab:</li> <li>Pick rule set, view rules with columns: rule_id, priority, driver_code, component, scope_count, aggregated <code>cc_nodes</code>, <code>elem_nodes</code>.</li> <li>Bulk delete selected rules (removes from <code>rule_scope</code> then <code>rules</code>).</li> <li>Change rule set status (ACTIVE/FROZEN).</li> <li>Run allocation by period range, scenario, and selected components (passes <code>components=[...]</code> to the engine).</li> <li>Dataclass defaults fixed via <code>default_factory</code> to avoid mutable defaults.</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#pool-estimate-formula-as-shown-in-wizard","title":"Pool Estimate Formula (as shown in Wizard)","text":"<p>For CC leaf <code>x</code>, component <code>C</code>, month <code>YYYY-MM</code>, scenario <code>SCN</code>: - <code>pool(x,C,YYYY-MM,SCN) = \u03a3_{product} ( unit_cost_C(product) \u00d7 qty(product, YYYY-MM, SCN) )</code> - unit sources: <code>labor_cost_unit</code> / <code>opr_cost_unit</code> / <code>depr_cost_unit</code> for LABOR/OPR/DEPR. - CC mapping via <code>dep_cc_map</code> (department \u2192 cc_id = x). - Wizard uses that formula for the first month in range; engine uses the same formula for each month.</p>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#quick-recipes","title":"Quick Recipes","text":"<ul> <li>Initialize DB schema:</li> <li><code>python main.py --init-db</code></li> <li>Seed demo data and run ETL (all drivers) for 2026:</li> <li><code>python -m tools.seed_2026</code></li> <li>Run allocations for a single month or full year:</li> <li><code>python -m tools.alloc_apply --period 2026-01 --scenario PLAN --rule-set DEFAULT_2026</code></li> <li><code>python tools/alloc_apply_year.py --year 2026 --scenario PLAN --rule-set DEFAULT_2026</code></li> <li>Set active period for compat views:</li> <li><code>python tools/set_active_period.py --period 2026-01</code></li> <li>Open UI:</li> <li>Streamlit app entry: <code>ui/app_streamlit.py</code> \u2192 tab \u201cAllocations\u201d.</li> </ul>"},{"location":"zz_old/IMPLEMENTATION_SUMMARY_2025-10-09/#known-followups-next-steps","title":"Known Follow\u2011ups / Next Steps","text":"<ul> <li>Extend allocation to overhead components (OVH_LOG, OVH_ADM) and include them in <code>v_cogs_unit</code> once populated.</li> <li>Add UI: rule cloning (v+1), visual overrides editor, richer coverage/recon tabs inside the wizard.</li> <li>Tighten unit/driver compatibility validators and add per\u2011rule dry\u2011run preview.</li> <li>Reconcile any non\u2011zero <code>v_recon_checks</code> deltas by checking dep\u2192CC mapping and scenario alignment.</li> </ul>"},{"location":"zz_old/INDEX/","title":"INDEX","text":"<p>Generated: 2025-10-20 16:25 (local) Commit: 5fb6b11</p>"},{"location":"zz_old/INDEX/#docs","title":"Docs","text":"<ul> <li>Project Overview</li> <li>DB Schema</li> <li>Rules Coverage</li> <li>Architecture Summary</li> <li>ERD</li> </ul>"},{"location":"zz_old/INDEX/#_1","title":"\u0427\u0442\u043e \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430\u043c","text":"<ul> <li>Code: \u0441\u043c. \u0432 PROJECT_OVERVIEW \u2014 \u0440\u0430\u0437\u0434\u0435\u043b \u2018Materials-related\u2019</li> <li>DB: VIEW v_price_by_scenario</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/","title":"PROJECT_OVERVIEW","text":"<p>Generated: 2025-10-20 16:25 (local) Commit: 5fb6b11</p> <p>See also: DB schema</p>"},{"location":"zz_old/PROJECT_OVERVIEW/#packages","title":"Packages","text":"<ul> <li>calc</li> <li>db</li> <li>loaders</li> <li>app</li> <li>ui</li> <li>config</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-calc","title":"Package calc","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcalloc_engine","title":"Module calc.alloc_engine","text":"<ul> <li>func: <code>apply_allocations(conn: 'sqlite3.Connection', period: 'str', scenario: 'str', rule_set_id: 'str', run_id: 'Optional[str]' = None, components: 'Optional[List[str]]' = None) -&gt; 'int'</code> \u2014 Apply weight-based allocations for given period and rule set.</li> <li>func: <code>ensure_phase_b_default_rules(conn: 'sqlite3.Connection', rule_set_id: 'str' = 'DEFAULT_2026') -&gt; 'None'</code> \u2014 </li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 Ensure database schema is up to date.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcbudget","title":"Module calc.budget","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>build_budget_frames(conn: 'sqlite3.Connection', months_ym: 'List[str]', vol_scn: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, ktl_split: 'bool' = False) -&gt; 'Dict[str, pd.DataFrame]'</code> \u2014 Build budget sheets dict {sheet_name: DataFrame}: Total and monthly sheets.</li> <li>func: <code>build_budget_preview(conn: 'sqlite3.Connection', months_ym: 'List[str]', vol_scn: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, ktl_split: 'bool' = False) -&gt; 'Tuple[Dict[str, pd.DataFrame], bytes]'</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c DataFrame \u0438 Excel-\u0431\u0430\u0439\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430.</li> <li>func: <code>choose_best_rate_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int') -&gt; 'Optional[str]'</code> \u2014 Pick scenario from v_routing_costs_scenario (or cost_rates) with max coverage for given year.</li> <li>func: <code>export_budget_to_excel(conn: 'sqlite3.Connection', months_ym: 'List[str]', out_xlsx_path: 'str', vol_scn: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, ktl_split: 'bool' = False, frames: 'Dict[str, pd.DataFrame] | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>price_by_article_sql() -&gt; 'str'</code> \u2014 SQL for latest price by scenario (v_price_by_scenario).</li> <li>func: <code>unit_cost_breakdown_v2(conn: 'sqlite3.Connection', product_id: 'str', *, year: 'int | None' = None, price_scn: 'str | None' = None, rate_scn: 'str | None' = None) -&gt; 'Dict[str, float]'</code> \u2014 Unit cost via v_*_costs_scenario (materials, directs, ovh).</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calccost_tree","title":"Module calc.cost_tree","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>audit_schema_and_data(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', *, load_id: 'str', year: 'int', scenario: 'str | None') -&gt; 'dict'</code> \u2014 </li> <li>func: <code>choose_best_price_load_id(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', *, currency: 'str' = 'RUB') -&gt; 'Optional[str]'</code> \u2014 Pick load_id from rm_prices that provides the best coverage for product BOM components.</li> <li>func: <code>choose_best_rate_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int') -&gt; 'Optional[str]'</code> \u2014 Pick scenario from v_routing_costs_scenario (or cost_rates) with max coverage for given year.</li> <li>func: <code>fetch_direct_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return per-operation direct cost rows with rates from cost_rates.</li> <li>func: <code>fetch_direct_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041f\u0440\u044f\u043c\u044b\u0435 (\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438) \u0447\u0435\u0440\u0435\u0437 v_routing_costs_scenario.</li> <li>func: <code>fetch_indirect_costs_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]') -&gt; 'pd.DataFrame'</code> \u2014 Fetch indirect (non-production) costs from v_ovh_costs_scenario for selected products.</li> <li>func: <code>fetch_materials_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', load_id: 'Optional[str]') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return materials subtree rows with price from rm_prices(load_id) and diagnostics.</li> <li>func: <code>fetch_materials_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', price_scenario: 'str', *, currency: 'str' = 'RUB') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0438\u0437 v_bom_costs_scenario \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0446\u0435\u043d.</li> <li>func: <code>list_price_load_ids(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0412\u0435\u0440\u043d\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a load_id \u0438\u0437 rm_prices (\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0434\u0430\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e).</li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_produced_items(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>list_rate_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_rate_years(conn: 'sqlite3.Connection') -&gt; 'list[int]'</code> \u2014 </li> <li>func: <code>log_report_event(*, log_path: 'str', product_ids: 'Iterable[str]', load_id: 'str', year: 'int', scenario: 'Optional[str]', materials_diag: 'Dict[str, Any] | None' = None, direct_diag: 'Dict[str, Any] | None' = None, error: 'Optional[str]' = None) -&gt; 'None'</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcdl_transfers","title":"Module calc.dl_transfers","text":"<ul> <li>func: <code>apply_transfer(conn, bud_year: int, rule_id: int, donorshare: float = 1.0, elem_root: str = 'MFC_PRIM_1', recipients_cc: list[str] | None = None, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0431\u0430\u0442\u0447 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u043e\u0441 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043b\u044c\u0442\u044b).</li> <li>func: <code>apply_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func: <code>create_transfer_batch(conn, bud_year: int, rule_id: int, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func: <code>find_zero_cc(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0426\u0417 \u0441 \u0447\u0430\u0441\u0430\u043c\u0438 &gt; 0 \u0438 \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\u0434\u043e\u0432\u044b\u043c headcount.</li> <li>func: <code>get_cc_hours(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>get_opex_by_cc_elem(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>get_opex_by_cc_elem_detailed(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0421\u0443\u043c\u043c\u044b OPEX \u043f\u043e \u0426\u0417 \u0438 \u041a\u0410\u0416\u0414\u041e\u041c\u0423 elem_id \u0432\u043d\u0443\u0442\u0440\u0438 elem_root,</li> <li>func: <code>get_personnel_year_base(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>plan_transfer(conn, bud_year: int, rule_id: int, donorshare: float = 1.0, elem_root: str = 'MFC_PRIM_1', recipients_cc: list[str] | None = None) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0432\u0430 DF: items_personnel, items_opex.</li> <li>func: <code>plan_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432:</li> <li>func: <code>revert_transfer(conn, batch_id: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcdriver_etl","title":"Module calc.driver_etl","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>delete_zero_driver_values(conn: 'sqlite3.Connection', set_id: 'str | None' = None, driver_code: 'str | None' = None, period_prefix: 'str | None' = None) -&gt; 'int'</code> \u2014 Delete rows from driver_values where ABS(value) is effectively zero.</li> <li>func: <code>ensure_driver_catalog_min(conn: 'sqlite3.Connection') -&gt; 'None'</code> \u2014 Insert driver cards for HOURS, MATCOST, PAYROLL_OTHER if missing.</li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 Ensure database schema is up to date.</li> <li>func: <code>hours_coverage_check(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'List[Dict[str, Any]]'</code> \u2014 Return records where HOURS values landed with NULL cc_id (unmapped department -&gt; CC).</li> <li>func: <code>populate_hours_plan_driver_values(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'int'</code> \u2014 Populate driver_values for HOURS (PLAN) for a given month.</li> <li>func: <code>populate_matcost_plan_driver_values(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'int'</code> \u2014 Populate driver_values for MATCOST (PLAN) for a given month.</li> <li>func: <code>populate_payroll_other_plan_driver_values(conn: 'sqlite3.Connection', set_id: 'str', month_code: 'str') -&gt; 'int'</code> \u2014 Populate driver_values for PAYROLL_OTHER (PLAN) for a given month.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcefficiency","title":"Module calc.efficiency","text":"<ul> <li>func: <code>apply_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None, comment: 'str' = 'efficiency normalize', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>compute_efficiency_table(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'pd.DataFrame'</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0426\u0417:</li> <li>func: <code>get_routing_hours(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 Return DataFrame with product_id, department_code, hours_per_unit.</li> <li>func: <code>plan_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calclogger","title":"Module calc.logger","text":"<ul> <li>class: <code>RunLogger(conn, scope: str, params: dict)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcmaterialize","title":"Module calc.materialize","text":"<ul> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>cleanup_routing_tree(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>debug_snapshot(conn, pid: 'str | None', tag: 'str')</code> \u2014 </li> <li>func: <code>materialize_depr_costs(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_flat_bom_fast(conn, product_id: 'str | None' = None, max_depth: 'int' = 20)</code> \u2014 Materialise leaf-level flat BOM fast (iterative, cycle-safe, &lt;=5 min target).</li> <li>func: <code>materialize_flat_bom_recursive(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_labor_costs(conn, product_id: 'str | None' = None, on_date: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_labor_hours(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_mo_cost_unit(conn, *, on_date: 'str | None' = None)</code> \u2014 \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a mo_cost_unit \u0420\u0451\u0420\u00b7 bom_flat \u0413\u2014 mo_last_price (\u0420\u0405\u0420\u00b0 \u0420\u0491\u0420\u00b0\u0421\u201a\u0421\u0453 \u0420\u0451\u0420\u00bb\u0420\u0451 \u0420\u0457\u0420\u0455 \u0421\u201a\u0420\u00b5\u0420\u0454\u0421\u0453\u0421\u2030\u0420\u00b5\u0420\u2116).</li> <li>func: <code>materialize_mo_cost_unit_monthly(conn, month_code: 'str')</code> \u2014 \u0420\u201d\u0420\u00bb\u0421\u040f \u0420\u00b1\u0421\u040b\u0420\u0491\u0420\u00b6\u0420\u00b5\u0421\u201a\u0420\u00b0: \u0421\u201e\u0420\u0451\u0420\u0454\u0421\u0403\u0420\u0451\u0421\u0402\u0421\u0453\u0420\u00b5\u0421\u201a \u0421\u2020\u0420\u00b5\u0420\u0405\u0421\u0453 \u0420\u0405\u0420\u00b0 \u0420\u0458\u0420\u00b5\u0421\u0403\u0421\u040f\u0421\u2020 (\u0420\u0405\u0420\u00b0 \u0420\u0457\u0420\u00b5\u0421\u0402\u0420\u0406\u0421\u2039\u0420\u2116 \u0420\u0491\u0420\u00b5\u0420\u0405\u0421\u040a \u0420\u0458\u0420\u00b5\u0421\u0403\u0421\u040f\u0421\u2020\u0420\u00b0).</li> <li>func: <code>materialize_opr_costs(conn, product_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>materialize_ovh_costs(conn, product_ids=None, year=2026)</code> \u2014 </li> <li>func: <code>materialize_ovh_flat(conn, price_scn: 'str', asof: 'str | None' = None, product_ids: 'list[str] | None' = None)</code> \u2014 \u0420\u040e\u0421\u201a\u0421\u0402\u0420\u0455\u0420\u0451\u0421\u201a ovh_flat \u0420\u0451\u0420\u00b7 ovh_tree, \u0421\u0402\u0420\u00b0\u0421\u0403\u0420\u0457\u0421\u0402\u0420\u00b5\u0420\u0491\u0420\u00b5\u0420\u00bb\u0421\u040f\u0421\u040f \u0420\u045a\u0420\u0452\u0420\u045e\u0420\u2022\u0420\u00a0\u0420\u0098\u0420\u0452\u0420\u203a\u0420\u00ac\u0420\u045c\u0420\u0408\u0420\u00ae \u0421\u0403\u0421\u201a\u0420\u0455\u0420\u0451\u0420\u0458\u0420\u0455\u0421\u0403\u0421\u201a\u0421\u040a \u0420\u0457\u0420\u0455 alloc_group</li> <li>func: <code>materialize_ovh_tree(conn, product_ids=None, max_depth: 'int' = 20)</code> \u2014 \u0420\u040e\u0421\u201a\u0421\u0402\u0420\u0455\u0420\u0451\u0421\u201a ovh_tree \u0421\u0403 \u0420\u0457\u0421\u0402\u0420\u0455\u0421\u201a\u0420\u00b0\u0421\u0403\u0420\u0454\u0420\u0451\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u00b5\u0420\u0458 alloc_group (\u0420\u00b1\u0420\u00bb\u0420\u0451\u0420\u00b6\u0420\u00b0\u0420\u2116\u0421\u20ac\u0420\u00b0\u0421\u040f \u0421\u0403\u0420\u0406\u0420\u00b5\u0421\u0402\u0421\u2026\u0421\u0453 \u0420\u00b7\u0420\u00b0\u0420\u0491\u0420\u00b0\u0420\u0405\u0420\u0405\u0420\u00b0\u0421\u040f \u0420\u0456\u0421\u0402\u0421\u0453\u0420\u0457\u0420\u0457\u0420\u00b0).</li> <li>func: <code>materialize_routing_flat(conn, product_id: 'str | None' = None)</code> \u2014 \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a routing_flat \u0420\u0405\u0420\u00b0 \u0420\u0455\u0421\u0403\u0420\u0405\u0420\u0455\u0420\u0406\u0420\u00b0\u0420\u0405\u0420\u0451\u0420\u0451 routing_tree \u0420\u0451 routing_operations.</li> <li>func: <code>materialize_routing_tree(conn, product_id: 'str | None' = None, max_depth: 'int' = 20)</code> \u2014 </li> <li>func: <code>materialize_scrap_cost_unit(conn, product_ids=None, year=2026)</code> \u2014 SCRAP = \u041e\u0408 \u0420\u0457\u0420\u0455 \u0420\u0456\u0421\u0402\u0421\u0453\u0420\u0457\u0420\u0457\u0420\u00b0\u0420\u0458 ( mat_cost_group * scrap_share[group] )</li> <li>func: <code>run_routing_and_labor_pipeline(conn, product_ids=None, *, on_date=None, max_depth=20, clean_before=True, ovh_year=2026)</code> \u2014 \u0420\u2022\u0420\u0491\u0420\u0451\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0405\u0420\u00b0\u0420\u0491\u0421\u2018\u0420\u00b6\u0420\u0405\u0421\u2039\u0420\u2116 \u0420\u0457\u0420\u00b0\u0420\u2116\u0420\u0457\u0420\u00bb\u0420\u00b0\u0420\u2116\u0420\u0405:</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcmaterialize_sql","title":"Module calc.materialize_sql","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>materialize_bom_flat(conn: 'sqlite3.Connection', product_id: 'str | None' = None) -&gt; 'int'</code> \u2014 Materialize bom_flat using SQL scripts under sql/materialize.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcmo_materials","title":"Module calc.mo_materials","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>get_mo_materials_df(conn: 'sqlite3.Connection', months_ym: 'Iterable[str]', vol_scn: 'str', price_scn: 'Optional[str]' = None, use_monthly_if_present: 'bool' = True) -&gt; 'pd.DataFrame'</code> \u2014 \u0412\u0435\u0440\u043d\u0451\u0442 DataFrame \u0441\u043e \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u043e \u0434\u0435\u0442\u0430\u043b\u044f\u0445 \u043f\u043e\u0441\u043b\u0435 \u041c\u041e \u0438 \u0438\u0445 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438.</li> <li>func: <code>streamlit_app(db_path: 'Optional[str | None]' = None)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcopr_rates_calc","title":"Module calc.opr_rates_calc","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>amounts_by_cc_for_elemgroup(conn, bud_year: int, cc_list: list[str], elem_list: list[str]) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>compare_with_previous(conn, df_current: pandas.core.frame.DataFrame, component_code: str, base_scenario: str | None = None) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0415\u0441\u043b\u0438 base_scenario \u0437\u0430\u0434\u0430\u043d \u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u2192 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043e \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u043e\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f.</li> <li>func: <code>component_code_for_kind(kind: str, components: pandas.core.frame.DataFrame | None = None) -&gt; str</code> \u2014 </li> <li>func: <code>compute_rates(conn, price_scn: str, months_ym: list[str], cc_root: str, kind: str = 'labor', vol_scn: str = 'BG26_VOL') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043a\u0438 = (\u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) / (\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b) \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0426\u0417.</li> <li>func: <code>fetch_last_snapshot(conn, scenario: str, component_code: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>hours_by_department(conn, months_ym: list[str], *, vol_scn: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b \u043f\u043e \u0443\u0447\u0430\u0441\u0442\u043a\u0430\u043c \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0441\u044f\u0446\u044b:</li> <li>func: <code>list_rate_components(conn) -&gt; pandas.core.frame.DataFrame</code> \u2014 Return active cost rate components with fallbacks.</li> <li>func: <code>save_rates_cost_rates(conn, df_rates: pandas.core.frame.DataFrame, component_code: str, scenario: str = '') -&gt; int</code> \u2014 Save computed yearly rates into unified cost_rates (idempotent).</li> <li>func: <code>scenario_to_year(price_scn: str, default: int | None = None) -&gt; int</code> \u2014 Derive numeric budget year from scenario code (e.g. BG26_VOL -&gt; 2026).</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcovh_flat","title":"Module calc.ovh_flat","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>materialize_ovh_flat(conn: 'sqlite3.Connection') -&gt; 'int'</code> \u2014 Materialize ovh_flat via SQL scripts under sql/materialize.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcovh_rates_calc","title":"Module calc.ovh_rates_calc","text":"<ul> <li>func: <code>compute_ovh_bases_year(conn, year: int = 2026, vol_scn: str | None = None)</code> \u2014 \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0451 \u0435\u0434\u0438\u043d\u043e\u0439 vol_scenario, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e \u0443\u0434\u0432\u043e\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u0433\u043e\u0434\u0430.</li> <li>func: <code>preview_kind_table(conn, year: int, kind: str)</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 DataFrame \u0434\u043b\u044f \u0432\u043a\u043b\u0430\u0434\u043a\u0438:</li> <li>func: <code>resolve_vol_scenario(conn, bud_year: int, vol_scn: str | None) -&gt; str</code> \u2014 </li> <li>func: <code>write_kind_tariffs(conn, year: int, kind: str, preview_df)</code> \u2014 \u041f\u0438\u0448\u0435\u0442 \u0442\u0430\u0440\u0438\u0444\u044b \u0432 ovh_tariffs \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0430\u0442\u044c\u0435 (\u0434\u043e\u043b\u0438 = pct \u0438\u043b\u0438 plant_avg_pct, \u0435\u0441\u043b\u0438 pct \u043f\u0443\u0441\u0442\u0430\u044f).</li> <li>func: <code>write_scrap_percent(conn, year: int, percent: float) -&gt; int</code> \u2014 \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0435\u0434\u0438\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 'scrap' \u043d\u0430 \u0432\u0441\u0435 \u0433\u0440\u0443\u043f\u043f\u044b A001..A010 \u0437\u0430 \u0433\u043e\u0434.</li> <li>func: <code>write_tariff_shares(conn, year: int, tall_df)</code> \u2014 \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442/\u0430\u043f\u0441\u0435\u0440\u0442\u0438\u0442 \u0442\u0430\u0440\u0438\u0444\u044b (tall) \u0432 ovh_tariffs:</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcppv_by_cg","title":"Module calc.ppv_by_cg","text":"<ul> <li>func: <code>compute_ppv_by_cg(conn: 'sqlite3.Connection', *, vol_s: 'str', s1: 'str', s2: 'str', s3: 'str', pure_only: 'bool' = False) -&gt; 'Dict[str, pd.DataFrame]'</code> \u2014 \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c PPV \u043f\u043e commodity group.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcquality","title":"Module calc.quality","text":"<ul> <li>func: <code>check_bom_components_missing_prices(conn)</code> \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 BOM \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 rm_prices (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>func: <code>check_bom_unknown_items(conn)</code> \u2014 BOM \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432 items.</li> <li>func: <code>check_budget_has_nonproduced(conn)</code> \u2014 \u0412 prod_budget \u0435\u0441\u0442\u044c product_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 items \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a is_produced=0.</li> <li>func: <code>check_budget_missing_routing_ops(conn)</code> \u2014 Produced items in active volume scenario that are missing in routing_flat,</li> <li>func: <code>check_items_duplicate_article(conn)</code> \u2014 \u0414\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432 (\u043e\u0434\u0438\u043d article \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e item_id).</li> <li>func: <code>check_items_nonproduced_has_routing_or_ovh(conn)</code> \u2014 \u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=0) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 routing_group/ovh_group_code (\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e).</li> <li>func: <code>check_items_produced_missing_routing_or_ovh(conn)</code> \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=1), \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0443\u0441\u0442\u044b routing_group \u0438\u043b\u0438 ovh_group_code.</li> <li>func: <code>check_items_required_fields(conn)</code> \u2014 \u041f\u0443\u0441\u0442\u044b\u0435/\u043d\u0443\u043b\u0435\u0432\u044b\u0435 article, name, uom.</li> <li>func: <code>check_ovh_groups_missing_tariffs(conn, year: 'int | None' = None)</code> \u2014 \u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0437 ovh_flat, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 ovh_tariffs (\u043f\u043e \u0433\u043e\u0434\u0443; \u0435\u0441\u043b\u0438 \u0433\u043e\u0434 None \u2014 \u0431\u0435\u0440\u0451\u043c max(year)).</li> <li>func: <code>check_routing_flat_missing_rates(conn)</code> \u2014 \u0414\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0438\u0437 routing_flat \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 labor_rates_snapshot.</li> <li>func: <code>render_quality_ui(conn, st)</code> \u2014 \u042d\u043a\u0440\u0430\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0430\u0448\u0435\u0439 \u0432\u044c\u044e\u0448\u043a\u0435:</li> <li>func: <code>run_quality_checks(conn, selected: 'list[str] | None' = None) -&gt; 'dict[str, pd.DataFrame]'</code> \u2014 selected: \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a. \u0415\u0441\u043b\u0438 None \u2014 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcrouting_flat","title":"Module calc.routing_flat","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>materialize_routing_flat(conn: 'sqlite3.Connection') -&gt; 'int'</code> \u2014 Materialize routing_flat via SQL scripts under sql/materialize.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calcrouting_hours","title":"Module calc.routing_hours","text":"<ul> <li>func: <code>get_routing_hours(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 Return DataFrame with product_id, department_code, hours_per_unit.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-calctransfers_opex","title":"Module calc.transfers_opex","text":"<ul> <li>func: <code>apply_cycle(conn, cycle_id: 'int', cycle_no: 'int', comment: 'str', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>apply_transfer_opex_by_rules(conn, bud_year: 'int', elem_root: 'str', cycle_no: 'int', rules_df, comment: 'str', created_by: 'str | None', rule_id: 'int') -&gt; 'str'</code> \u2014 </li> <li>func: <code>ensure_rule_for_cycle(conn, cycle_id: 'int') -&gt; 'int'</code> \u2014 </li> <li>func: <code>load_cycle_meta(conn: 'sqlite3.Connection', cycle_id: 'int')</code> \u2014 </li> <li>func: <code>load_cycle_rule_id(conn: 'sqlite3.Connection', cycle_id: 'int') -&gt; 'int'</code> \u2014 </li> <li>func: <code>load_cycle_rules_df(conn: 'sqlite3.Connection', cycle_id: 'int') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>load_rule_meta(conn: 'sqlite3.Connection', rule_id: 'int')</code> \u2014 </li> <li>func: <code>load_rule_recipients_df(conn: 'sqlite3.Connection', rule_id: 'int') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>plan_transfer_opex_by_rules(conn: 'sqlite3.Connection', bud_year: 'int', elem_root: 'str', cycle_no: 'int', rules_df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 rules_df: columns = donor_cc_id, to_cc_id, share (0..1), optional to_elem_id.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-db","title":"Package db","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-dbconnection","title":"Module db.connection","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>contextmanager(func)</code> \u2014 @contextmanager decorator.</li> <li>func: <code>get_table_info(conn, table: str)</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-dbensure_mfc_report","title":"Module db.ensure_mfc_report","text":"<ul> <li>func: <code>ensure_mfc_report_defs_table(conn)</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0442\u0447\u0451\u0442\u0430 (\u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Target2026/2027 \u0438 \u0442.\u043f.).</li> <li>func: <code>ensure_mfc_report_indexes(conn)</code> \u2014 \u0414\u043e\u043f. \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u044b\u0445 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u043f\u043e \u0433\u043e\u0434\u0443/\u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f\u043c \u0447\u0435\u0440\u0435\u0437 mfc_report_defs.</li> <li>func: <code>ensure_mfc_report_line_rules_table(conn)</code> \u2014 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0430\u0433\u0440\u0435\u0433\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.</li> <li>func: <code>ensure_mfc_report_lines_table(conn)</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0451\u0442\u0430 (\u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a).</li> <li>func: <code>ensure_mfc_report_rules_add_sets(conn)</code> \u2014 </li> <li>func: <code>ensure_mfc_report_schema(conn)</code> \u2014 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0431\u0451\u0440\u0442\u043a\u0430: \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0451 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430-\u0441\u0431\u043e\u0440\u043a\u0438 \u043e\u0442\u0447\u0451\u0442\u043e\u0432.</li> <li>func: <code>ensure_mfc_sets_schema(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-dbensure_mo","title":"Module db.ensure_mo","text":"<ul> <li>func: <code>ensure_mo_tables(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-dbqueries","title":"Module db.queries","text":"<ul> <li>func: <code>fetch_flat_bom_for_parent(conn, product_id)</code> \u2014 </li> <li>func: <code>fetch_labor_cost_unit(conn, product_id)</code> \u2014 </li> <li>func: <code>fetch_labor_total(conn, product_id) -&gt; float</code> \u2014 </li> <li>func: <code>fetch_materials_from_bom(conn, product_id)</code> \u2014 </li> <li>func: <code>fetch_produced_items(conn)</code> \u2014 </li> <li>func: <code>search_items_by_tokens(conn, tokens: str | list[str], limit_per_token: int = 20) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0418\u0449\u0435\u0442 items \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 (\u0430\u0440\u0442\u0438\u043a\u0443\u043b/\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u043a\u043e\u0434).</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-dbschema","title":"Module db.schema","text":"<ul> <li>class: <code>Migration(version: int, name: str, apply: Callable[[sqlite3.Connection], NoneType]) -&gt; None</code> \u2014 Migration(version: int, name: str, apply: Callable[[sqlite3.Connection], NoneType])</li> <li>class: <code>SchemaManager(migrations: Optional[List[db.schema.Migration]] = None)</code> \u2014 </li> <li>func: <code>add_column_if_missing(conn, table: str, coldef: str)</code> \u2014 </li> <li>func: <code>column_exists(conn, table: str, column: str) -&gt; bool</code> \u2014 </li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>ensure_active_scenarios(conn)</code> \u2014 </li> <li>func: <code>ensure_bom_struct_stage_table(conn)</code> \u2014 </li> <li>func: <code>ensure_bom_table(conn)</code> \u2014 Ensure bom_flat exists and 'bom' view points to it; handle legacy bom table.</li> <li>func: <code>ensure_budget_tables(conn)</code> \u2014 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX.</li> <li>func: <code>ensure_cc_extra_columns(conn)</code> \u2014 Backwards-compatible helper; migrations add required columns.</li> <li>func: <code>ensure_commodity_map(conn)</code> \u2014 </li> <li>func: <code>ensure_cost_rates_indexes(conn)</code> \u2014 </li> <li>func: <code>ensure_depr_opr_cost_tables(conn)</code> \u2014 </li> <li>func: <code>ensure_depr_opr_rates(conn)</code> \u2014 </li> <li>func: <code>ensure_item_cg_view(conn)</code> \u2014 </li> <li>func: <code>ensure_items_columns(conn)</code> \u2014 </li> <li>func: <code>ensure_labor_cost_table(conn)</code> \u2014 </li> <li>func: <code>ensure_labor_hours_table(conn)</code> \u2014 </li> <li>func: <code>ensure_labor_rates_snapshot_schema(conn)</code> \u2014 </li> <li>func: <code>ensure_mfc_report_schema(conn)</code> \u2014 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0431\u0451\u0440\u0442\u043a\u0430: \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0441\u0451 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430-\u0441\u0431\u043e\u0440\u043a\u0438 \u043e\u0442\u0447\u0451\u0442\u043e\u0432.</li> <li>func: <code>ensure_mo_tables(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_bases_year_table(conn)</code> \u2014 \u0421\u043d\u0438\u043c\u043e\u043a \u0431\u0430\u0437 \u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043f\u043e \u043e\u0432\u0435\u0440\u0445\u0435\u0434-\u0433\u0440\u0443\u043f\u043f\u0430\u043c (A001\u2013A010) \u043d\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0433\u043e\u0434.</li> <li>func: <code>ensure_ovh_cost_unit_table(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_costs_table(conn)</code> \u2014 Ensure ovh_costs table exists and is indexed.</li> <li>func: <code>ensure_ovh_flat_table(conn)</code> \u2014 Ensure ovh_flat unified schema columns exist (idempotent).</li> <li>func: <code>ensure_ovh_tariffs_indexes(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_tariffs_table(conn)</code> \u2014 </li> <li>func: <code>ensure_ovh_views(conn)</code> \u2014 </li> <li>func: <code>ensure_price_views(conn)</code> \u2014 </li> <li>func: <code>ensure_prod_budget_table(conn)</code> \u2014 </li> <li>func: <code>ensure_prod_budget_views(conn)</code> \u2014 </li> <li>func: <code>ensure_rm_price_load_table(conn)</code> \u2014 </li> <li>func: <code>ensure_rm_prices(conn)</code> \u2014 </li> <li>func: <code>ensure_routing_flat_table(conn)</code> \u2014 Ensure routing_flat exists with required columns and indexes.</li> <li>func: <code>ensure_routing_tree_table(conn)</code> \u2014 </li> <li>func: <code>ensure_routings_columns(conn)</code> \u2014 </li> <li>func: <code>ensure_run_logging(conn)</code> \u2014 </li> <li>func: <code>ensure_scenario_cost_views(conn)</code> \u2014 Create scenario-based cost views for BOM, routing, and overhead (OVH).</li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 Ensure database schema is up to date.</li> <li>func: <code>ensure_scrap_cost_unit_table(conn)</code> \u2014 </li> <li>func: <code>ensure_transfers_schema(conn)</code> \u2014 </li> <li>func: <code>ensure_unique_routing_group(conn)</code> \u2014 </li> <li>func: <code>get_table_info(conn, table: str)</code> \u2014 </li> <li>func: <code>migrate_ovh_tariffs_to_tall(conn)</code> \u2014 \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u0443\u0437\u043a\u0438\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432:</li> <li>func: <code>populate_ovh_costs(conn)</code> \u2014 Rebuild ovh_costs for active year with restricted driver\u2192cost_type mapping.</li> <li>func: <code>table_exists(conn, name: str) -&gt; bool</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-loaders","title":"Package loaders","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersbom_loader","title":"Module loaders.bom_loader","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>load_bom_components_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_spec_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_bom_specs_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>normalize_bom_components_stage(conn, load_id: 'Optional[str]' = None) -&gt; 'int'</code> \u2014 Normalize bom_components_stage by assigning line_no where missing and clearing error_flag.</li> <li>func: <code>upsert_bom_components_from_stage(conn, load_id: 'str', verbose: 'bool' = False) -&gt; 'int'</code> \u2014 Fast upsert from stage to bom_spec_components for a given load_id.</li> <li>func: <code>upsert_bom_specs_from_stage(conn, load_id: 'str') -&gt; 'int'</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersccg_wru_loader","title":"Module loaders.ccg_wru_loader","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>ensure_cc_extra_columns(conn)</code> \u2014 Backwards-compatible helper; migrations add required columns.</li> <li>func: <code>load_cc_structure_twofiles(conn: 'sqlite3.Connection', groups_path: 'str', leaves_path: 'str', sheet_name: 'str | None' = None)</code> \u2014 </li> <li>func: <code>parse_groups_from_ccg(df: 'pd.DataFrame') -&gt; 'Tuple[List[Dict], List[Tuple[str, str]]]'</code> \u2014 </li> <li>func: <code>parse_leaves_from_list(df: 'pd.DataFrame') -&gt; 'Tuple[List[Dict], List[Tuple[str, str]]]'</code> \u2014 </li> <li>func: <code>upsert_cc(conn: 'sqlite3.Connection', nodes: 'List[Dict]', edges: 'List[Tuple[str, str]]')</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersdirect_cost_loader","title":"Module loaders.direct_cost_loader","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>class: <code>ColumnMap(cc_id_col: 'str | None', dept_col: 'str | None', month_cols: 'list[Any]', yearly_col: 'str | None') -&gt; None</code> \u2014 ColumnMap(cc_id_col: 'str | None', dept_col: 'str | None', month_cols: 'list[Any]', yearly_col: 'str | None')</li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>render(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersload_cost_structures","title":"Module loaders.load_cost_structures","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func: <code>cc_duplicates_report(conn: sqlite3.Connection) -&gt; Dict[str, pandas.core.frame.DataFrame]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 DataFrame:</li> <li>func: <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 </li> <li>func: <code>main()</code> \u2014 </li> <li>func: <code>parse_ccg(df: pandas.core.frame.DataFrame) -&gt; Tuple[List[Dict], List[Tuple[str, str]]]</code> \u2014 \u0420\u0430\u0437\u0431\u043e\u0440 CCG WRU \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u043c\u0451\u043d \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0443\u0440\u043e\u0432\u043d\u0435\u0439 (Level0/LEVEL 1/L2/\u0423\u0440\u043e\u0432\u0435\u043d\u044c 3 \u0438 \u0442.\u0434.).</li> <li>func: <code>parse_mfc(df: pandas.core.frame.DataFrame, leaf_level: int = 5) -&gt; Tuple[List[Dict], List[Tuple[str, str]]]</code> \u2014 \u0421\u043a\u043e\u043b\u044c\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443 MFCPRIM:</li> <li>func: <code>quality_checks(conn: sqlite3.Connection) -&gt; Dict[str, int]</code> \u2014 </li> <li>func: <code>upsert_cc(conn: sqlite3.Connection, nodes: List[Dict], edges: List[Tuple[str, str]]) -&gt; None</code> \u2014 </li> <li>func: <code>upsert_elem(conn, nodes, edges)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersloader_mo_prices","title":"Module loaders.loader_mo_prices","text":"<ul> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersloaders","title":"Module loaders.loaders","text":"<ul> <li>class: <code>Decimal(value='0', context=None)</code> \u2014 Construct a new Decimal object. 'value' can be an integer, string, tuple,</li> <li>class: <code>InvalidOperation(...)</code> \u2014 Base class for arithmetic errors.</li> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>apply_department_suggestions(conn, df_suggestions)</code> \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 suggested_dept \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0441 UNASSIGNED/\u043f\u0443\u0441\u0442\u044b\u043c \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u043c.</li> <li>func: <code>diagnose_routings(conn)</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c DataFrame'\u043e\u0432:</li> <li>func: <code>ensure_items_columns(conn)</code> \u2014 </li> <li>func: <code>ensure_prod_budget_table(conn)</code> \u2014 </li> <li>func: <code>ensure_routings_columns(conn)</code> \u2014 </li> <li>func: <code>is_object_dtype(arr_or_dtype) -&gt; 'bool'</code> \u2014 Check whether an array-like or dtype is of the object dtype.</li> <li>func: <code>load_ovh_tariffs(conn, csv_path: 'str', year: 'int')</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 wide CSV (\u043a\u043e\u043b\u043e\u043d\u043a\u0438: overhead_group, scrap_share, depr_opr_share, log_share, adm_share)</li> <li>func: <code>load_prod_budget_from_xlsx(conn, xlsx_path: 'str', scenario: 'str', article_aliases=None, name_aliases=None)</code> \u2014 \u0414\u0432\u0443\u0445\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a: \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c header=[0,1].</li> <li>func: <code>normalize_date_any(x)</code> \u2014 </li> <li>func: <code>normalize_department_code(dept_raw, operation_text: 'str')</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 (dept_code, source), \u0433\u0434\u0435 source \u2208 {\"given\",\"inferred\",\"default\"}.</li> <li>func: <code>read_rm_prices_xlsx(file_or_path, sheet_name=0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>safe_col(df: pandas.core.frame.DataFrame, name: str, default=None)</code> \u2014 </li> <li>func: <code>split_work_type(row) -&gt; 'pd.Series'</code> \u2014 \u0418\u0437 \"\u0412\u0438\u0434 \u0440\u0430\u0431\u043e\u0442\" \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u044c operation \u0438 department.</li> <li>func: <code>sync_bom_struct_from_stage(conn, spec_codes: 'list[str] | None' = None)</code> \u2014 </li> <li>func: <code>to_float_ru(x)</code> \u2014 </li> <li>func: <code>upsert_bom_general(conn, df: 'pd.DataFrame', allow_stub_items: 'bool' = False)</code> \u2014 </li> <li>func: <code>upsert_bom_struct(conn, df: 'pd.DataFrame', *, default_qty_if_blank: 'float' = 1.0, create_stub_items: 'bool' = True, source_batch: 'str | None' = None)</code> \u2014 </li> <li>func: <code>upsert_depr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func: <code>upsert_items(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func: <code>upsert_items_from_xlsx(conn, df: 'pd.DataFrame')</code> \u2014 \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:</li> <li>func: <code>upsert_labor_rates_periodic(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func: <code>upsert_labor_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func: <code>upsert_opr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func: <code>upsert_rm_prices(conn, df: 'pd.DataFrame', filename: 'str', effective_from: 'str | None' = None, load_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>upsert_routings(conn, df: 'pd.DataFrame')</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 routing \u043d\u0430 \u043e\u0434\u0438\u043d routing_group.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersopex_loader","title":"Module loaders.opex_loader","text":"<ul> <li>func: <code>commit_opex(conn: sqlite3.Connection, load_id: str, bud_year: int = 2026) -&gt; tuple[int, float]</code> \u2014 </li> <li>func: <code>diagnose_opex_stage(conn, load_id: str) -&gt; dict</code> \u2014 </li> <li>func: <code>read_opex_excel(path: str, sheet_name: str = 'INPUT') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>stage_opex(conn, df: pandas.core.frame.DataFrame, sheet_name: str, treat_empty_as_zero: bool = False)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loaderspersonnel_loader","title":"Module loaders.personnel_loader","text":"<ul> <li>class: <code>BinaryIO()</code> \u2014 Typed version of the return of open() in binary mode.</li> <li>func: <code>load_personnel_monthly_from_excel(conn, xls: 'ExcelInput', bud_year: 'int', sheet: 'Optional[str]' = None, clear_year_first: 'bool' = False, source: 'str' = 'file', note: 'str' = None) -&gt; 'tuple[int, pd.DataFrame]'</code> \u2014 \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c (personnel_monthly) \u0438\u0437 xlsx \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a\u0430\u043a \u0432 110_HC_2026.xlsx.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersrules_loader","title":"Module loaders.rules_loader","text":"<ul> <li>func: <code>ensure_rules_schema(conn: 'sqlite3.Connection') -&gt; 'None'</code> \u2014 </li> <li>func: <code>list_rules(conn: 'sqlite3.Connection', q: 'Optional[str]' = None, limit: 'int' = 500) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>read_rules_excel(xlsx_path: 'str') -&gt; 'Tuple[pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0427\u0438\u0442\u0430\u0435\u0442 \u043e\u0431\u0430 \u043b\u0438\u0441\u0442\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430: detail_rules \u0438 fallback_rules (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c).</li> <li>func: <code>toggle_rule(conn: 'sqlite3.Connection', rule_id: 'int', enabled: 'bool') -&gt; 'None'</code> \u2014 </li> <li>func: <code>update_rule_row(conn: 'sqlite3.Connection', row: 'Dict') -&gt; 'None'</code> \u2014 </li> <li>func: <code>upsert_rules(conn: 'sqlite3.Connection', df_rules: 'pd.DataFrame', enable: 'bool' = True) -&gt; 'int'</code> \u2014 \u041c\u0430\u0441\u0441\u043e\u0432\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u0440\u0430\u0432\u0438\u043b. \u0415\u0441\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0441 \u0442\u0435\u043c\u0438 \u0436\u0435 (priority, cost_type, pattern, elem_id) \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u2014</li> <li>func: <code>validate_rules(conn: 'sqlite3.Connection', df_rules: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430: elem_id \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 elem_nodes; \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0443\u0441\u0442\u044b\u043c cost_type \u0438 pattern \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersupdater","title":"Module loaders.updater","text":"<ul> <li>class: <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func: <code>apply_items_updates(conn, preview_df: 'pd.DataFrame') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_items_updates; \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 UPDATE \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c.</li> <li>func: <code>apply_std_prices(conn, preview_df: 'pd.DataFrame', source_name: 'str') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_std_prices (\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c note IS NULL),</li> <li>func: <code>preview_items_updates(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>preview_std_prices(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0, article_col='Material', price_col='STD 2026', uom='\u0428\u0422', currency='RUB') -&gt; 'pd.DataFrame'</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-loadersutils","title":"Module loaders.utils","text":"<ul> <li>func: <code>drop_1c_totals(df: pandas.core.frame.DataFrame) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>read_1c_txt(file_bytes: bytes, encoding='auto') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>read_excel(file_bytes: bytes) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>safe_col(df: pandas.core.frame.DataFrame, name: str, default=None)</code> \u2014 </li> <li>func: <code>to_float_ru(x)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-app","title":"Package app","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-appapp-import-failed","title":"Module app.app \u2014 import failed","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-appinit_db","title":"Module app.init_db","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>main()</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-ui","title":"Package ui","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiadmin_table_editor","title":"Module ui.admin_table_editor","text":"<ul> <li>func: <code>render_table_editor(conn: sqlite3.Connection)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uialloc_wizard","title":"Module ui.alloc_wizard","text":"<ul> <li>class: <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>class: <code>DraftRule(component_code: 'str' = 'LABOR_DIRECT', description: 'str' = '', policy: 'str' = 'weights', cc_nodes: 'List[str]' = &lt;factory&gt;, elem_nodes: 'List[str]' = &lt;factory&gt;, driver_code: 'str' = 'HOURS', driver_set: 'str' = 'PLAN_HOURS_2026', fallback: 'str' = 'error', overrides: 'List[Dict[str, Any]]' = &lt;factory&gt;) -&gt; None</code> \u2014 DraftRule(component_code: 'str' = 'LABOR_DIRECT', description: 'str' = '', policy: 'str' = 'weights', cc_nodes: 'List[str]' = , elem_nodes: 'List[str]' = , driver_code: 'str' = 'HOURS', driver_set: 'str' = 'PLAN_HOURS_2026', fallback: 'str' = 'error', overrides: 'List[Dict[str, Any]]' = ) <li>class: <code>WizardState(period_from: 'str' = '2026-01', period_to: 'str' = '2026-01', scenario: 'str' = 'PLAN', rule_set_id: 'str' = 'DEFAULT_2026', rule_set_status: 'str' = 'DRAFT', scope_filter: 'str' = '', draft: 'DraftRule' = &lt;factory&gt;) -&gt; None</code> \u2014 WizardState(period_from: 'str' = '2026-01', period_to: 'str' = '2026-01', scenario: 'str' = 'PLAN', rule_set_id: 'str' = 'DEFAULT_2026', rule_set_status: 'str' = 'DRAFT', scope_filter: 'str' = '', draft: 'DraftRule' = ) <li>func: <code>apply_allocations(conn: 'sqlite3.Connection', period: 'str', scenario: 'str', rule_set_id: 'str', run_id: 'Optional[str]' = None, components: 'Optional[List[str]]' = None) -&gt; 'int'</code> \u2014 Apply weight-based allocations for given period and rule set.</li> <li>func: <code>asdict(obj, *, dict_factory=&lt;class 'dict'&gt;)</code> \u2014 Return the fields of a dataclass instance as a new dictionary mapping</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>dataclass(cls=None, /, *, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)</code> \u2014 Add dunder methods based on the fields defined in the class.</li> <li>func: <code>field(*, default=&lt;dataclasses._MISSING_TYPE object at 0x000002049637B9E0&gt;, default_factory=&lt;dataclasses._MISSING_TYPE object at 0x000002049637B9E0&gt;, init=True, repr=True, hash=None, compare=True, metadata=None, kw_only=&lt;dataclasses._MISSING_TYPE object at 0x000002049637B9E0&gt;)</code> \u2014 Return an object to identify dataclass fields.</li> <li>func: <code>render(db_path: 'str')</code> \u2014 </li>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiapp_streamlit","title":"Module ui.app_streamlit","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>ensure_bom_table(conn)</code> \u2014 Ensure bom_flat exists and 'bom' view points to it; handle legacy bom table.</li> <li>func: <code>ensure_unique_routing_group(conn)</code> \u2014 </li> <li>func: <code>main()</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func: <code>render_alloc_wizard(db_path: 'str')</code> \u2014 </li> <li>func: <code>render_budget_run(db_path: str)</code> \u2014 </li> <li>func: <code>render_cost_tree(db_path: 'str')</code> \u2014 </li> <li>func: <code>render_costing_run(db_path)</code> \u2014 </li> <li>func: <code>render_import_data(db_path: str, encoding='auto')</code> \u2014 </li> <li>func: <code>render_updater(db_path: str)</code> \u2014 </li> <li>func: <code>run_nsi_refs()</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-uicomponents","title":"Package ui.components","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-uicomponentsitem_picker","title":"Module ui.components.item_picker","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>item_paste_picker(db_path: str, key_prefix: str = 'picker', title: str = '\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430') -&gt; List[str]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 item_id.</li> <li>func: <code>search_items_by_tokens(conn, tokens: str | list[str], limit_per_token: int = 20) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0418\u0449\u0435\u0442 items \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 (\u0430\u0440\u0442\u0438\u043a\u0443\u043b/\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u043a\u043e\u0434).</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uicomponentsset_window_title","title":"Module ui.components.set_window_title","text":"<ul> <li>func: <code>set_window_title(title: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uidata_cogs","title":"Module ui.data_cogs","text":"<ul> <li>func: <code>fetch_cogs_unit(conn: 'sqlite3.Connection', period: 'str', scenario: 'str', product_ids: 'list[str] | None' = None) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>get_periods(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 Fast list of available periods from base tables (avoid heavy v_cogs_unit).</li> <li>func: <code>get_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>pivot_cogs(df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_bom_xlsx","title":"Module ui.views_bom_xlsx","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>load_bom_components_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_spec_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_bom_specs_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>render(db_path: str)</code> \u2014 </li> <li>func: <code>upsert_bom_components_from_stage(conn, load_id: 'str', verbose: 'bool' = False) -&gt; 'int'</code> \u2014 Fast upsert from stage to bom_spec_components for a given load_id.</li> <li>func: <code>upsert_bom_specs_from_stage(conn, load_id: 'str') -&gt; 'int'</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_budget","title":"Module ui.views_budget","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_rate_years(conn: 'sqlite3.Connection') -&gt; 'list[int]'</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func: <code>render_budget_run(db_path: str)</code> \u2014 </li> <li>func: <code>render_ppv(conn: sqlite3.Connection)</code> \u2014 \u0420\u0435\u043d\u0434\u0435\u0440 PPV (Price Purchase Variance) \u043f\u043e Commodity Group.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_cost_tree","title":"Module ui.views_cost_tree","text":"<ul> <li>func: <code>audit_schema_and_data(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', *, load_id: 'str', year: 'int', scenario: 'str | None') -&gt; 'dict'</code> \u2014 </li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>fetch_direct_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return per-operation direct cost rows with rates from cost_rates.</li> <li>func: <code>fetch_direct_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', year: 'int', scenario: 'Optional[str]' = None) -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041f\u0440\u044f\u043c\u044b\u0435 (\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438) \u0447\u0435\u0440\u0435\u0437 v_routing_costs_scenario.</li> <li>func: <code>fetch_indirect_costs_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]') -&gt; 'pd.DataFrame'</code> \u2014 Fetch indirect (non-production) costs from v_ovh_costs_scenario for selected products.</li> <li>func: <code>fetch_materials_cost(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', load_id: 'Optional[str]') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 Return materials subtree rows with price from rm_prices(load_id) and diagnostics.</li> <li>func: <code>fetch_materials_cost_by_scenario(conn: 'sqlite3.Connection', product_ids: 'Iterable[str]', price_scenario: 'str', *, currency: 'str' = 'RUB') -&gt; 'Tuple[pd.DataFrame, dict]'</code> \u2014 \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0438\u0437 v_bom_costs_scenario \u0434\u043b\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f \u0446\u0435\u043d.</li> <li>func: <code>list_price_load_ids(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0412\u0435\u0440\u043d\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a load_id \u0438\u0437 rm_prices (\u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0434\u0430\u0442\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e).</li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_produced_items(conn: 'sqlite3.Connection') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>list_rate_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 </li> <li>func: <code>list_rate_years(conn: 'sqlite3.Connection') -&gt; 'list[int]'</code> \u2014 </li> <li>func: <code>log_report_event(*, log_path: 'str', product_ids: 'Iterable[str]', load_id: 'str', year: 'int', scenario: 'Optional[str]', materials_diag: 'Dict[str, Any] | None' = None, direct_diag: 'Dict[str, Any] | None' = None, error: 'Optional[str]' = None) -&gt; 'None'</code> \u2014 </li> <li>func: <code>render(db_path: 'str')</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_costing_run","title":"Module ui.views_costing_run","text":"<ul> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func: <code>render_costing_run(db_path)</code> \u2014 </li> <li>func: <code>render_ovh_rates_calc(conn, default_year: int = 2026)</code> \u2014 </li> <li>func: <code>render_rates_calc(conn: sqlite3.Connection, vol_scn: str | None = None) -&gt; None</code> \u2014 </li> <li>func: <code>render_transfers(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_mo_loader","title":"Module ui.views_mo_loader","text":"<ul> <li>func: <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> <li>func: <code>view_mo_loader(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_opr_rates","title":"Module ui.views_opr_rates","text":"<ul> <li>func: <code>cast(typ, val)</code> \u2014 Cast a value to a type.</li> <li>func: <code>compare_with_previous(conn, df_current: pandas.core.frame.DataFrame, component_code: str, base_scenario: str | None = None) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0415\u0441\u043b\u0438 base_scenario \u0437\u0430\u0434\u0430\u043d \u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u2192 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441\u043e \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u043e\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u044f.</li> <li>func: <code>component_code_for_kind(kind: str, components: pandas.core.frame.DataFrame | None = None) -&gt; str</code> \u2014 </li> <li>func: <code>compute_rates(conn, price_scn: str, months_ym: list[str], cc_root: str, kind: str = 'labor', vol_scn: str = 'BG26_VOL') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043a\u0438 = (\u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) / (\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b) \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0426\u0417.</li> <li>func: <code>fetch_last_snapshot(conn, scenario: str, component_code: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>list_price_scenarios(conn: 'sqlite3.Connection') -&gt; 'list[str]'</code> \u2014 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0446\u0435\u043d (price_scenarios.scenario_code).</li> <li>func: <code>list_rate_components(conn) -&gt; pandas.core.frame.DataFrame</code> \u2014 Return active cost rate components with fallbacks.</li> <li>func: <code>render_rates_calc(conn: sqlite3.Connection, vol_scn: str | None = None) -&gt; None</code> \u2014 </li> <li>func: <code>resolve_vol_scenario(conn, bud_year: int, vol_scn: str | None) -&gt; str</code> \u2014 </li> <li>func: <code>save_rates_cost_rates(conn, df_rates: pandas.core.frame.DataFrame, component_code: str, scenario: str = '') -&gt; int</code> \u2014 Save computed yearly rates into unified cost_rates (idempotent).</li> <li>func: <code>scenario_to_year(price_scn: str, default: int | None = None) -&gt; int</code> \u2014 Derive numeric budget year from scenario code (e.g. BG26_VOL -&gt; 2026).</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_ovh_rates","title":"Module ui.views_ovh_rates","text":"<ul> <li>func: <code>render_ovh_rates_calc(conn, default_year: int = 2026)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_ppv","title":"Module ui.views_ppv","text":"<ul> <li>class: <code>BytesIO(initial_bytes=b'')</code> \u2014 Buffered I/O implementation using an in-memory bytes buffer.</li> <li>func: <code>compute_ppv_by_cg(conn: 'sqlite3.Connection', *, vol_s: 'str', s1: 'str', s2: 'str', s3: 'str', pure_only: 'bool' = False) -&gt; 'Dict[str, pd.DataFrame]'</code> \u2014 \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c PPV \u043f\u043e commodity group.</li> <li>func: <code>render_ppv(conn: sqlite3.Connection)</code> \u2014 \u0420\u0435\u043d\u0434\u0435\u0440 PPV (Price Purchase Variance) \u043f\u043e Commodity Group.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_quality","title":"Module ui.views_quality","text":"<ul> <li>func: <code>check_bom_components_missing_prices(conn)</code> \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 BOM \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 rm_prices (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>func: <code>check_bom_unknown_items(conn)</code> \u2014 BOM \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432 items.</li> <li>func: <code>check_budget_has_nonproduced(conn)</code> \u2014 \u0412 prod_budget \u0435\u0441\u0442\u044c product_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 items \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a is_produced=0.</li> <li>func: <code>check_items_duplicate_article(conn)</code> \u2014 \u0414\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432 (\u043e\u0434\u0438\u043d article \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e item_id).</li> <li>func: <code>check_items_nonproduced_has_routing_or_ovh(conn)</code> \u2014 \u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=0) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 routing_group/ovh_group_code (\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e).</li> <li>func: <code>check_items_produced_missing_routing_or_ovh(conn)</code> \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=1), \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0443\u0441\u0442\u044b routing_group \u0438\u043b\u0438 ovh_group_code.</li> <li>func: <code>check_items_required_fields(conn)</code> \u2014 \u041f\u0443\u0441\u0442\u044b\u0435/\u043d\u0443\u043b\u0435\u0432\u044b\u0435 article, name, uom.</li> <li>func: <code>check_ovh_groups_missing_tariffs(conn, year: 'int | None' = None)</code> \u2014 \u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0437 ovh_flat, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 ovh_tariffs (\u043f\u043e \u0433\u043e\u0434\u0443; \u0435\u0441\u043b\u0438 \u0433\u043e\u0434 None \u2014 \u0431\u0435\u0440\u0451\u043c max(year)).</li> <li>func: <code>check_routing_flat_missing_rates(conn)</code> \u2014 \u0414\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0438\u0437 routing_flat \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 labor_rates_snapshot.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_transfers","title":"Module ui.views_transfers","text":"<ul> <li>func: <code>apply_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None, comment: 'str' = 'efficiency normalize', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>compute_efficiency_table(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'pd.DataFrame'</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0426\u0417:</li> <li>func: <code>plan_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', vol_scenario: 'str | None' = None) -&gt; 'tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</li> <li>func: <code>render_opex_cycles(conn: sqlite3.Connection)</code> \u2014 </li> <li>func: <code>render_transfers(conn)</code> \u2014 </li> <li>func: <code>revert_transfer(conn, batch_id: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_transfers_opex","title":"Module ui.views_transfers_opex","text":"<ul> <li>func: <code>apply_cycle(conn, cycle_id: 'int', cycle_no: 'int', comment: 'str', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_cycle_meta(conn: 'sqlite3.Connection', cycle_id: 'int')</code> \u2014 </li> <li>func: <code>load_cycle_rules_df(conn: 'sqlite3.Connection', cycle_id: 'int') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>plan_transfer_opex_by_rules(conn: 'sqlite3.Connection', bud_year: 'int', elem_root: 'str', cycle_no: 'int', rules_df: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 rules_df: columns = donor_cc_id, to_cc_id, share (0..1), optional to_elem_id.</li> <li>func: <code>render_opex_cycles(conn: sqlite3.Connection)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_updater","title":"Module ui.views_updater","text":"<ul> <li>func: <code>apply_items_updates(conn, preview_df: 'pd.DataFrame') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_items_updates; \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 UPDATE \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c.</li> <li>func: <code>apply_std_prices(conn, preview_df: 'pd.DataFrame', source_name: 'str') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_std_prices (\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c note IS NULL),</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>preview_items_updates(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>preview_std_prices(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0, article_col='Material', price_col='STD 2026', uom='\u0428\u0422', currency='RUB') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#module-uiviews_upload","title":"Module ui.views_upload","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func: <code>apply_department_suggestions(conn, df_suggestions)</code> \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 suggested_dept \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0441 UNASSIGNED/\u043f\u0443\u0441\u0442\u044b\u043c \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u043c.</li> <li>func: <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func: <code>is_object_dtype(arr_or_dtype) -&gt; 'bool'</code> \u2014 Check whether an array-like or dtype is of the object dtype.</li> <li>func: <code>load_bom_components_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_spec_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_bom_specs_xlsx(conn, file_bytes: 'bytes', mapping: 'Optional[Dict[str, str]]' = None, default_valid_from: 'Optional[str]' = None, load_id: 'Optional[str]' = None) -&gt; 'str'</code> \u2014 </li> <li>func: <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> <li>func: <code>load_personnel_monthly_from_excel(conn, xls: 'ExcelInput', bud_year: 'int', sheet: 'Optional[str]' = None, clear_year_first: 'bool' = False, source: 'str' = 'file', note: 'str' = None) -&gt; 'tuple[int, pd.DataFrame]'</code> \u2014 \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c (personnel_monthly) \u0438\u0437 xlsx \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a\u0430\u043a \u0432 110_HC_2026.xlsx.</li> <li>func: <code>load_prod_budget_from_xlsx(conn, xlsx_path: 'str', scenario: 'str', article_aliases=None, name_aliases=None)</code> \u2014 \u0414\u0432\u0443\u0445\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a: \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c header=[0,1].</li> <li>func: <code>materialize_bom_flat(conn: 'sqlite3.Connection', product_id: 'str | None' = None) -&gt; 'int'</code> \u2014 Materialize bom_flat using SQL scripts under sql/materialize.</li> <li>func: <code>materialize_mo_cost_unit(conn, *, on_date: 'str | None' = None)</code> \u2014 \u0420\u2014\u0420\u00b0\u0420\u0457\u0420\u0455\u0420\u00bb\u0420\u0405\u0421\u040f\u0420\u00b5\u0421\u201a mo_cost_unit \u0420\u0451\u0420\u00b7 bom_flat \u0413\u2014 mo_last_price (\u0420\u0405\u0420\u00b0 \u0420\u0491\u0420\u00b0\u0421\u201a\u0421\u0453 \u0420\u0451\u0420\u00bb\u0420\u0451 \u0420\u0457\u0420\u0455 \u0421\u201a\u0420\u00b5\u0420\u0454\u0421\u0453\u0421\u2030\u0420\u00b5\u0420\u2116).</li> <li>func: <code>read_1c_txt(file_bytes: bytes, encoding='auto') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func: <code>read_rm_prices_xlsx(file_or_path, sheet_name=0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func: <code>render(db_path: str, encoding='auto')</code> \u2014 </li> <li>func: <code>render_direct_cost_loader(conn)</code> \u2014 </li> <li>func: <code>to_float_ru(x)</code> \u2014 </li> <li>func: <code>upsert_bom_components_from_stage(conn, load_id: 'str', verbose: 'bool' = False) -&gt; 'int'</code> \u2014 Fast upsert from stage to bom_spec_components for a given load_id.</li> <li>func: <code>upsert_bom_specs_from_stage(conn, load_id: 'str') -&gt; 'int'</code> \u2014 </li> <li>func: <code>upsert_items(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func: <code>upsert_items_from_xlsx(conn, df: 'pd.DataFrame')</code> \u2014 \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:</li> <li>func: <code>upsert_rm_prices(conn, df: 'pd.DataFrame', filename: 'str', effective_from: 'str | None' = None, load_id: 'str | None' = None)</code> \u2014 </li> <li>func: <code>upsert_routings(conn, df: 'pd.DataFrame')</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 routing \u043d\u0430 \u043e\u0434\u0438\u043d routing_group.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#package-config","title":"Package config","text":""},{"location":"zz_old/PROJECT_OVERVIEW/#module-configsettings","title":"Module config.settings","text":"<ul> <li>class: <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> </ul>"},{"location":"zz_old/PROJECT_OVERVIEW/#materials-related","title":"Materials-related","text":"<ul> <li>calc.materialize</li> <li>calc.materialize_sql</li> <li>calc.mo_materials</li> </ul> <p>See: DB schema \u00b7 Rules</p>"},{"location":"zz_old/RULES_COVERAGE/","title":"RULES_COVERAGE","text":"<p>Generated: 2025-10-20 16:25 (local) Commit: 5fb6b11</p> <p>No rules table found. Skipped.</p>"},{"location":"zz_old/backup/","title":"Wilo\u2011ERP \u2014 Mini ERP (\u041d\u0421\u0418, \u0411\u044e\u0434\u0436\u0435\u0442, \u041a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438)","text":""},{"location":"zz_old/backup/#_1","title":"\u0427\u0442\u043e \u044d\u0442\u043e \u0437\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0430 (\u043a\u0430\u043a \u043e\u043d\u0430 \u0443\u0441\u0442\u0440\u043e\u0435\u043d\u0430 \u0441\u0435\u0439\u0447\u0430\u0441)","text":"<p>Wilo-ERP \u2014 \u044d\u0442\u043e \u00ab\u043c\u0438\u043d\u0438-ERP\u00bb \u043d\u0430 Python + SQLite + (\u0441\u0443\u0434\u044f \u043f\u043e \u043f\u0440\u0435\u0436\u043d\u0438\u043c \u0447\u0430\u0442\u0430\u043c) Streamlit-UI, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043c\u044b\u043a\u0430\u0435\u0442 \u0446\u0438\u043a\u043b: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u0435\u0440\u0432\u0438\u0447\u043a\u0438 \u0438\u0437 1\u0421/Excel \u2192 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b/\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438/\u0442\u0430\u0440\u0438\u0444\u044b) \u2192 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u043c\u0435\u0436\u0434\u0443 \u0426\u0424\u041e \u2192 OPEX \u2192 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 \u0432 Excel. \u041d\u0438\u0436\u0435 \u2014 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438 \u0438 \u0438\u0445 \u043f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445.  1) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 1\u0421 \u0438 Excel  1.1)    \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u00ab\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0447\u0451\u0442\u044b\u00bb 1\u0421 (TXT/XLSX) \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 Excel-\u0444\u0430\u0439\u043b\u044b: \u043d\u043e\u043c\u0435\u043d\u043a\u043b\u0430\u0442\u0443\u0440\u0430, BOM/\u0440\u0435\u0441\u0443\u0440\u0441\u043d\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routing), \u043e\u0431\u044a\u0451\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c, \u0446\u0435\u043d\u044b RM, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438. 1.2)    \u0415\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440\u044b \u0441 \u0442\u043e\u043b\u0435\u0440\u0430\u043d\u0442\u043d\u043e\u0441\u0442\u044c\u044e \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0430\u043c/\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f\u043c \u0438 \u043a \u00ab\u0433\u0440\u044f\u0437\u043d\u044b\u043c\u00bb \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0430\u043c (\u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043b\u044f TXT \u0438\u0437 1\u0421). 1.3)    \u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u2014 \u0441\u0442\u0435\u0439\u0434\u0436\u0438\u043d\u0433-\u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438 (items, BOM, routings, prices, volumes, \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u0426\u0424\u041e/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442). 2) \u0420\u0430\u0441\u0447\u0451\u0442 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445) 2.1)    \u0414\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u0443\u043a\u0446\u0438\u0438: \u0440\u0430\u0437\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 BOM (\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e, \u0434\u043e \u043b\u0438\u0441\u0442\u044c\u0435\u0432), \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0431\u044a\u0451\u043c\u044b (\u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u043e), \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u043d\u0430 RM. 2.2)    \u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442/\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0435\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432, \u0447\u0430\u0441\u044b/\u043d\u043e\u0440\u043c\u044b, \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u0441\u0432\u0435\u043d\u043d\u044b\u0445. 2.3)    \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0443\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043f\u043e CC \u00d7 Element \u00d7 Period), \u0441 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430\u043c\u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430 (load_id, sheet \u0438 \u0442.\u043f.). 3)  \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX (\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438) 3.1)    \u0412 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0435\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u00ab\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u044b\u0439\u00bb \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a OPEX: \u0441\u0442\u0435\u0439\u0434\u0436\u0438\u043d\u0433 \u0431\u0435\u0437 \u0436\u0451\u0441\u0442\u043a\u0438\u0445 FK, \u043c\u0430\u043f\u043f\u0438\u043d\u0433 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c (\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0447\u0435\u0442\u0430/\u0441\u0442\u0430\u0442\u044c\u0438 \u2192 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0437\u0430\u0442\u0440\u0430\u0442), \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u00ab\u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445\u00bb \u0426\u0424\u041e/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0444\u043b\u0430\u0433\u0438 \u00abunmapped\u00bb, \u00abmissing_cc\u00bb, \u00abbad_amount\u00bb, \u00abdup_candidate\u00bb. 3.2)    \u041a\u043e\u043c\u043c\u0438\u0442 \u0432 \u00ab\u0447\u0438\u0441\u0442\u0443\u044e\u00bb \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX \u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u0434\u0430\u043b\u044c\u0448\u0435 \u043e\u0442\u0447\u0451\u0442/\u0441\u0432\u043e\u0434\u044b \u0431\u044b\u043b\u0438 \u0435\u0434\u0438\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u044b. 4)  \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0437\u0430\u0442\u0440\u0430\u0442 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0434\u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f\u043c\u0438 (\u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f) 4.1)    \u041b\u043e\u0433\u0438\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u0444\u0435\u0440\u043e\u0432/\u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432 (\u0432\u043d\u0443\u0442\u0440\u0438\u0437\u0430\u0432\u043e\u0434\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438) \u043c\u0435\u0436\u0434\u0443 \u0426\u0424\u041e: \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f/\u0434\u0430\u0440\u0438\u0442\u0435\u043b\u044f, \u0447\u0442\u043e\u0431\u044b \u0430\u043d\u0430\u043b\u0438\u0442\u0438\u043a\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 \u0438 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0431\u044b\u043b\u0430 \u043f\u0440\u0430\u0432\u0434\u0438\u0432\u043e\u0439 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439.  4.2)    \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043d\u0442\u0443\u0440\u0430\u0445: \u0434\u043e\u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u0435\u0440\u0435\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432, \u0441\u0432\u043e\u0434 CC\u00d7Element. 5)  \u0420\u0430\u0441\u0447\u0451\u0442 \u0442\u0430\u0440\u0438\u0444\u0430 \u043d\u0430 \u043f\u0440\u044f\u043c\u043e\u0439 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b 5.1)    \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0442\u0430\u0432\u043a\u0443 (\u0447\u0430\u0441/\u0441\u043c\u0435\u043d\u0430/\u043f\u0435\u0440\u0438\u043e\u0434) \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u0430 \u043f\u043e \u0426\u0424\u041e/\u0443\u0447\u0430\u0441\u0442\u043a\u0430\u043c \u043d\u0430 \u0431\u0430\u0437\u0435 \u043e\u0431\u044a\u0451\u043c\u0430 \u0447\u0430\u0441\u043e\u0432 \u0438 \u0444\u043e\u043d\u0434\u0430 \u043e\u043f\u043b\u0430\u0442\u044b (\u0432 \u0442.\u0447. \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432). 5.2)    \u0422\u0430\u0440\u0438\u0444 \u0437\u0430\u0442\u0435\u043c \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 \u0432 \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0431\u044e\u0434\u0436\u0435\u0442\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b. 6)  \u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 Excel 6.1)    \u0415\u0434\u0438\u043d\u044b\u0435 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438 (\u043f\u043e \u0441\u043b\u043e\u044f\u043c): \u0441\u0440\u0435\u0437\u044b CC\u00d7Element\u00d7Period, \u043e\u0442\u0447\u0451\u0442\u044b \u043f\u043e OPEX, \u043f\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430\u043c, \u043f\u043e \u0442\u0440\u0443\u0434\u0443, \u00ab\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u044b\u0435\u00bb \u043b\u0438\u0441\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0432\u044c\u044e. 6.2)    \u041e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u2014 \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043b\u0438\u0441\u0442\u044b \u0441\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0430\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043e\u043a (load_id), \u043b\u043e\u0433\u0430\u043c\u0438/\u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438 \u043c\u0430\u043f\u043f\u0438\u043d\u0433\u0430.</p>"},{"location":"zz_old/backup/#_2","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<p>1) \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c <code>app_streamlit.py</code>. 2) \u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432 \u041d\u0421\u0418 \u2192 \u0432\u043a\u043b\u0430\u0434\u043a\u0430 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438. 3) \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0411\u0414 \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c MFCPRIM/CCG. 4) \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u0430\u0432\u0438\u043b\u0430: \u0438\u043c\u043f\u043e\u0440\u0442 <code>detail_rules</code>/<code>fallback_rules</code>. 5) \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0438 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430.</p>"},{"location":"zz_old/backup/#_3","title":"\u0413\u0434\u0435 \u0447\u0442\u043e","text":"<ul> <li><code>ui/ui_nsi_references.py</code> \u2014 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u041d\u0421\u0418 (\u0432\u043a\u043b\u0430\u0434\u043a\u0438).</li> <li><code>loaders/load_cost_structures.py</code> \u2014 MFCPRIM (elements) parser + upsert.</li> <li><code>loaders/ccg_wru_loader.py</code> \u2014 CCG WRU (cost centers) parser + upsert.</li> <li><code>loaders/rules_loader.py</code> \u2014 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0440\u0430\u0432\u0438\u043b, \u0438\u043c\u043f\u043e\u0440\u0442 \u0438\u0437 Excel, CRUD.</li> <li><code>db/connection.py</code> \u2014 <code>normalize_db_path</code>, \u043e\u0431\u0432\u044f\u0437\u043a\u0430 SQLite.</li> </ul>"},{"location":"zz_old/backup/#docs","title":"\u0417\u0430\u0447\u0435\u043c docs/","text":"<ul> <li>\u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043c\u0435\u0436\u0434\u0443 \u0447\u0430\u0442\u0430\u043c\u0438 \u0438 ZIP\u2011\u0440\u0435\u043b\u0438\u0437\u0430\u043c\u0438.</li> <li>\u041a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0435 \u043e\u043d\u0431\u043e\u0440\u0434\u0438\u043d\u0433\u2011\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 runbook.</li> </ul>"},{"location":"zz_old/backup/ACCEPTANCE_PhaseA_Checklist/","title":"Phase A \u2014 Acceptance Checklist","text":"<p>Date: 2025-10-09</p>"},{"location":"zz_old/backup/ACCEPTANCE_PhaseA_Checklist/#schema-views","title":"Schema &amp; Views","text":"<ul> <li>[ ] <code>ensure_schema</code> creates new core tables without errors.</li> <li>[ ] <code>v_driver_catalog</code> lists at least HOURS with correct unit and granularity.</li> <li>[ ] <code>v_driver_values</code> returns HOURS rows for chosen month/set.</li> </ul>"},{"location":"zz_old/backup/ACCEPTANCE_PhaseA_Checklist/#data","title":"Data","text":"<ul> <li>[ ] ETL wrote HOURS(PLAN) with correct keys (set_id, period, driver_code, product_id, cc_id).</li> <li>[ ] Coverage: 0 rows with NULL cc_id (post dep_cc_map fix).</li> </ul>"},{"location":"zz_old/backup/ACCEPTANCE_PhaseA_Checklist/#compatibility","title":"Compatibility","text":"<ul> <li>[ ] Legacy reports (labor/opR/ovh) read via passthrough views and match numbers on sample month.</li> </ul>"},{"location":"zz_old/backup/ACCEPTANCE_PhaseA_Checklist/#governance","title":"Governance","text":"<ul> <li>[ ] Drivers registered: HOURS, MATCOST, PAYROLL_OTHER.</li> <li>[ ] Driver sets registered: PLAN_2026 and ACT_2026M01 (draft).</li> </ul>"},{"location":"zz_old/backup/ACCEPTANCE_PhaseA_Checklist/#gono-go-for-phase-b","title":"Go/No-Go for Phase B","text":"<ul> <li>[ ] All above completed.</li> </ul>"},{"location":"zz_old/backup/ADRs-ADR-0002-dimensional-core/","title":"ADR-0002 \u2014 Dimensional Core (Facts &amp; Dims)","text":"<p>Status: Proposed Date: 2025-10-06</p>"},{"location":"zz_old/backup/ADRs-ADR-0002-dimensional-core/#context","title":"Context","text":"<p>\u041d\u0443\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u043b\u0430\u043d/\u0444\u0430\u043a\u0442/\u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0438\u0445 \u043f\u043e \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430\u043c \u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u0430\u043c. \u041d\u044b\u043d\u0435\u0448\u043d\u044f\u044f \u0441\u0445\u0435\u043c\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430 \u0438 \u0443\u0434\u043e\u0431\u043d\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u043e\u0432, \u043d\u043e \u043d\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u0430 \u0434\u043b\u044f \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0439 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0439 \u0432\u0438\u0442\u0440\u0438\u043d\u044b \u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430.</p>"},{"location":"zz_old/backup/ADRs-ADR-0002-dimensional-core/#decision","title":"Decision","text":"<p>\u0412\u0432\u043e\u0434\u0438\u043c \u0437\u0432\u0435\u0437\u0434\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u0435 \u044f\u0434\u0440\u043e \u0432 L2/L3: \u043d\u0430\u0431\u043e\u0440 <code>dim_*</code> \u0438 <code>fact_*</code> \u0442\u0430\u0431\u043b\u0438\u0446 \u0441 \u0447\u0451\u0442\u043a\u0438\u043c \u0437\u0435\u0440\u043d\u043e\u043c. \u0412\u0441\u0435 <code>v_*</code> \u043e\u0442\u0447\u0451\u0442\u043d\u044b\u0435 \u0441\u043b\u043e\u0438 \u0447\u0438\u0442\u0430\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u044f\u0434\u0440\u0430.</p>"},{"location":"zz_old/backup/ADRs-ADR-0002-dimensional-core/#consequences","title":"Consequences","text":"<p>\u041f\u043b\u044e\u0441\u044b: \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b, \u043b\u0451\u0433\u043a\u0438\u0435 \u0441\u0432\u0435\u0440\u043a\u0438, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0430 \u043e\u0442\u0447\u0451\u0442\u0430\u0445. \u041c\u0438\u043d\u0443\u0441\u044b: \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f ETL-\u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438. \u041c\u0438\u0442\u0438\u0433\u0430\u0446\u0438\u044f: \u043f\u043e\u0448\u0430\u0433\u043e\u0432\u0430\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0440\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0434\u043e \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438.</p>"},{"location":"zz_old/backup/ADRs-ADR-0003-allocation-rules-engine/","title":"ADR-0003 \u2014 Allocation Rules Engine","text":"<p>Status: Proposed Date: 2025-10-06</p>"},{"location":"zz_old/backup/ADRs-ADR-0003-allocation-rules-engine/#context","title":"Context","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0442\u0440\u0430\u0442 (\u043f\u043e \u0447\u0430\u0441\u0430\u043c, \u043f\u043e \u043c\u0430\u0442.\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u043e CC, \u0434\u043e\u043b\u044f \u0434\u043b\u044f \u0437\u0434\u0430\u043d\u0438\u0439/\u0441\u043e\u043e\u0440\u0443\u0436\u0435\u043d\u0438\u0439), \u0441 \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c, \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u00ab\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u044c\u044e \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e\u00bb.</p>"},{"location":"zz_old/backup/ADRs-ADR-0003-allocation-rules-engine/#decision","title":"Decision","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0434\u0432\u0438\u0436\u043e\u043a \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e YAML-DSL + \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432: - \u0422\u0430\u0431\u043b\u0438\u0446\u044b: <code>rule_sets</code>, <code>rules</code>, <code>rule_filters</code>, <code>rule_splits</code>, <code>rule_params</code>. - \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435: SQL-\u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d + Python-\u0445\u0435\u043b\u043f\u0435\u0440\u044b <code>driver_lib</code>. - \u0422\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430: <code>lineage_links</code> (src\u2192dst \u0441 rule_id).</p>"},{"location":"zz_old/backup/ADRs-ADR-0003-allocation-rules-engine/#consequences","title":"Consequences","text":"<p>\u041f\u043b\u044e\u0441\u044b: \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u044c, \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0432\u0435\u0440\u0441\u0438\u0439, \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c. \u041c\u0438\u043d\u0443\u0441\u044b: \u0443\u0441\u043b\u043e\u0436\u043d\u0435\u043d\u0438\u0435 ETL. \u041c\u0438\u0442\u0438\u0433\u0430\u0446\u0438\u044f: \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 DSL v1, \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u044b\u0435 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b, \u0440\u0435\u0435\u0441\u0442\u0440\u044b \u0442\u0435\u0441\u0442\u043e\u0432.</p>"},{"location":"zz_old/backup/ARCHITECTURE/","title":"ARCHITECTURE","text":""},{"location":"zz_old/backup/ARCHITECTURE/#overview","title":"Overview","text":"<p>\u041c\u043e\u043d\u043e\u043b\u0438\u0442 \u043d\u0430 Python/SQLite \u0441\u043e \u0441\u043b\u043e\u0435\u043c UI (Streamlit), \u0441\u043b\u043e\u044f\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 (loaders) \u0438 \u0441\u043b\u043e\u0435\u043c \u0411\u0414 (db).  \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a: \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u2192 \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u2192 SQLite \u2192 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f/\u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u2192 \u043e\u0442\u0447\u0451\u0442\u044b/\u0431\u044e\u0434\u0436\u0435\u0442.</p> <pre><code>Excel / CSV \u2500\u2500\u25ba loaders \u2500\u2500\u25ba SQLite (db) \u2500\u2500\u25ba calc/materialize \u2500\u2500\u25ba reports (Excel) / UI\n                          \u25b2\n                          \u2514\u2500\u2500 UI (Streamlit) \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438/\u043f\u0440\u0430\u0432\u0438\u043b/\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f\n</code></pre>"},{"location":"zz_old/backup/ARCHITECTURE/#components","title":"Components","text":"<ul> <li>ui/: <code>app_streamlit.py</code>, <code>ui_nsi_references.py</code> (\u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u041d\u0421\u0418).</li> <li>loaders/: <code>load_cost_structures.py</code> (MFCPRIM), <code>ccg_wru_loader.py</code> (CCG), <code>rules_loader.py</code> (\u043f\u0440\u0430\u0432\u0438\u043b\u0430).</li> <li>db/: <code>connection.py</code> (<code>normalize_db_path</code>), ensure_* \u0441\u0445\u0435\u043c\u044b, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438.</li> <li>calc/: \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f, \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438/\u0431\u044e\u0434\u0436\u0435\u0442\u0430 (\u043f\u043b\u0430\u043d).</li> </ul>"},{"location":"zz_old/backup/ARCHITECTURE/#data-flow","title":"Data flow (\u041d\u0421\u0418)","text":"<p>1) MFCPRIM.xlsx \u2192 <code>parse_mfc</code> \u2192 <code>elem_nodes/elem_edges</code> 2) CCG WRU.xlsx \u2192 <code>parse_ccg_wru</code> \u2192 <code>cc_nodes/cc_edges</code> 3) \u041f\u0440\u0430\u0432\u0438\u043b\u0430 (Excel) \u2192 <code>read_rules_excel</code> \u2192 <code>elem_map_rules</code></p>"},{"location":"zz_old/backup/ARCHITECTURE/#data-flow-highlevel","title":"Data flow (\u0411\u044e\u0434\u0436\u0435\u0442, high\u2011level)","text":"<p>Budget.xlsx \u2192 staging (\u0438\u043c\u043f\u043e\u0440\u0442) \u2192 <code>elem_map_rules</code> \u2192 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0431\u044e\u0434\u0436\u0435\u0442 (\u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043a \u041c\u0412\u0417/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c) \u2192 \u043e\u0442\u0447\u0451\u0442\u044b.</p>"},{"location":"zz_old/backup/CHANGELOG/","title":"Wilo\u2011ERP \u2014 CHANGELOG","text":"<p>Last updated: 2025-09-12 07:03</p>"},{"location":"zz_old/backup/CHANGELOG/#20250912","title":"2025\u201109\u201112","text":"<ul> <li>\u041d\u0421\u0418: \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0439 \u043f\u0430\u0440\u0441\u0435\u0440 MFCPRIM (<code>parse_mfc</code>, leaf_level=5) \u0438 UPSERT \u0432 <code>elem_nodes/elem_edges</code>.</li> <li>\u041d\u0421\u0418: \u043f\u0430\u0440\u0441\u0435\u0440 CCG WRU (<code>parse_ccg_wru</code>), \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 (\u0433\u0440\u0443\u043f\u043f\u044b 1..6, \u043b\u0438\u0441\u0442 7, \u0438\u043c\u044f 9, \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f 11, \u043e\u0442\u0432\u0435\u0442\u0441\u0442. 12).</li> <li>UI: \u0432\u043a\u043b\u0430\u0434\u043a\u0438 \u00ab\u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438\u00bb, \u00ab\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432\u00bb, \u00ab\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\u00bb, \u00ab\u041f\u0440\u0430\u0432\u0438\u043b\u0430\u00bb \u0432 <code>ui_nsi_references.py</code>.</li> <li>\u041f\u0440\u0430\u0432\u0438\u043b\u0430: \u0442\u0430\u0431\u043b\u0438\u0446\u0430 <code>elem_map_rules</code>, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 <code>detail_rules/fallback_rules</code>, \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440 \u043f\u0440\u0430\u0432\u0438\u043b \u0432 UI.</li> <li>\u0410\u0432\u0442\u043e\u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b (token\u2011Jaccard), fallback \u043a <code>Plan*</code> \u0432 \u0433\u0440\u0443\u043f\u043f\u0435.</li> <li>\u0423\u0441\u0442\u043e\u0439\u0447\u0438\u0432\u043e\u0441\u0442\u044c: \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f Excel \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b, \u043f\u043e\u0447\u0438\u043d\u043a\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0443\u0440\u043e\u0432\u043d\u0435\u0439, \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0435\u0439 \u043a \u0411\u0414.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/","title":"VS Code \u2014 gpt\u20115\u2011codex Task Spec (Phase A)","text":"<p>Context: Wilo\u2011ERP migrating to unified long formats for drivers, rates, measures, and allocation rules. Keep existing UI/reporting functional via compatibility views. Language: Python (Streamlit UI + SQLite).</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#objective-phase-a","title":"Objective (Phase A)","text":"<p>Implement schema &amp; compatibility layer and minimal ETL to populate HOURS (plan). Do not refactor UI yet.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#model","title":"Model","text":"<p>Use gpt\u20115\u2011codex\u2011medium for speed/latency. If diff touches complex SQL windowing or tricky migrations, temporarily switch to gpt\u20115\u2011codex\u2011high.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#constraints","title":"Constraints","text":"<ul> <li>Non\u2011destructive migrations; add tables/views without breaking existing readers.</li> <li>Backwards\u2011compatible views MUST keep old column names and types where feasible.</li> <li>No external services, SQLite only.</li> <li>Add indexes where scans are heavy.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#deliverables","title":"Deliverables","text":"<ol> <li>DDL (in <code>db/schema.py</code> or dedicated migration):  </li> <li>tables: <code>drivers</code>, <code>driver_sets</code>, <code>driver_values</code>, <code>cost_rates</code>, <code>fact_measures</code>, <code>item_nodes</code>, <code>routing_nodes</code>, <code>ovh_nodes</code>, <code>activity_to_routing</code>, <code>elem_to_ovh</code> </li> <li>skeleton: <code>rule_sets</code>, <code>rules</code>, <code>rule_scope</code></li> <li>Compat Views (in <code>db/schema.py</code>):  </li> <li><code>v_labor_cost_unit_total</code>, <code>v_opr_cost_unit_total</code>, <code>v_ovh_cost_unit</code>, <code>v_driver_catalog</code>, <code>v_driver_values</code></li> <li>ETL Adapter (minimal):  </li> <li>Populate <code>driver_values</code> for HOURS (PLAN) from existing prod budget \u00d7 routing hours (re\u2011use current helpers).  </li> <li>One month sample data path via existing loaders; ensure idempotent inserts keyed by <code>(set_id, period, driver_code, product_id, cc_id)</code>.</li> <li>Quality Checks: </li> <li>SQL for coverage of HOURS (no NULL recipients for CC in sample month).  </li> <li>Basic index hints.</li> </ol>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li><code>ensure_schema(conn)</code> creates new tables &amp; views without errors on an empty db.  </li> <li>Running the sample ETL writes HOURS rows into <code>driver_values</code> and <code>v_driver_values</code> shows them.  </li> <li>Legacy labor cost unit report returns identical totals for the sample month via <code>v_labor_cost_unit_total</code>.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#hints-for-the-assistant-what-to-readmodify","title":"Hints for the Assistant (what to read/modify)","text":"<ul> <li>Look into: <code>db/schema.py</code> (ensure_*), <code>calc/item_cost.py</code>, existing labor/opr/ovh rate builders.  </li> <li>Prefer views to mimic old wide tables from new long ones.  </li> <li>Use consistent naming: snake_case, singular table names, clear PK/UK.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseA/#out-of-scope-phase-a","title":"Out of Scope (Phase A)","text":"<ul> <li>No allocation engine yet; no UI changes; no variance bridges.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseB/","title":"VS Code \u2014 gpt\u20115\u2011codex Task Spec (Phase B)","text":"<p>Context: Phase A delivered core tables/views and HOURS(PLAN) ETL. Now we implement Allocation Engine v1 and first end\u2011to\u2011end slice (Labor Direct via CC 25410).</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseB/#objective-phase-b","title":"Objective (Phase B)","text":"<p>1) Implement Allocation Engine v1 (weights-based) operating on <code>driver_values</code> and <code>rule_*</code>. 2) Deliver Labor Direct (PLAN) E2E: CC 25410 \u00d7 MFC_PRIM_1 \u2192 products, write to <code>cost_allocations</code> and produce <code>cogs_unit</code>.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseB/#constraints","title":"Constraints","text":"<ul> <li>SQLite, no external services. Non-destructive changes. Preserve Phase A compat views.</li> <li>Deterministic, idempotent writes keyed by (period, scenario, component_code, product_id, cc_id, rule_id).</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseB/#deliverables","title":"Deliverables","text":"<ol> <li>Core logic</li> <li>Module <code>calc/alloc_engine.py</code> with function:      <code>apply_allocations(conn, period, scenario, rule_set_id)</code>      Steps:         a) Build effective rule map via <code>v_allocation_rule_effective</code>.        b) For each (cc, elem) pool in OPEX (PLAN) find driver and recipient set.        c) Compute weights from <code>driver_values</code>.        d) Write to <code>cost_allocations</code> with lineage (src rows, rule_id, weight).</li> <li> <p>Helper to compute Labor Direct amounts equivalently by weights or by rate for validation.</p> </li> <li> <p>Lineage</p> </li> <li> <p>Table <code>lineage_links(src_table, src_pk, dst_table, dst_pk, rule_id, run_id)</code> and writes from engine.</p> </li> <li> <p>Views &amp; Reports</p> </li> <li> <p><code>v_alloc_lineage</code> (audit), <code>v_cogs_unit</code> (unit cost per product &amp; component), <code>v_recon_checks</code> (\u03a3pools==\u03a3allocated).</p> </li> <li> <p>CLI</p> </li> <li><code>tools/alloc_apply.py --period YYYY-MM --scenario PLAN --rule-set DEFAULT_2026</code></li> </ol>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseB/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>Running the CLI allocates CC 25410 MFC_PRIM_1 pool to products using HOURS(PLAN), no leftovers, recon=0.</li> <li><code>v_cogs_unit</code> shows \u201cLabor Direct\u201d amounts; parity between weights\u2011based and rate\u2011based calculations.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseB/#hints","title":"Hints","text":"<ul> <li>Reuse existing SUMs from fact_opex and routing hours to cross-check.</li> <li>Use transactions per period and batch inserts.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/","title":"VS Code \u2014 gpt-5-codex Task Spec (Phase C)","text":"<p>\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442: Phase A \u0434\u0430\u043b \u0435\u0434\u0438\u043d\u044b\u0439 \u0441\u043b\u043e\u0439 <code>drivers/driver_values/cost_rates/fact_measures</code> \u0438 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0435 \u0432\u044c\u044e\u0445\u0438. Phase B \u0432\u043d\u0435\u0434\u0440\u0438\u043b <code>cost_allocations</code>, <code>v_allocation_rule_effective</code>, lineage \u0438 \u043f\u0435\u0440\u0432\u044b\u0439 E2E (LABOR_DIRECT \u043d\u0430 HOURS). \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0441\u0451 \u043d\u0430 \u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439 \u0438 \u0434\u0435\u043c\u043e\u043d\u0442\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0430\u0440\u043e\u0435 \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u0438 \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#_1","title":"\u0426\u0435\u043b\u0438","text":"<p>1) \u041f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438\u0437 driver_values / cost_rates (\u0438 \u043d\u043e\u0432\u044b\u0445 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0439). 2) \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u00ab\u0448\u0438\u0440\u043e\u043a\u0438\u0435\u00bb \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u043c\u0438 <code>VIEW</code> \u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u043c\u0451\u0440\u0442\u0432\u044b\u0439 \u043a\u043e\u0434/\u0441\u0445\u0435\u043c\u0443. 3) \u0420\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u043f\u043e\u043a\u0440\u044b\u0442\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432: <code>DEPR_OPR</code>, <code>OVH_LOG</code>, <code>OVH_ADM</code>, \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 (Facilities/AREA_SHARE \u0438 \u0442.\u043f.). 4) \u0423\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c: \u0438\u043d\u0434\u0435\u043a\u0441\u044b, \u0431\u0430\u0442\u0447\u0438, \u043a\u044d\u0448\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. 5) \u0421\u043e\u0431\u0440\u0430\u0442\u044c \u0442\u0435\u0441\u0442-\u043f\u0430\u043a: unit + \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f + golden datasets (\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b 1:1).</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#_2","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>SQLite (single-writer) \u2014 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0431\u0430\u0442\u0447\u0430\u043c\u0438, \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.  </li> <li>\u041d\u0435\u0440\u0430\u0437\u0440\u0443\u0448\u0430\u044e\u0449\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 <code>VIEW</code>-\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u043f\u043e\u0442\u043e\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435.  </li> <li>\u042d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b (golden) \u0434\u043b\u044f 2\u20133 \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u043e\u0442\u0447\u0451\u0442\u0430\u043c.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#deliverables","title":"\u041f\u0435\u0440\u0438\u043c\u0435\u0442\u0440 \u0440\u0430\u0431\u043e\u0442 \u0438 Deliverables","text":""},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#1","title":"1) \u041c\u0438\u0433\u0440\u0430\u0446\u0438\u044f \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 (\u043d\u0430 \u043d\u043e\u0432\u044b\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438)","text":"<ul> <li>\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u0438 \u0441\u0431\u043e\u0440\u043a\u0438 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u043e\u043d\u0438 \u0447\u0438\u0442\u0430\u043b\u0438:  </li> <li>\u0431\u0430\u0437\u044b/\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u2192 \u0438\u0437 <code>driver_values</code> (HOURS, MATCOST, PAYROLL_OTHER, AREA_SHARE\u2026)  </li> <li>\u0441\u0442\u0430\u0432\u043a\u0438/\u0442\u0430\u0440\u0438\u0444\u044b \u2192 \u0438\u0437 <code>cost_rates</code> (\u0432\u043c\u0435\u0441\u0442\u043e <code>labor_cost_unit</code>, <code>opr_rates_snapshot</code>, <code>ovh_tariffs</code> \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e)  </li> <li>\u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u2192 \u0447\u0435\u0440\u0435\u0437 <code>v_allocation_rule_effective</code> (\u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 elem-\u0433\u0440\u0443\u043f\u043f \u0438 closure)</li> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430: \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439 \u0444\u043b\u0430\u0436\u043e\u043a <code>use_legacy=false</code> \u0438 \u043e\u0442\u0447\u0451\u0442 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b vs legacy.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#2-view","title":"2) \u0421\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0435 <code>VIEW</code> \u0438 \u0434\u0435\u043c\u043e\u043d\u0442\u0430\u0436","text":"<ul> <li>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u0448\u0438\u0440\u043e\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b <code>*_cost_unit*</code>, <code>*_rates*</code> \u043d\u0430 <code>VIEW</code> \u043f\u043e\u0432\u0435\u0440\u0445 \u043d\u043e\u0432\u044b\u0445 \u0441\u043b\u043e\u0451\u0432:  </li> <li><code>v_labor_cost_unit_total</code>, <code>v_opr_cost_unit_total</code>, <code>v_ovh_cost_unit</code> \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u2014 \u0434\u043e\u0432\u0435\u0441\u0442\u0438 \u0434\u043e \u043f\u0430\u0440\u0438\u0442\u0435\u0442\u0430.  </li> <li>\u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0451\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0438\u0442\u0435\u0442\u0430:  </li> <li>\u0443\u0434\u0430\u043b\u0438\u0442\u044c \u00ab\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0438\u00bb \u0432 \u044d\u0442\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u0441\u0442\u0430\u0440\u044b\u0435 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u044b),  </li> <li>\u043f\u043e\u043c\u0435\u0442\u0438\u0442\u044c \u0441\u0430\u043c\u0438 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e (\u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f vX+1) \u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e <code>VIEW</code> (\u0438\u043b\u0438 \u0430\u043b\u0438\u0430\u0441\u044b).</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#3-depr_opr-ovh_log-ovh_adm","title":"3) \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (DEPR_OPR, OVH_LOG, OVH_ADM, \u2026)","text":"<ul> <li>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430/\u0441\u0442\u0430\u0432\u043a\u0438/\u0431\u0430\u0437\u044b \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442:  </li> <li><code>DEPR_OPR</code>: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043b\u0438 \u0438\u0437 <code>ovh_nodes/ovh_tariffs</code> \u0438\u043b\u0438 <code>cost_rates</code> (\u0433\u043e\u0434\u043e\u0432\u044b\u0435 \u0434\u043e\u043b\u0438 \u2192 \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0440\u0430\u0441\u043a\u043b\u0430\u0434\u043a\u0430).  </li> <li><code>OVH_LOG</code>, <code>OVH_ADM</code>: \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c <code>driver_code</code> (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, MATCOST/QTY/PAYROLL_OTHER/AREA_SHARE), \u0437\u0430\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043f\u043e CC\u00d7elem-\u0433\u0440\u0443\u043f\u043f\u0430\u043c.  </li> <li>E2E \u043f\u0440\u043e\u0433\u043e\u043d \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0435 \u2192 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 <code>cost_allocations</code> \u2192 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u0435 \u0432 <code>v_cogs_unit</code>.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#4-performance-hardening","title":"4) Performance hardening","text":"<ul> <li>\u0418\u043d\u0434\u0435\u043a\u0441\u044b:  </li> <li><code>driver_values(period, driver_code, scenario, set_id) WHERE value&gt;0 OR is_explicit_zero=1</code> (partial)  </li> <li><code>cost_allocations(period, scenario, component_code)</code> </li> <li><code>lineage_links(rule_id, run_id)</code> </li> <li><code>rule_scope_resolved(rule_set_id, cc_leaf_id, elem_leaf_id)</code> (\u0435\u0441\u043b\u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e)</li> <li>\u0411\u0430\u0442\u0447\u0438/\u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438: \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u0430\u0447\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043e\u043a \u0432 <code>cost_allocations</code> (\u043d\u0430\u043f\u0440., 5\u201320k \u0441\u0442\u0440\u043e\u043a).  </li> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u00ab\u0442\u044f\u0436\u0451\u043b\u044b\u0445\u00bb \u0432\u044c\u044e\u0445: \u043f\u0440\u0435\u0434-\u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c <code>rule_scope_resolved</code> \u0438 (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438) \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0434\u043b\u044f <code>v_cogs_unit</code>.  </li> <li>\u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 (<code>active_scenarios</code>, <code>active_rule_set</code>) \u0432 \u043f\u0430\u043c\u044f\u0442\u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0441 TTL.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#5-","title":"5) \u0422\u0435\u0441\u0442-\u043f\u0430\u043a","text":"<ul> <li>Unit: \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043d\u044b\u0435 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0440\u044b, \u0441\u0442\u0430\u0432\u043a\u0438 (rate = pool/base), \u0432\u044b\u0431\u043e\u0440 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 (specificity/priority).  </li> <li>Integration: \u043f\u043e\u043b\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u043e\u043d \u043f\u0435\u0440\u0438\u043e\u0434\u0430 (Plan \u0438 Act) \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0440\u0435\u043a\u043e\u043d\u0441\u0438\u043b\u044f\u0446\u0438\u0439 (\u03a3pools == \u03a3alloc).  </li> <li>Golden datasets: \u0444\u0438\u043a\u0441\u0430\u0446\u0438\u044f \u044d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0434\u043b\u044f 2\u20133 \u043c\u0435\u0441\u044f\u0446\u0435\u0432. \u0410\u0432\u0442\u043e\u0442\u0435\u0441\u0442: \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043e\u0442\u0447\u0451\u0442\u043e\u0432 (\u043d\u043e\u0432\u044b\u0439 \u0441\u043b\u043e\u0439) vs legacy \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0441\u0443\u043c\u043c \u0438 unit-\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438; \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c\u0430\u044f \u0434\u0435\u043b\u044c\u0442\u0430 = 0.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#_3","title":"\u041f\u043e\u0448\u0430\u0433\u043e\u0432\u044b\u0439 \u043f\u043b\u0430\u043d \u0432\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u044f","text":""},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#sprint-c1-views","title":"Sprint C1 \u2014 \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 + Views","text":"<p>1) \u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0447\u0442\u0435\u043d\u0438\u0435 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432 \u043d\u0430 <code>driver_values/cost_rates</code> \u0441 \u0444\u043b\u0430\u0433\u043e\u043c <code>use_legacy=false</code> (\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 \u0432 \u043e\u0442\u0447\u0451\u0442 \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f). 2) \u0414\u043e\u0432\u0435\u0441\u0442\u0438 <code>VIEW</code>-\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c (legacy \u0438\u043c\u0435\u043d\u0430/\u0442\u0438\u043f\u044b). 3) \u0421\u0440\u0430\u0432\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043e\u0442\u0447\u0451\u0442\u044b \u0437\u0430 \u043c\u0435\u0441\u044f\u0446 M (golden). \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f. \u0412\u044b\u0445\u043e\u0434: \u043e\u0442\u0447\u0451\u0442\u044b \u0437\u0430 M \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 1:1.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#sprint-c2-depr_opr-ovh_log-ovh_adm","title":"Sprint C2 \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b DEPR_OPR, OVH_LOG, OVH_ADM","text":"<p>1) \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 (rule_scope) \u043f\u043e elem-\u0433\u0440\u0443\u043f\u043f\u0430\u043c \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c CC. 2) \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c/\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b (\u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043d\u043e\u0432\u044b\u0435: QTY/AREA_SHARE). 3) \u041f\u0440\u043e\u0433\u043d\u0430\u0442\u044c E2E \u0438 \u043f\u0440\u043e\u0439\u0442\u0438 <code>v_recon_checks</code>. \u0412\u044b\u0445\u043e\u0434: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 <code>cogs_unit</code>, \u0441\u0432\u0435\u0440\u043a\u0438 = 0.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#sprint-c3","title":"Sprint C3 \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0434\u0435\u043c\u043e\u043d\u0442\u0430\u0436","text":"<p>1) \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b, \u0431\u0430\u0442\u0447\u0438; \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c <code>rule_scope_resolved</code> (\u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e). 2) \u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0438; \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e <code>VIEW</code>-\u0430\u043b\u0438\u0430\u0441\u044b. 3) Golden-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0437\u0430 3 \u043c\u0435\u0441\u044f\u0446\u0430 (\u0432\u043a\u043b. \u00ab\u0442\u044f\u0436\u0451\u043b\u044b\u0439\u00bb \u043c\u0435\u0441\u044f\u0446). \u0412\u044b\u0445\u043e\u0434: \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0433\u043e\u043d\u0430 \u0438 \u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435.</p>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#exit-criteria-phase-c","title":"\u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043f\u0440\u0438\u0451\u043c\u043a\u0438 (Exit Criteria Phase C)","text":"<ul> <li>\u2705 \u0412\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043e\u0442\u0447\u0451\u0442\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430 \u043d\u043e\u0432\u043e\u043c \u0441\u043b\u043e\u0435 \u0441 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u043f\u0430\u0440\u0438\u0442\u0435\u0442\u043e\u043c (golden months = OK).  </li> <li>\u2705 \u0421\u0442\u0430\u0440\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b/\u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u044b \u043b\u0438\u0431\u043e \u0443\u0434\u0430\u043b\u0435\u043d\u044b, \u043b\u0438\u0431\u043e \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 <code>VIEW</code>-\u0430\u043b\u0438\u0430\u0441\u044b; \u043d\u0435\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043d\u0430 \u0438\u0445 \u00ab\u043f\u0440\u043e\u0448\u043b\u044b\u0435\u00bb \u043f\u0438\u0441\u0430\u0442\u0435\u043b\u0438.  </li> <li>\u2705 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b <code>LABOR_DIRECT</code>, <code>DEPR_OPR</code>, <code>OVH_LOG</code>, <code>OVH_ADM</code> (\u0438 \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435) \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 <code>cost_allocations</code> \u0438 \u0432\u0438\u0434\u043d\u044b \u0432 <code>v_cogs_unit</code>.  </li> <li>\u2705 \u0420\u0435\u043a\u043e\u043d\u0441\u0438\u043b\u044f\u0446\u0438\u0438 <code>v_recon_checks</code> \u0434\u0430\u044e\u0442 \u0441\u0443\u043c\u043c\u0443 \u0434\u0435\u043b\u044c\u0442 = 0 \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c/\u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0442\u0435\u0441\u0442\u0430.  </li> <li>\u2705 \u0422\u0435\u0441\u0442-\u043f\u0430\u043a \u0437\u0435\u043b\u0451\u043d\u044b\u0439: unit, integration, golden; CI job \u043f\u0440\u043e\u0433\u043e\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#_4","title":"\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 \u043f\u043e \u043a\u043e\u0434\u0443/\u0444\u0430\u0439\u043b\u0430\u043c","text":"<ul> <li>\u0413\u0434\u0435 \u043c\u0435\u043d\u044f\u0442\u044c: <code>calc/*</code> \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u044b, <code>db/schema.py</code> (\u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 v8+), <code>calc/alloc_engine.py</code>, <code>ui/*</code> (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u2014 \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b).  </li> <li>\u0427\u0442\u043e \u0447\u0438\u0442\u0430\u0442\u044c: <code>v_allocation_rule_effective</code>, <code>driver_values</code>, <code>cost_rates</code>, <code>v_cogs_unit</code>, <code>v_recon_checks</code>.  </li> <li>\u0421\u0442\u0438\u043b\u044c: \u043e\u0434\u0438\u043d \u043a\u0430\u0440\u043a\u0430\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 (\u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u2014 \u0432 <code>component_code</code> \u0438 <code>driver_code</code>), \u0431\u0435\u0437 \u0440\u0430\u0437\u0432\u0435\u0442\u0432\u043b\u0435\u043d\u0438\u044f \u00ab\u043f\u043e \u0442\u0438\u043f\u0430\u043c\u00bb.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#_5","title":"\u0420\u043e\u043b\u043b\u0430\u0443\u0442 &amp; \u043e\u0442\u043a\u0430\u0442","text":"<ul> <li>\u0424\u0438\u0447\u0430-\u0444\u043b\u0430\u0433\u0438: <code>use_new_layer</code>, <code>use_legacy_views_only</code>, <code>materialize_rules</code>.  </li> <li>\u041e\u0442\u043a\u0430\u0442: \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c <code>VIEW</code>-\u0430\u043b\u0438\u0430\u0441\u044b \u0438 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0444\u043b\u0430\u0433\u0438 \u043d\u0430 legacy-\u0447\u0442\u0435\u043d\u0438\u0435 (\u0434\u043e \u0444\u0438\u043a\u0441\u0430).  </li> <li>\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433: \u043b\u043e\u0433 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u044d\u0442\u0430\u043f\u043e\u0432 (ETL/alloc/report), \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0430\u0431\u043b\u0438\u0446, \u0441\u0447\u0451\u0442\u0447\u0438\u043a \u00ab\u0434\u0435\u043b\u044c\u0442 \u2260 0\u00bb \u0432 <code>v_recon_checks</code>.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_PhaseC/#_6","title":"\u0420\u0438\u0441\u043a\u0438 \u0438 \u043c\u0435\u0440\u044b","text":"<ul> <li>\u0420\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u0435\u043b \u2192 golden-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043f\u0440\u0438\u043d\u0442\u0435; lineage \u0434\u043b\u044f \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0438.  </li> <li>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u2192 \u0438\u043d\u0434\u0435\u043a\u0441\u044b/\u0431\u0430\u0442\u0447\u0438/\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f; \u0438\u0437\u0431\u0435\u0433\u0430\u0442\u044c N\u00d7recompute.  </li> <li>\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 UI \u2192 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0441\u0445\u0435\u043c\u044b \u0441\u0442\u0430\u0440\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 <code>VIEW</code> \u0434\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</li> </ul>"},{"location":"zz_old/backup/CODEX_SPEC_Reconcile_Pools_vs_Allocations/","title":"\u041f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0437\u0430\u0442\u0440\u0430\u0442","text":"<p>VS Code \u2014 gpt-5-codex Task Spec: \u201cPools\u2192Allocations\u2192v_cogs_unit (no *unit deps)\u201d \u0426\u0435\u043b\u044c</p> <p>\u041f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0440\u0430\u0441\u0447\u0451\u0442 LABOR_DIRECT (\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442) \u043d\u0430 \u043d\u043e\u0432\u0443\u044e \u043e\u0441\u044c:</p> <p>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u0443\u043b\u0430 \u2014 OPEX \u0431\u044e\u0434\u0436\u0435\u0442/\u0444\u0430\u043a\u0442 \u043f\u043e (period, cc, elem_group).</p> <p>\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u2014 \u0438\u0437 \u043f\u0443\u043b\u0430 \u0432 cost_allocations \u043f\u043e \u0432\u0435\u0441\u0430\u043c \u0438\u0437 driver_values (HOURS \u0438 \u0434\u0440.).</p> <p>\u041e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u044c \u2014 v_cogs_unit \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 cost_allocations (\u0430 \u043d\u0435 \u0438\u0437 unit).</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0441\u0442\u0438 \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u00abrate-parity\u00bb \u043e\u0442\u0447\u0451\u0442 (\u043d\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a!), \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u00abrouting \u00d7 rate \u00d7 qty\u00bb \u0438 \u0441\u0432\u0435\u0440\u044f\u0435\u0442 \u0435\u0451 \u0441 \u043f\u0443\u043b\u043e\u043c OPEX (\u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u22480).</p> <p>\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0437\u0430\u0434\u0430\u0447</p> <p>\u0414\u0430: \u043f\u0435\u0440\u0435\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0432\u0438\u0436\u043a\u0430 \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0439 \u0438 \u0432\u044c\u044e; \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 parity-\u043e\u0442\u0447\u0451\u0442\u0430; \u043e\u0442\u043a\u0430\u0437 \u043e\u0442 \u0447\u0442\u0435\u043d\u0438\u044f unit \u0432 \u0440\u0430\u0441\u0447\u0451\u0442\u0435.</p> <p>\u041d\u0435\u0442: \u043f\u0435\u0440\u0435\u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0440\u044b\u0445 unit; UI-\u0440\u0435\u0442\u0443\u0448\u044c \u2014 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f (\u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445).</p> <p>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u043e\u044f\u043c 1) \u041f\u0443\u043b\u044b \u0437\u0430\u0442\u0440\u0430\u0442 (\u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u0438\u0441\u0442\u0438\u043d\u044b)</p> <p>\u0412\u0432\u0435\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 v_component_pools(period, scenario, cc_id, component_code, amount):</p> <p>\u0414\u043b\u044f LABOR_DIRECT: component_code='LABOR_DIRECT', \u0441\u0443\u043c\u043c\u0430 \u0438\u0437 OPEX-\u0431\u044e\u0434\u0436\u0435\u0442\u0430/\u0444\u0430\u043a\u0442\u0430 \u043f\u043e elem_group IN (MFC_PRIM_1, \u2026) \u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c CC.</p> <p>\u041e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c\u043e\u0441\u0442\u044c \u0434\u043b\u044f OPR/DEPR/OVH_* \u0447\u0435\u0440\u0435\u0437 \u0438\u0445 elem_group/ovh_nodes.</p> <p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a unit \u043a\u0430\u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0443 \u043f\u0443\u043b\u0430.</p> <p>2) \u0410\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438 (\u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442\u043d\u044b\u0439 \u0432\u044b\u0445\u043e\u0434)</p> <p>calc/alloc_engine.apply_allocations(period, scenario, rule_set_id, components=None):</p> <p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0430\u0440\u044b (cc_leaf, component_code) \u0431\u0435\u0440\u0451\u043c pool = v_component_pools.</p> <p>\u0421\u0442\u0440\u043e\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u0435\u0439 (product_id, cc_leaf) \u0438 weights \u0438\u0437 driver_values \u043f\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 driver_code \u0438\u0437 \u043f\u0440\u0430\u0432\u0438\u043b.</p> <p>\u041f\u0438\u0448\u0435\u043c \u0432 cost_allocations(period, scenario, component_code, product_id, cc_id, rule_id, amount, weight, run_id).</p> <p>\u041f\u0440\u0430\u0432\u0438\u043b\u0430 (v_allocation_rule_effective) \u0443\u0436\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442 elem-scope \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c.</p> <p>3) v_cogs_unit (\u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 allocations)</p> <p>\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c v_cogs_unit \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b:</p> <p>\u0441\u0443\u043c\u043c\u044b \u043f\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 cost_allocations,</p> <p>\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 qty \u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u043f\u043b\u0430\u043d\u0430/\u0444\u0430\u043a\u0442\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430, \u0431\u0435\u0437 unit,</p> <p>MATCOST (\u0435\u0441\u043b\u0438 \u0443\u0436\u0435 \u043f\u043e\u0434\u043c\u0435\u0448\u0438\u0432\u0430\u043b\u0438 \u0438\u0437 driver_values) \u2014 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a \u0435\u0441\u0442\u044c \u0438\u043b\u0438 \u0442\u043e\u0436\u0435 \u0447\u0435\u0440\u0435\u0437 cost_allocations, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u044f\u0432\u0438\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e.</p> <p>4) \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u201cRate-parity\u201d \u043e\u0442\u0447\u0451\u0442 (\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f, \u043d\u0435 \u0440\u0430\u0441\u0447\u0451\u0442)</p> <p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 v_rate_parity(period, scenario, cc_id, component_code, pool_from_opex, sum_routing_rate_qty, delta):</p> <p>pool_from_opex: \u0438\u0437 v_component_pools.</p> <p>sum_routing_rate_qty: \u03a3 \u043f\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430\u043c \u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e CC: routing_flat.std_hours_per_unit \u00d7 rate_per_hour(cc) \u00d7 qty(product, period, scenario).</p> <p>\u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a rate_per_hour(cc) \u2014 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438: \u0438\u0437 cost_rates (\u043f\u0440\u0438\u0433\u043e\u0434\u043d\u043e) \u0438\u043b\u0438 legacy unit (\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u043d\u043e \u043f\u043e\u043c\u0435\u0447\u0435\u043d\u043e \u043a\u0430\u043a deprecated).</p> <p>delta = pool_from_opex \u2212 sum_routing_rate_qty (\u043e\u0436\u0438\u0434\u0430\u0435\u043c \u22480 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0439).</p> <p>CLI tools/alloc_parity_check.py --period YYYY-MM --scenario PLAN --component LABOR_DIRECT --cc 25410.</p> <p>\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430 / \u043c\u0435\u0441\u0442\u0430 \u043f\u0440\u0430\u0432\u043e\u043a calc/alloc_engine.py</p> <p>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0435\u0442\u043a\u0438, \u0433\u0434\u0435 \u043f\u0443\u043b \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u043b\u0441\u044f \u0447\u0435\u0440\u0435\u0437 unit; \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0440\u0430\u0442\u044c \u0438\u0437 v_component_pools.</p> <p>\u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u00abpolicy=weights\u00bb \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0440\u0435\u0436\u0438\u043c (rate \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f parity-\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 allocations).</p> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043b\u043e\u0433 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0439: \u0435\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u0432\u0435\u0441\u043e\u0432 = 0 \u2192 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443 fallback \u0438\u0437 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u043b\u0438 \u0443\u043f\u0430\u0441\u0442\u044c \u0441 \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0439 \u043e\u0448\u0438\u0431\u043a\u043e\u0439.</p> <p>db/schema.py (\u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f v12+)</p> <p>\u041d\u043e\u0432\u0430\u044f \u0432\u044c\u044e\u0445\u0430 v_component_pools (LABOR_DIRECT \u043c\u0438\u043d\u0438\u043c\u0443\u043c).</p> <p>\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c v_cogs_unit, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u043b unit.</p> <p>\u041d\u043e\u0432\u0430\u044f \u0432\u044c\u044e\u0445\u0430 v_rate_parity.</p> <p>(\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u0444\u0438\u0447\u0430-\u0444\u043b\u0430\u0433 settings.no_unit_reads = 1 (\u0442\u0430\u0431\u043b\u0438\u0446\u0430 app_settings \u0438\u043b\u0438 pragma-view) \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 UI \u0438 \u0434\u0432\u0438\u0436\u043a\u0435 \u0434\u043b\u044f \u00ab\u0436\u0451\u0441\u0442\u043a\u043e\u0433\u043e\u00bb \u0437\u0430\u043f\u0440\u0435\u0442\u0430.</p> <p>ui/*</p> <p>\u0412\u0441\u0435 \u044d\u043a\u0440\u0430\u043d\u044b, \u0433\u0434\u0435 \u0431\u044b\u043b\u043e \u0447\u0442\u0435\u043d\u0438\u0435 unit \u0434\u043b\u044f LABOR_DIRECT, \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043d\u0430 v_cogs_unit + v_rate_parity (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0441\u0432\u0435\u0440\u043e\u043a).</p> <p>\u0412 Allocation Wizard (\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0438\u0442\u043e\u0433\u043e\u0432) \u2014 \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u0431\u043b\u043e\u043a \u201cParity LABOR_DIRECT\u201d: pool vs rate-\u0441\u0443\u043c\u043c\u0430 \u0438 \u0434\u0435\u043b\u044c\u0442\u0430.</p> <p>tools/*</p> <p>tools/alloc_apply.py \u2014 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u043d\u043e \u0440\u0430\u0441\u0447\u0451\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 unit.</p> <p>\u041d\u043e\u0432\u044b\u0439 tools/alloc_parity_check.py (\u0441\u043c. \u0432\u044b\u0448\u0435).</p> <p>\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 Acceptance Criteria</p> <p>apply_allocations \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 cost_allocations \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 v_component_pools, \u043d\u0435 \u0447\u0438\u0442\u0430\u044f unit.</p> <p>v_cogs_unit = \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u0438\u0437 cost_allocations / qty; \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c \u043e\u0442\u0447\u0451\u0442\u043e\u043c \u043f\u043e LABOR_DIRECT \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043c\u0435\u0441\u044f\u0446\u0435.</p> <p>v_rate_parity.delta \u2248 0 \u043d\u0430 LABOR_DIRECT (25410, \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446).</p> <p>v_recon_checks \u043f\u043e LABOR_DIRECT \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u03a3pool == \u03a3alloc (\u0434\u0435\u043b\u044c\u0442\u0430=0).</p> <p>\u041f\u043e\u0438\u0441\u043a \u0432 \u043a\u043e\u0434\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u044f\u043c\u044b\u0445 \u0447\u0442\u0435\u043d\u0438\u0439 unit \u0432 \u0440\u0430\u0441\u0447\u0451\u0442\u0435 (\u0442\u043e\u043b\u044c\u043a\u043e \u0432 parity-view \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e).</p> <p>\u0422\u0435\u0441\u0442\u044b</p> <p>Unit:</p> <p>\u0432\u044b\u0431\u043e\u0440 \u043f\u0440\u0430\u0432\u0438\u043b (specificity/priority),</p> <p>\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0432\u0435\u0441\u043e\u0432 \u043f\u043e driver_values,</p> <p>\u0437\u0430\u0449\u0438\u0442\u0430 \u043e\u0442 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0441\u0443\u043c\u043c\u044b \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0430 (fallback/\u043e\u0448\u0438\u0431\u043a\u0430).</p> <p>Integration (golden):</p> <p>\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043c\u0435\u0441\u044f\u0446 YYYY-MM, CC=25410, \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 LABOR_DIRECT:</p> <p>\u03a3alloc == pool (\u0438\u0437 OPEX),</p> <p>v_cogs_unit \u0440\u0430\u0432\u0435\u043d legacy-\u043e\u0442\u0447\u0451\u0442\u0443,</p> <p>v_rate_parity.delta \u0432 \u0434\u043e\u043f\u0443\u0441\u043a\u0435 (\u00b10.1% \u0438\u043b\u0438 1 \u0440\u0443\u0431 \u043d\u0430 CC).</p> <p>Smoke:</p> <p>CLI alloc_apply \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a, \u043f\u0438\u0448\u0435\u0442 run_id,</p> <p>CLI alloc_parity_check \u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 \u0434\u0435\u043b\u044c\u0442\u0443 \u0438 \u0442\u043e\u043f-\u0440\u0430\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0438 codex (\u043a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u043e)</p> <p>v_component_pools \u0434\u043b\u044f LABOR_DIRECT: SELECT period, scenario, cc_id, 'LABOR_DIRECT' AS component_code, SUM(amount) AS amount FROM fact_opex JOIN elem_nodes \u2026 WHERE elem_group IN ('MFC_PRIM_1',\u2026) GROUP BY \u2026.</p> <p>v_rate_parity.sum_routing_rate_qty: \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u044c routing_flat (std_hours_per_unit \u00d7 product_id \u00d7 cc_id) \u0441 prod_budget (qty) \u0438 cost_rates (rate_per_hour \u043f\u043e cc_id).</p> <p>\u0414\u043b\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438: \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043d\u0430 fact_opex(period, cc_id, elem_id), driver_values(period, driver_code), cost_allocations(period, component_code).</p> <p>\u041d\u0435 \u043f\u043b\u043e\u0434\u0438\u0442\u044c \u043d\u0443\u043b\u0435\u0432\u044b\u0435 driver_values \u2014 \u0432\u0435\u0441\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043e value &gt; 0 (\u0438\u043b\u0438 is_explicit_zero=1).</p> <p>\u0414\u0435\u043a\u043e\u043c\u0438\u0441\u0441\u0438\u044f unit (\u043f\u043e\u0441\u0442-\u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435)</p> <p>\u041f\u043e\u043c\u0435\u0442\u0438\u0442\u044c unit \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u043a\u0430\u043a deprecated.</p> <p>\u041e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0435 VIEW \u0434\u043b\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 (\u0435\u0441\u043b\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f UI/legacy), \u043d\u043e \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u043d\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0440\u0430\u0441\u0447\u0451\u0442\u043d\u043e\u043c \u043f\u0443\u0442\u0438.</p>"},{"location":"zz_old/backup/DATA_DICTIONARY/","title":"DATA_DICTIONARY","text":""},{"location":"zz_old/backup/DATA_DICTIONARY/#elem_nodes","title":"elem_nodes","text":"column type note elem_id TEXT PK name TEXT level_no INT \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0443\u0440\u043e\u0432\u043d\u044f \u0438\u0437 Excel node_type TEXT 'GROUP' / 'LEAF' parent_id TEXT \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430/\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f"},{"location":"zz_old/backup/DATA_DICTIONARY/#elem_edges","title":"elem_edges","text":"column type note parent_id TEXT FK \u2192 elem_nodes.elem_id child_id TEXT FK \u2192 elem_nodes.elem_id <p>\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447: (parent_id, child_id). \u0423 \u043b\u0438\u0441\u0442\u044c\u0435\u0432 \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u0438\u043d \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c.</p>"},{"location":"zz_old/backup/DATA_DICTIONARY/#cc_nodes","title":"cc_nodes","text":"column type note cc_id TEXT PK name TEXT level_no INT \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 (1..6 \u0438\u043b\u0438 7 \u0434\u043b\u044f leaf) node_type TEXT 'GROUP' / 'LEAF' parent_id TEXT company_code TEXT \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 CCG ext_code TEXT \u0440\u0435\u0437\u0435\u0440\u0432 person TEXT \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 CCG"},{"location":"zz_old/backup/DATA_DICTIONARY/#cc_edges","title":"cc_edges","text":"<p>\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e <code>elem_edges</code> (parent_id, child_id).</p>"},{"location":"zz_old/backup/DATA_DICTIONARY/#elem_map_rules","title":"elem_map_rules","text":"column type note rule_id (PK) INT AUTOINCREMENT enabled INT 1/0 priority INT \u043c\u0435\u043d\u044c\u0448\u0435 \u2014 \u0432\u0430\u0436\u043d\u0435\u0435 (\u043d\u0430\u043f\u0440., 100 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0435\u0435 500) cost_type TEXT \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u043e Cost type account_descr_pattern TEXT \u0448\u0430\u0431\u043b\u043e\u043d LIKE \u0434\u043b\u044f Account descr elem_id TEXT \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 weight REAL \u0434\u043e\u043b\u044f/\u0432\u0435\u0441 \u0441\u0442\u0440\u043e\u043a\u0438 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e 1.0) valid_from / valid_to TEXT YYYY-MM-DD note TEXT \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 created_at / updated_at INT unix time <p>\u0418\u043d\u0434\u0435\u043a\u0441\u044b: (priority, enabled), cost_type, account_descr_pattern, elem_id.</p>"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/","title":"Data dictionary (condensed)","text":"<ul> <li>Tables: 35, Views: 3</li> </ul>"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#bom","title":"<code>bom</code>","text":"column type notnull default pk parent_item_id TEXT 1 1 component_item_id TEXT 1 2 qty_per_unit REAL 1 0 valid_from TEXT 1 3 valid_to TEXT 1 0 level INTEGER 1 0 path TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#bom_spec_components","title":"<code>bom_spec_components</code>","text":"column type notnull default pk spec_code TEXT 1 1 line_no INTEGER 1 2 component_id TEXT 1 0 qty_per_spec REAL 1 0 uom TEXT 0 0 operation TEXT 0 0 stage TEXT 0 0 valid_from TEXT 1 '1900-01-01' 3 valid_to TEXT 1 '2999-12-31' 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#bom_specs","title":"<code>bom_specs</code>","text":"column type notnull default pk spec_code TEXT 0 1 product_id TEXT 1 0 batch_size REAL 1 1 0 batch_uom TEXT 0 0 valid_from TEXT 1 '1900-01-01' 0 valid_to TEXT 1 '2999-12-31' 0 is_default INTEGER 1 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#dep_cc_map","title":"<code>dep_cc_map</code>","text":"column type notnull default pk department_code TEXT 0 1 cc_id TEXT 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#depr_cost_unit","title":"<code>depr_cost_unit</code>","text":"column type notnull default pk product_id TEXT 1 1 department_code TEXT 1 2 hours_total REAL 1 0 rate_per_hour REAL 0 0 currency TEXT 0 0 cost_total REAL 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#depr_cost_unit_total","title":"<code>depr_cost_unit_total</code>","text":"column type notnull default pk product_id TEXT 0 1 cost_total REAL 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#depr_rates_snapshot","title":"<code>depr_rates_snapshot</code>","text":"column type notnull default pk department_code TEXT 0 0 cc_id TEXT 0 0 rate_per_hour REAL 1 0 hours_year REAL 0 0 personnel_cost_year REAL 0 0 bud_year INTEGER 0 0 currency TEXT 1 'RUB' 0 source TEXT 0 0 calc_at TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#items","title":"<code>items</code>","text":"column type notnull default pk item_id TEXT 0 1 article TEXT 0 0 name TEXT 0 0 uom TEXT 0 0 is_produced INTEGER 1 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#labor_rates","title":"<code>labor_rates</code>","text":"column type notnull default pk period TEXT 1 1 department_code TEXT 1 2 rate_per_hour REAL 1 0 currency TEXT 1 'RUB' 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#labor_rates_snapshot","title":"<code>labor_rates_snapshot</code>","text":"column type notnull default pk department_code TEXT 0 0 cc_id TEXT 0 0 rate_per_hour REAL 0 0 hours_year REAL 0 0 personnel_cost_year REAL 0 0 bud_year INTEGER 0 0 source TEXT 0 0 calc_at TEXT 0 0 currency TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#mo_catalog","title":"<code>mo_catalog</code>","text":"column type notnull default pk before_item_id TEXT 1 0 after_item_id TEXT 1 0 is_active INTEGER 1 1 0 source TEXT 0 0 loaded_at TEXT 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#mo_cost_unit","title":"<code>mo_cost_unit</code>","text":"column type notnull default pk product_id TEXT 1 1 component_item_id TEXT 1 2 qty_per_unit REAL 1 0 price REAL 1 0 amount REAL 1 0 currency TEXT 1 'RUB' 0 computed_at TEXT 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#mo_prices_history","title":"<code>mo_prices_history</code>","text":"column type notnull default pk after_item_id TEXT 1 0 price REAL 1 0 currency TEXT 1 'RUB' 0 vendor TEXT 0 0 effective_from TEXT 0 0 effective_to TEXT 0 0 source TEXT 0 0 loaded_at TEXT 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#opex_budget","title":"<code>opex_budget</code>","text":"column type notnull default pk id INTEGER 0 1 load_id TEXT 1 0 cc_id TEXT 1 0 elem_id TEXT 1 0 bud_year INTEGER 1 0 amount REAL 1 0 text_note TEXT 0 0 comments TEXT 0 0 supplier_text TEXT 0 0 source_sheet TEXT 0 0 created_at INTEGER 1 strftime('%s','now') 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#opex_staging","title":"<code>opex_staging</code>","text":"column type notnull default pk id INTEGER 0 1 load_id TEXT 1 0 sheet_name TEXT 0 0 cc_id TEXT 0 0 cost_type TEXT 0 0 account_descr TEXT 0 0 bud_2026 REAL 0 0 text_note TEXT 0 0 comments TEXT 0 0 supplier_text TEXT 0 0 mapped_elem_id TEXT 0 0 missing_cc INTEGER 1 0 0 unmapped_elem INTEGER 1 0 0 bad_amount INTEGER 1 0 0 dup_candidate INTEGER 1 0 0 created_at INTEGER 1 strftime('%s','now') 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#opr_cost_unit","title":"<code>opr_cost_unit</code>","text":"column type notnull default pk product_id TEXT 1 1 department_code TEXT 1 2 hours_total REAL 1 0 rate_per_hour REAL 0 0 currency TEXT 0 0 cost_total REAL 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#opr_cost_unit_total","title":"<code>opr_cost_unit_total</code>","text":"column type notnull default pk product_id TEXT 0 1 cost_total REAL 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#opr_rates_snapshot","title":"<code>opr_rates_snapshot</code>","text":"column type notnull default pk department_code TEXT 0 0 cc_id TEXT 0 0 rate_per_hour REAL 1 0 hours_year REAL 0 0 personnel_cost_year REAL 0 0 bud_year INTEGER 0 0 currency TEXT 1 'RUB' 0 source TEXT 0 0 calc_at TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#ovh_cost_unit","title":"<code>ovh_cost_unit</code>","text":"column type notnull default pk product_id TEXT 0 1 depr_opr_cost REAL 1 0.0 0 log_cost REAL 1 0.0 0 adm_cost REAL 1 0.0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#ovh_flat","title":"<code>ovh_flat</code>","text":"column type notnull default pk product_id TEXT 1 1 overhead_group TEXT 1 2 mat_cost REAL 1 0.0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#ovh_tariffs","title":"<code>ovh_tariffs</code>","text":"column type notnull default pk overhead_group TEXT 1 1 year INTEGER 1 2 scrap_share REAL 0 0 depr_opr_share REAL 0 0 log_share REAL 0 0 adm_share REAL 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#personnel_monthly","title":"<code>personnel_monthly</code>","text":"column type notnull default pk cc_id TEXT 1 1 ym TEXT 1 2 headcount REAL 1 0 source TEXT 0 0 note TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#prod_budget","title":"<code>prod_budget</code>","text":"column type notnull default pk product_id TEXT 1 1 month_code TEXT 1 2 qty REAL 1 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#rm_prices","title":"<code>rm_prices</code>","text":"column type notnull default pk item_code TEXT 1 1 article TEXT 0 0 uom TEXT 0 0 price REAL 1 0 currency TEXT 1 'RUB' 2 source TEXT 0 0 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#routing_operations","title":"<code>routing_operations</code>","text":"column type notnull default pk routing_op_id INTEGER 0 1 routing_id INTEGER 1 0 seq INTEGER 1 0 operation TEXT 1 0 department TEXT 0 0 hours REAL 1 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#routing_tree","title":"<code>routing_tree</code>","text":"column type notnull default pk root_product_id TEXT 0 1 node_product_id TEXT 0 2 level INTEGER 0 0 qty_per_unit REAL 0 0 path TEXT 0 0 routing_id TEXT 0 0 routing_group TEXT 0 0 routing_name TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#routings","title":"<code>routings</code>","text":"column type notnull default pk routing_id INTEGER 0 1 routing_group TEXT 1 0 spec_code TEXT 0 0 item_id TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#run_history","title":"<code>run_history</code>","text":"column type notnull default pk run_id TEXT 0 1 started_at TEXT 0 0 ended_at TEXT 0 0 scope TEXT 0 0 params_json TEXT 0 0 status TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#run_log","title":"<code>run_log</code>","text":"column type notnull default pk run_id TEXT 0 0 step TEXT 0 0 product_id TEXT 0 0 level TEXT 0 0 msg TEXT 0 0 extra_json TEXT 0 0 ts TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#scrap_cost_unit","title":"<code>scrap_cost_unit</code>","text":"column type notnull default pk product_id TEXT 0 1 scrap_cost REAL 1 0.0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#sqlite_sequence","title":"<code>sqlite_sequence</code>","text":"column type notnull default pk name 0 0 seq 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#transfer_batches","title":"<code>transfer_batches</code>","text":"column type notnull default pk batch_id TEXT 0 1 bud_year INTEGER 1 0 rule_id INTEGER 1 0 created_at TEXT 0 datetime('now') 0 created_by TEXT 0 0 comment TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#transfer_opex_items","title":"<code>transfer_opex_items</code>","text":"column type notnull default pk batch_id TEXT 1 1 from_cc_id TEXT 1 2 to_cc_id TEXT 1 3 to_elem_id TEXT 0 0 elem_id TEXT 1 4 amount_delta REAL 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#transfer_personnel_items","title":"<code>transfer_personnel_items</code>","text":"column type notnull default pk id INTEGER 0 1 batch_id TEXT 1 0 from_cc_id TEXT 0 0 to_cc_id TEXT 1 0 headcount_delta REAL 1 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#transfer_rules","title":"<code>transfer_rules</code>","text":"column type notnull default pk rule_id INTEGER 0 1 name TEXT 1 0 donor_cc_id TEXT 1 0 enabled INTEGER 1 1 0 scope TEXT 0 'direct_personnel' 0 recipient_cc_id TEXT 0 0"},{"location":"zz_old/backup/DATA_DICTIONARY_CONDENSED/#views","title":"Views","text":"<ul> <li><code>mo_last_price_current</code></li> <li><code>personnel_yearly</code></li> <li><code>personnel_yearly_effective</code></li> </ul>"},{"location":"zz_old/backup/DB_SCHEMA/","title":"DB schema","text":"<p>Schema built by: <code>db.schema.ensure_schema</code></p>"},{"location":"zz_old/backup/DB_SCHEMA/#table-bom","title":"TABLE: <code>bom</code>","text":"<pre><code>CREATE TABLE bom(\n      parent_item_id    TEXT NOT NULL,\n      component_item_id TEXT NOT NULL,\n      qty_per_unit      REAL NOT NULL CHECK(qty_per_unit&gt;=0),\n      valid_from        TEXT NOT NULL,\n      valid_to          TEXT NOT NULL,\n      level             INTEGER NOT NULL,\n      path              TEXT,\n      PRIMARY KEY(parent_item_id, component_item_id, valid_from)\n    )\n</code></pre> # name type notnull default pk 0 parent_item_id TEXT 1 1 1 component_item_id TEXT 1 2 2 qty_per_unit REAL 1 0 3 valid_from TEXT 1 3 4 valid_to TEXT 1 0 5 level INTEGER 1 0 6 path TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-bom_spec_components","title":"TABLE: <code>bom_spec_components</code>","text":"<pre><code>CREATE TABLE bom_spec_components(\n      spec_code    TEXT NOT NULL,\n      line_no      INTEGER NOT NULL,\n      component_id TEXT NOT NULL,\n      qty_per_spec REAL NOT NULL CHECK(qty_per_spec&gt;=0),\n      uom          TEXT,\n      operation    TEXT,\n      stage        TEXT,\n      valid_from   TEXT NOT NULL DEFAULT '1900-01-01',\n      valid_to     TEXT NOT NULL DEFAULT '2999-12-31',\n      PRIMARY KEY(spec_code, line_no, valid_from)\n    )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 1 1 1 line_no INTEGER 1 2 2 component_id TEXT 1 0 3 qty_per_spec REAL 1 0 4 uom TEXT 0 0 5 operation TEXT 0 0 6 stage TEXT 0 0 7 valid_from TEXT 1 '1900-01-01' 3 8 valid_to TEXT 1 '2999-12-31' 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-bom_specs","title":"TABLE: <code>bom_specs</code>","text":"<pre><code>CREATE TABLE bom_specs(\n      spec_code  TEXT PRIMARY KEY,\n      product_id TEXT NOT NULL,\n      batch_size REAL NOT NULL DEFAULT 1 CHECK(batch_size&gt;0),\n      batch_uom  TEXT,\n      valid_from TEXT NOT NULL DEFAULT '1900-01-01',\n      valid_to   TEXT NOT NULL DEFAULT '2999-12-31',\n      is_default INTEGER NOT NULL DEFAULT 1 CHECK(is_default IN (0,1))\n    )\n</code></pre> # name type notnull default pk 0 spec_code TEXT 0 1 1 product_id TEXT 1 0 2 batch_size REAL 1 1 0 3 batch_uom TEXT 0 0 4 valid_from TEXT 1 '1900-01-01' 0 5 valid_to TEXT 1 '2999-12-31' 0 6 is_default INTEGER 1 1 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-dep_cc_map","title":"TABLE: <code>dep_cc_map</code>","text":"<pre><code>CREATE TABLE dep_cc_map (\n      department_code TEXT PRIMARY KEY,  \n      cc_id           TEXT NOT NULL      \n    )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 1 1 cc_id TEXT 1 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-depr_cost_unit","title":"TABLE: <code>depr_cost_unit</code>","text":"<pre><code>CREATE TABLE depr_cost_unit(\n      product_id      TEXT NOT NULL,\n      department_code TEXT NOT NULL,\n      hours_total     REAL NOT NULL,\n      rate_per_hour   REAL,\n      currency        TEXT,\n      cost_total      REAL,\n      PRIMARY KEY(product_id, department_code)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 department_code TEXT 1 2 2 hours_total REAL 1 0 3 rate_per_hour REAL 0 0 4 currency TEXT 0 0 5 cost_total REAL 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-depr_cost_unit_total","title":"TABLE: <code>depr_cost_unit_total</code>","text":"<pre><code>CREATE TABLE depr_cost_unit_total(\n      product_id   TEXT PRIMARY KEY,\n      cost_total   REAL\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 cost_total REAL 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-depr_rates_snapshot","title":"TABLE: <code>depr_rates_snapshot</code>","text":"<pre><code>CREATE TABLE depr_rates_snapshot (\n            department_code     TEXT,\n            cc_id               TEXT,\n            rate_per_hour       REAL NOT NULL CHECK(rate_per_hour&gt;=0),\n            hours_year          REAL,\n            personnel_cost_year REAL,\n            bud_year            INTEGER,\n            currency            TEXT NOT NULL DEFAULT 'RUB',\n            source              TEXT,\n            calc_at             TEXT,\n            loaded_at           TEXT DEFAULT (datetime('now'))\n        )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 1 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 currency TEXT 1 'RUB' 0 7 source TEXT 0 0 8 calc_at TEXT 0 0 9 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-items","title":"TABLE: <code>items</code>","text":"<pre><code>CREATE TABLE items(\n      item_id     TEXT PRIMARY KEY,\n      article     TEXT,\n      name        TEXT,\n      uom         TEXT,\n      is_produced INTEGER NOT NULL DEFAULT 0\n    )\n</code></pre> # name type notnull default pk 0 item_id TEXT 0 1 1 article TEXT 0 0 2 name TEXT 0 0 3 uom TEXT 0 0 4 is_produced INTEGER 1 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-labor_rates","title":"TABLE: <code>labor_rates</code>","text":"<pre><code>CREATE TABLE labor_rates(\n      period TEXT NOT NULL,\n      department_code TEXT NOT NULL,\n      rate_per_hour REAL NOT NULL CHECK(rate_per_hour&gt;0),\n      currency TEXT NOT NULL DEFAULT 'RUB',\n      PRIMARY KEY(period, department_code)\n    )\n</code></pre> # name type notnull default pk 0 period TEXT 1 1 1 department_code TEXT 1 2 2 rate_per_hour REAL 1 0 3 currency TEXT 1 'RUB' 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-labor_rates_snapshot","title":"TABLE: <code>labor_rates_snapshot</code>","text":"<pre><code>CREATE TABLE labor_rates_snapshot (\n      department_code      TEXT,\n      cc_id                TEXT,\n      rate_per_hour        REAL,\n      hours_year           REAL,\n      personnel_cost_year  REAL,\n      bud_year             INTEGER,\n      source               TEXT,\n      calc_at              TEXT\n    , \"currency\" TEXT)\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 0 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 source TEXT 0 0 7 calc_at TEXT 0 0 8 currency TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-mo_catalog","title":"TABLE: <code>mo_catalog</code>","text":"<pre><code>CREATE TABLE mo_catalog (\n        before_item_id TEXT NOT NULL,\n        after_item_id  TEXT NOT NULL,\n        is_active      INTEGER NOT NULL DEFAULT 1,\n        source         TEXT,\n        loaded_at      TEXT NOT NULL,\n        UNIQUE(before_item_id, after_item_id)\n    )\n</code></pre> # name type notnull default pk 0 before_item_id TEXT 1 0 1 after_item_id TEXT 1 0 2 is_active INTEGER 1 1 0 3 source TEXT 0 0 4 loaded_at TEXT 1 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-mo_cost_unit","title":"TABLE: <code>mo_cost_unit</code>","text":"<pre><code>CREATE TABLE mo_cost_unit (\n        product_id          TEXT NOT NULL,\n        component_item_id   TEXT NOT NULL,\n        qty_per_unit        REAL NOT NULL,\n        price               REAL NOT NULL,\n        amount              REAL NOT NULL,\n        currency            TEXT NOT NULL DEFAULT 'RUB',\n        computed_at         TEXT NOT NULL,\n        PRIMARY KEY (product_id, component_item_id)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 component_item_id TEXT 1 2 2 qty_per_unit REAL 1 0 3 price REAL 1 0 4 amount REAL 1 0 5 currency TEXT 1 'RUB' 0 6 computed_at TEXT 1 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-mo_prices_history","title":"TABLE: <code>mo_prices_history</code>","text":"<pre><code>CREATE TABLE mo_prices_history (\n        after_item_id   TEXT NOT NULL,\n        price           REAL NOT NULL,\n        currency        TEXT NOT NULL DEFAULT 'RUB',\n        vendor          TEXT,\n        effective_from  TEXT,\n        effective_to    TEXT,\n        source          TEXT,\n        loaded_at       TEXT NOT NULL\n    )\n</code></pre> # name type notnull default pk 0 after_item_id TEXT 1 0 1 price REAL 1 0 2 currency TEXT 1 'RUB' 0 3 vendor TEXT 0 0 4 effective_from TEXT 0 0 5 effective_to TEXT 0 0 6 source TEXT 0 0 7 loaded_at TEXT 1 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-opex_budget","title":"TABLE: <code>opex_budget</code>","text":"<pre><code>CREATE TABLE opex_budget (\n    id                       INTEGER PRIMARY KEY AUTOINCREMENT,\n    load_id                  TEXT    NOT NULL,\n    cc_id                    TEXT    NOT NULL,                 -- FK \u2192 cc_nodes.cc_id\n    elem_id                  TEXT    NOT NULL,                 -- FK \u2192 elem_nodes.elem_id\n    bud_year                 INTEGER NOT NULL,                 -- \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 2026\n    amount                   REAL    NOT NULL,                 -- \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n\n    text_note                TEXT,\n    comments                 TEXT,\n    supplier_text            TEXT,\n    source_sheet             TEXT,\n\n    created_at               INTEGER NOT NULL DEFAULT (strftime('%s','now')),\n\n    FOREIGN KEY (cc_id)   REFERENCES cc_nodes(cc_id),\n    FOREIGN KEY (elem_id) REFERENCES elem_nodes(elem_id)\n)\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 load_id TEXT 1 0 2 cc_id TEXT 1 0 3 elem_id TEXT 1 0 4 bud_year INTEGER 1 0 5 amount REAL 1 0 6 text_note TEXT 0 0 7 comments TEXT 0 0 8 supplier_text TEXT 0 0 9 source_sheet TEXT 0 0 10 created_at INTEGER 1 strftime('%s','now') 0 <p>Foreign keys: - <code>elem_id</code> \u2192 <code>elem_nodes(elem_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE) - <code>cc_id</code> \u2192 <code>cc_nodes(cc_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE)</p>"},{"location":"zz_old/backup/DB_SCHEMA/#table-opex_staging","title":"TABLE: <code>opex_staging</code>","text":"<pre><code>CREATE TABLE opex_staging (\n    id                       INTEGER PRIMARY KEY AUTOINCREMENT,\n    load_id                  TEXT    NOT NULL,                 -- UUID \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n    sheet_name               TEXT,                             -- \u0438\u043c\u044f \u043b\u0438\u0441\u0442\u0430 Excel\n    cc_id                    TEXT,                             -- CC \u0438\u0437 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0430\n    cost_type                TEXT,\n    account_descr            TEXT,\n    bud_2026                 REAL,                             -- \u0441\u0443\u043c\u043c\u0430 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 'BUD 2026'\n    text_note                TEXT,                             -- 'Text'\n    comments                 TEXT,                             -- 'Comments'\n    supplier_text            TEXT,                             -- 'Suppliers/Text'\n\n    mapped_elem_id           TEXT,                             -- \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u0430\u0432\u0438\u043b (elem_id) \u0438\u043b\u0438 NULL\n\n    -- \u0444\u043b\u0430\u0433\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\n    missing_cc               INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 CC \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u0432 \u0411\u0414\n    unmapped_elem            INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u043d\u0435 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e\n    bad_amount               INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 bud_2026 \u043f\u0443\u0441\u0442/\u043d\u0435\u0447\u0438\u0441\u043b\u043e\n    dup_candidate            INTEGER NOT NULL DEFAULT 0,       -- 1 \u0435\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0443\u0431\u043b\u044c\n\n    created_at               INTEGER NOT NULL DEFAULT (strftime('%s','now')),\n\n    -- \u043c\u044f\u0433\u043a\u0438\u0435 FK (\u0431\u0435\u0437 ON DELETE/UPDATE CASCADE, \u0447\u0442\u043e\u0431\u044b staging \u043d\u0435 \u043f\u0430\u0434\u0430\u043b \u043f\u0440\u0438 \u0430\u0434\u043c\u0438\u043d-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u0445)\n    FOREIGN KEY (cc_id)       REFERENCES cc_nodes(cc_id),\n    FOREIGN KEY (mapped_elem_id) REFERENCES elem_nodes(elem_id)\n)\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 load_id TEXT 1 0 2 sheet_name TEXT 0 0 3 cc_id TEXT 0 0 4 cost_type TEXT 0 0 5 account_descr TEXT 0 0 6 bud_2026 REAL 0 0 7 text_note TEXT 0 0 8 comments TEXT 0 0 9 supplier_text TEXT 0 0 10 mapped_elem_id TEXT 0 0 11 missing_cc INTEGER 1 0 0 12 unmapped_elem INTEGER 1 0 0 13 bad_amount INTEGER 1 0 0 14 dup_candidate INTEGER 1 0 0 15 created_at INTEGER 1 strftime('%s','now') 0 <p>Foreign keys: - <code>mapped_elem_id</code> \u2192 <code>elem_nodes(elem_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE) - <code>cc_id</code> \u2192 <code>cc_nodes(cc_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE)</p>"},{"location":"zz_old/backup/DB_SCHEMA/#table-opr_cost_unit","title":"TABLE: <code>opr_cost_unit</code>","text":"<pre><code>CREATE TABLE opr_cost_unit(\n      product_id      TEXT NOT NULL,\n      department_code TEXT NOT NULL,\n      hours_total     REAL NOT NULL,\n      rate_per_hour   REAL,\n      currency        TEXT,\n      cost_total      REAL,\n      PRIMARY KEY(product_id, department_code)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 department_code TEXT 1 2 2 hours_total REAL 1 0 3 rate_per_hour REAL 0 0 4 currency TEXT 0 0 5 cost_total REAL 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-opr_cost_unit_total","title":"TABLE: <code>opr_cost_unit_total</code>","text":"<pre><code>CREATE TABLE opr_cost_unit_total(\n      product_id   TEXT PRIMARY KEY,\n      cost_total   REAL\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 cost_total REAL 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-opr_rates_snapshot","title":"TABLE: <code>opr_rates_snapshot</code>","text":"<pre><code>CREATE TABLE opr_rates_snapshot (\n            department_code     TEXT,\n            cc_id               TEXT,\n            rate_per_hour       REAL NOT NULL CHECK(rate_per_hour&gt;=0),\n            hours_year          REAL,\n            personnel_cost_year REAL,\n            bud_year            INTEGER,\n            currency            TEXT NOT NULL DEFAULT 'RUB',\n            source              TEXT,\n            calc_at             TEXT,\n            loaded_at           TEXT DEFAULT (datetime('now'))\n        )\n</code></pre> # name type notnull default pk 0 department_code TEXT 0 0 1 cc_id TEXT 0 0 2 rate_per_hour REAL 1 0 3 hours_year REAL 0 0 4 personnel_cost_year REAL 0 0 5 bud_year INTEGER 0 0 6 currency TEXT 1 'RUB' 0 7 source TEXT 0 0 8 calc_at TEXT 0 0 9 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-ovh_cost_unit","title":"TABLE: <code>ovh_cost_unit</code>","text":"<pre><code>CREATE TABLE ovh_cost_unit (\n        product_id TEXT PRIMARY KEY,\n        depr_opr_cost REAL NOT NULL DEFAULT 0.0,  -- \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420\n        log_cost REAL NOT NULL DEFAULT 0.0,       -- \u041e\u0425\u0420 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430\n        adm_cost REAL NOT NULL DEFAULT 0.0        -- \u041e\u0425\u0420 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 depr_opr_cost REAL 1 0.0 0 2 log_cost REAL 1 0.0 0 3 adm_cost REAL 1 0.0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-ovh_flat","title":"TABLE: <code>ovh_flat</code>","text":"<pre><code>CREATE TABLE ovh_flat (\n        product_id TEXT NOT NULL,\n        overhead_group TEXT NOT NULL,\n        mat_cost REAL NOT NULL DEFAULT 0.0,\n        PRIMARY KEY (product_id, overhead_group)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 overhead_group TEXT 1 2 2 mat_cost REAL 1 0.0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-ovh_tariffs","title":"TABLE: <code>ovh_tariffs</code>","text":"<pre><code>CREATE TABLE ovh_tariffs (\n        overhead_group TEXT NOT NULL,\n        year INTEGER NOT NULL,\n        scrap_share REAL,       -- \u0411\u0440\u0430\u043a: \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\n        depr_opr_share REAL,    -- \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420: \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\n        log_share REAL,         -- \u041e\u0425\u0420 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430: \u043e\u0442 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432\n        adm_share REAL,         -- \u041e\u0425\u0420 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447.: \u043e\u0442 (\u0442\u0440\u0443\u0434 + \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f \u041e\u041f\u0420_\u043f\u043e_\u0433\u0440\u0443\u043f\u043f\u0435)\n        PRIMARY KEY (overhead_group, year)\n    )\n</code></pre> # name type notnull default pk 0 overhead_group TEXT 1 1 1 year INTEGER 1 2 2 scrap_share REAL 0 0 3 depr_opr_share REAL 0 0 4 log_share REAL 0 0 5 adm_share REAL 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-personnel_monthly","title":"TABLE: <code>personnel_monthly</code>","text":"<pre><code>CREATE TABLE personnel_monthly(\n            cc_id   TEXT NOT NULL,\n            ym      TEXT NOT NULL,         -- 'YYYY-MM'\n            headcount REAL NOT NULL CHECK(headcount&gt;=0),\n            source  TEXT,\n            note    TEXT,\n            loaded_at TEXT DEFAULT (datetime('now')),\n            PRIMARY KEY(cc_id, ym)\n        )\n</code></pre> # name type notnull default pk 0 cc_id TEXT 1 1 1 ym TEXT 1 2 2 headcount REAL 1 0 3 source TEXT 0 0 4 note TEXT 0 0 5 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-prod_budget","title":"TABLE: <code>prod_budget</code>","text":"<pre><code>CREATE TABLE prod_budget (\n        product_id   TEXT NOT NULL,\n        month_code   TEXT NOT NULL,   -- 'YYYY-MM' (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 '2026-01')\n        qty          REAL NOT NULL DEFAULT 0,\n        PRIMARY KEY (product_id, month_code)\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 1 1 1 month_code TEXT 1 2 2 qty REAL 1 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-rm_prices","title":"TABLE: <code>rm_prices</code>","text":"<pre><code>CREATE TABLE rm_prices(\n      item_code TEXT NOT NULL,\n      article   TEXT,\n      uom       TEXT,\n      price     REAL NOT NULL CHECK(price&gt;0),\n      currency  TEXT NOT NULL DEFAULT 'RUB',\n      source    TEXT,\n      loaded_at TEXT DEFAULT (datetime('now')),\n      PRIMARY KEY(item_code, currency)\n    )\n</code></pre> # name type notnull default pk 0 item_code TEXT 1 1 1 article TEXT 0 0 2 uom TEXT 0 0 3 price REAL 1 0 4 currency TEXT 1 'RUB' 2 5 source TEXT 0 0 6 loaded_at TEXT 0 datetime('now') 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-routing_operations","title":"TABLE: <code>routing_operations</code>","text":"<pre><code>CREATE TABLE routing_operations(\n      routing_op_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      routing_id    INTEGER NOT NULL,\n      seq           INTEGER NOT NULL,\n      operation     TEXT NOT NULL,\n      department    TEXT,\n      hours         REAL NOT NULL DEFAULT 0 CHECK(hours&gt;=0),\n      UNIQUE(routing_id, seq)\n    )\n</code></pre> # name type notnull default pk 0 routing_op_id INTEGER 0 1 1 routing_id INTEGER 1 0 2 seq INTEGER 1 0 3 operation TEXT 1 0 4 department TEXT 0 0 5 hours REAL 1 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-routing_tree","title":"TABLE: <code>routing_tree</code>","text":"<pre><code>CREATE TABLE routing_tree(\n      root_product_id  TEXT,\n      node_product_id  TEXT,\n      level            INTEGER,\n      qty_per_unit     REAL,\n      path             TEXT,\n      routing_id       TEXT,\n      routing_group    TEXT,\n      routing_name     TEXT,\n      PRIMARY KEY(root_product_id, node_product_id)\n    )\n</code></pre> # name type notnull default pk 0 root_product_id TEXT 0 1 1 node_product_id TEXT 0 2 2 level INTEGER 0 0 3 qty_per_unit REAL 0 0 4 path TEXT 0 0 5 routing_id TEXT 0 0 6 routing_group TEXT 0 0 7 routing_name TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-routings","title":"TABLE: <code>routings</code>","text":"<pre><code>CREATE TABLE routings(\n      routing_id   INTEGER PRIMARY KEY AUTOINCREMENT,\n      routing_group TEXT NOT NULL,\n      spec_code     TEXT,\n      item_id       TEXT\n    )\n</code></pre> # name type notnull default pk 0 routing_id INTEGER 0 1 1 routing_group TEXT 1 0 2 spec_code TEXT 0 0 3 item_id TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-run_history","title":"TABLE: <code>run_history</code>","text":"<pre><code>CREATE TABLE run_history(\n      run_id      TEXT PRIMARY KEY,\n      started_at  TEXT,\n      ended_at    TEXT,\n      scope       TEXT,             -- e.g. \"all_produced\" | \"explicit_list\"\n      params_json TEXT,\n      status      TEXT              -- \"ok\" | \"error\" | \"partial\"\n    )\n</code></pre> # name type notnull default pk 0 run_id TEXT 0 1 1 started_at TEXT 0 0 2 ended_at TEXT 0 0 3 scope TEXT 0 0 4 params_json TEXT 0 0 5 status TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-run_log","title":"TABLE: <code>run_log</code>","text":"<pre><code>CREATE TABLE run_log(\n      run_id      TEXT,\n      step        TEXT,             -- \"bom\" | \"tree\" | \"flat\" | \"hours\" | \"labor_cost\" | \"opr_cost\" | \"depr_cost\"\n      product_id  TEXT,\n      level       TEXT,             -- \"INFO\" | \"WARN\" | \"ERROR\"\n      msg         TEXT,\n      extra_json  TEXT,\n      ts          TEXT\n    )\n</code></pre> # name type notnull default pk 0 run_id TEXT 0 0 1 step TEXT 0 0 2 product_id TEXT 0 0 3 level TEXT 0 0 4 msg TEXT 0 0 5 extra_json TEXT 0 0 6 ts TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-scrap_cost_unit","title":"TABLE: <code>scrap_cost_unit</code>","text":"<pre><code>CREATE TABLE scrap_cost_unit (\n        product_id TEXT PRIMARY KEY,\n        scrap_cost REAL NOT NULL DEFAULT 0.0\n    )\n</code></pre> # name type notnull default pk 0 product_id TEXT 0 1 1 scrap_cost REAL 1 0.0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-sqlite_sequence","title":"TABLE: <code>sqlite_sequence</code>","text":"<pre><code>CREATE TABLE sqlite_sequence(name,seq)\n</code></pre> # name type notnull default pk 0 name 0 0 1 seq 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#table-transfer_batches","title":"TABLE: <code>transfer_batches</code>","text":"<pre><code>CREATE TABLE transfer_batches(\n            batch_id   TEXT PRIMARY KEY,   -- UUID\n            bud_year   INTEGER NOT NULL,\n            rule_id    INTEGER NOT NULL,\n            created_at TEXT DEFAULT (datetime('now')),\n            created_by TEXT,\n            comment    TEXT,\n            FOREIGN KEY(rule_id) REFERENCES transfer_rules(rule_id)\n        )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 0 1 1 bud_year INTEGER 1 0 2 rule_id INTEGER 1 0 3 created_at TEXT 0 datetime('now') 0 4 created_by TEXT 0 0 5 comment TEXT 0 0 <p>Foreign keys: - <code>rule_id</code> \u2192 <code>transfer_rules(rule_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE)</p>"},{"location":"zz_old/backup/DB_SCHEMA/#table-transfer_opex_items","title":"TABLE: <code>transfer_opex_items</code>","text":"<pre><code>CREATE TABLE transfer_opex_items(\n            batch_id     TEXT NOT NULL,\n            from_cc_id   TEXT NOT NULL,\n            to_cc_id     TEXT NOT NULL,\n            elem_id      TEXT NOT NULL,\n            amount_delta REAL NOT NULL,\n            PRIMARY KEY (batch_id, from_cc_id, to_cc_id, elem_id),\n            FOREIGN KEY (batch_id) REFERENCES transfer_batches(batch_id)\n        )\n</code></pre> # name type notnull default pk 0 batch_id TEXT 1 1 1 from_cc_id TEXT 1 2 2 to_cc_id TEXT 1 3 3 to_elem_id TEXT 0 0 4 elem_id TEXT 1 4 5 amount_delta REAL 1 0 <p>Foreign keys: - <code>batch_id</code> \u2192 <code>transfer_batches(batch_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE)</p>"},{"location":"zz_old/backup/DB_SCHEMA/#table-transfer_personnel_items","title":"TABLE: <code>transfer_personnel_items</code>","text":"<pre><code>CREATE TABLE \"transfer_personnel_items\"(\n            id              INTEGER PRIMARY KEY AUTOINCREMENT,\n            batch_id        TEXT NOT NULL,\n            from_cc_id      TEXT,            -- \u0432 \u0441\u0442\u0430\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u044f\u0445 \u043c\u043e\u0433\u043b\u043e \u0431\u044b\u0442\u044c NULL\n            to_cc_id        TEXT NOT NULL,\n            headcount_delta REAL NOT NULL,\n            FOREIGN KEY(batch_id) REFERENCES transfer_batches(batch_id)\n        )\n</code></pre> # name type notnull default pk 0 id INTEGER 0 1 1 batch_id TEXT 1 0 2 from_cc_id TEXT 0 0 3 to_cc_id TEXT 1 0 4 headcount_delta REAL 1 0 <p>Foreign keys: - <code>batch_id</code> \u2192 <code>transfer_batches(batch_id)</code> (on update NO ACTION, on delete NO ACTION, match NONE)</p>"},{"location":"zz_old/backup/DB_SCHEMA/#table-transfer_rules","title":"TABLE: <code>transfer_rules</code>","text":"<pre><code>CREATE TABLE transfer_rules(\n            rule_id        INTEGER PRIMARY KEY AUTOINCREMENT,\n            name           TEXT NOT NULL,\n            donor_cc_id    TEXT NOT NULL,\n            enabled        INTEGER NOT NULL DEFAULT 1,\n            scope          TEXT DEFAULT 'direct_personnel',\n            recipient_cc_id TEXT\n        )\n</code></pre> # name type notnull default pk 0 rule_id INTEGER 0 1 1 name TEXT 1 0 2 donor_cc_id TEXT 1 0 3 enabled INTEGER 1 1 0 4 scope TEXT 0 'direct_personnel' 0 5 recipient_cc_id TEXT 0 0"},{"location":"zz_old/backup/DB_SCHEMA/#view-mo_last_price_current","title":"VIEW: <code>mo_last_price_current</code>","text":"<pre><code>CREATE VIEW mo_last_price_current AS\n    WITH ranked AS (\n        SELECT *, ROW_NUMBER() OVER (\n            PARTITION BY after_item_id ORDER BY datetime(loaded_at) DESC\n        ) rn\n        FROM mo_prices_history\n    )\n    SELECT after_item_id, price, currency, vendor, source, loaded_at\n    FROM ranked WHERE rn = 1\n</code></pre>"},{"location":"zz_old/backup/DB_SCHEMA/#view-personnel_yearly","title":"VIEW: <code>personnel_yearly</code>","text":"<pre><code>CREATE VIEW personnel_yearly AS\n        SELECT TRIM(cc_id) AS cc_id,\n               CAST(substr(TRIM(ym), 1, 4) AS INTEGER) AS bud_year,\n               AVG(headcount) AS headcount_avg_year\n        FROM personnel_monthly\n        GROUP BY TRIM(cc_id), CAST(substr(TRIM(ym), 1, 4) AS INTEGER)\n</code></pre>"},{"location":"zz_old/backup/DB_SCHEMA/#view-personnel_yearly_effective","title":"VIEW: <code>personnel_yearly_effective</code>","text":"<pre><code>CREATE VIEW personnel_yearly_effective AS\n        WITH base AS (\n            SELECT TRIM(cc_id) AS cc_id,\n                   CAST(substr(TRIM(ym), 1, 4) AS INTEGER) AS bud_year,\n                   AVG(headcount) AS headcount_avg_year\n            FROM personnel_monthly\n            GROUP BY TRIM(cc_id), CAST(substr(TRIM(ym), 1, 4) AS INTEGER)\n        ),\n        delta_in AS (\n            SELECT TRIM(i.to_cc_id) AS cc_id,\n                   CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER) AS bud_year,\n                   SUM(i.headcount_delta) AS delta\n            FROM transfer_personnel_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            GROUP BY TRIM(i.to_cc_id), CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER)\n        ),\n        delta_out AS (\n            SELECT TRIM(i.from_cc_id) AS cc_id,\n                   CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER) AS bud_year,\n                   -SUM(i.headcount_delta) AS delta\n            FROM transfer_personnel_items i\n            JOIN transfer_batches b ON b.batch_id = i.batch_id\n            WHERE i.from_cc_id IS NOT NULL\n            GROUP BY TRIM(i.from_cc_id), CAST(REPLACE(TRIM(b.bud_year), ',', '.') AS INTEGER)\n        ),\n        deltas AS (\n            SELECT cc_id, bud_year, SUM(delta) AS headcount_delta_year\n            FROM (\n                SELECT * FROM delta_in\n                UNION ALL\n                SELECT * FROM delta_out\n            )\n            GROUP BY cc_id, bud_year\n        ),\n        keys AS (\n            SELECT cc_id, bud_year FROM base\n            UNION\n            SELECT cc_id, bud_year FROM deltas\n        )\n        SELECT k.cc_id,\n               k.bud_year,\n               COALESCE(b.headcount_avg_year, 0) + COALESCE(d.headcount_delta_year, 0)\n                   AS headcount_avg_year_effective\n        FROM keys k\n        LEFT JOIN base   b ON b.cc_id = k.cc_id AND b.bud_year = k.bud_year\n        LEFT JOIN deltas d ON d.cc_id = k.cc_id AND d.bud_year = k.bud_year\n</code></pre>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/","title":"Wilo-ERP \u2014 Target Architecture (ERP-grade)","text":"<p>Status: Draft Owner: Petr Podolyakin Last updated: 2025-10-06</p>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#0-goals","title":"0. Goals","text":"<p>1) \u041f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0430\u044f ERP-\u043e\u0441\u044c: \u041f\u043b\u0430\u043d \u2192 \u0424\u0430\u043a\u0442 (\u0437\u0430\u043a\u0440\u044b\u0442\u0438\u0435 \u043f\u0435\u0440\u0438\u043e\u0434\u0430) \u2192 \u0418\u0441\u0442\u043e\u0440\u0438\u044f \u2192 \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 (\u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b/\u0444\u0430\u043a\u0442\u043e\u0440\u044b). 2) \u041f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u0430\u044f \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430: \u043e\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0441\u0445\u043e\u0434\u043d\u0438\u043a\u0430 \u0434\u043e \u0441\u0442\u0430\u0442\u044c\u0438 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438/\u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0437\u0430\u0442\u0440\u0430\u0442 \u0438 \u043d\u0430\u0437\u0430\u0434. 3) \u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u0430\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439: \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u043b (\u043f\u043e \u0447\u0430\u0441\u0430\u043c, \u043f\u043e \u043c\u0430\u0442.\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u043f\u043e CC \u0438 \u0442.\u043f.). 4) \u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c: \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u044b, \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0438, SCD-\u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438.</p>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#1-layered-model","title":"1. Layered Model","text":"<p>L0 \u2014 Sources (files/1C): Excel/CSV/TXT \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u0438. L1 \u2014 Staging (raw): <code>*_staging</code> \u0442\u0430\u0431\u043b\u0438\u0446\u044b, 1:1 \u043a \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c, \u0441 <code>load_id</code>, <code>source</code>, <code>loaded_at</code>. L2 \u2014 Canonical (normalized): \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u043a\u0442\u044b/\u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438, \u043a\u043b\u044e\u0447\u0438 \u0438 \u0441\u0441\u044b\u043b\u043a\u0438. L3 \u2014 Calc (derived): \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438, \u0442\u0430\u0440\u0438\u0444\u044b, \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043d\u044b\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b. L4 \u2014 Semantic Views (<code>v_*</code>): \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0432\u0438\u0442\u0440\u0438\u043d\u044b \u0434\u043b\u044f \u043e\u0442\u0447\u0451\u0442\u043d\u043e\u0441\u0442\u0438 \u0438 \u0441\u0432\u0435\u0440\u043e\u043a. L5 \u2014 Exports/Reports: Excel/CSV/\u0432\u0438\u0437\u0443\u0430\u043b \u2014 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0442\u0435\u043d\u0438\u0435 <code>v_*</code>.</p>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#2-data-model-star-ish-lineage","title":"2. Data Model (star-ish + lineage)","text":""},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#21-dimensions-scd2","title":"2.1 Dimensions (SCD2 \u0433\u0434\u0435 \u043d\u0443\u0436\u043d\u043e)","text":"<ul> <li><code>dim_date(y, m, month_code)</code> </li> <li><code>dim_item(product_id, sku, cg_id, ... )</code> </li> <li><code>dim_cc(cc_id, cc_name, cc_path, is_leaf)</code> </li> <li><code>dim_elem(elem_id, elem_group, ...)</code> </li> <li><code>dim_rule(rule_id, rule_set, version, driver_type, valid_from/to)</code> </li> <li><code>dim_driver(driver_id, name, unit, description)</code> </li> <li><code>dim_scenario(scn_id, type: plan/forecast/actual, code, version)</code></li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#22-facts-grain","title":"2.2 Facts (grain \u0438 \u043a\u043b\u044e\u0447\u0438)","text":"<ul> <li><code>fact_opex</code> \u2014 \u0437\u0435\u0440\u043d\u043e: (period, cc_id, elem_id, scenario) \u2014 \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0443 (\u0434\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439).  </li> <li><code>fact_prod_budget</code> \u2014 \u0437\u0435\u0440\u043d\u043e: (period, product_id, scenario) \u2014 \u043e\u0431\u044a\u0451\u043c\u044b.  </li> <li><code>fact_prices_rm</code> \u2014 \u0437\u0435\u0440\u043d\u043e: (period or validity, item_id, scenario) \u2014 \u0446\u0435\u043d\u044b RM.  </li> <li><code>fact_calc_alloc_in</code> \u2014 \u0432\u0445\u043e\u0434 \u0432 \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438 (\u043a\u043e\u043f\u0438\u044f fact_opex + context).  </li> <li><code>fact_calc_alloc_out</code> \u2014 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439: \u0437\u0435\u0440\u043d\u043e (period, product_id, elem_id, scenario, rule_id).  </li> <li><code>fact_cogs_unit</code> \u2014 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u0430 \u0435\u0434.: (period, product_id, scenario) + \u0440\u0430\u0437\u0440\u0435\u0437 \u043f\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c.  </li> <li><code>fact_close_actuals</code> \u2014 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0430\u043d\u0430\u043b\u043e\u0433 \u043f\u043b\u0430\u043d\u043e\u0432\u044b\u0445 \u043f\u043e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0435).</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#23-lineage-audit","title":"2.3 Lineage &amp; Audit","text":"<ul> <li><code>etl_run_history(run_id, started_at, src, params, status)</code> </li> <li><code>lineage_links(src_table, src_pk, dst_table, dst_pk, rule_id, run_id)</code> \u2014 \u043a\u0430\u0440\u0442\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438.</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#3-allocation-engine-rules-drivers","title":"3. Allocation Engine (rules &amp; drivers)","text":"<ul> <li>Rule Set: <code>rule_set</code> (\u0438\u043c\u044f) + <code>version</code> \u2192 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430.  </li> <li>Rule: <code>rule_id</code>, <code>cost_filter</code> (\u043f\u043e cc/elem/descr), <code>driver_type</code> (hours/material_cost/qty/custom SQL), <code>split_key</code> (product_id/cc_id), <code>proportion</code> (weighting).  </li> <li>Driver Library: <code>driver_hours(period, cc_id, product_id)</code>, <code>driver_matcost(...)</code>, <code>driver_qty(...)</code>, <code>driver_area_share(...)</code> (\u0434\u043b\u044f \u0437\u0434\u0430\u043d\u0438\u0439/\u0441\u043e\u043e\u0440\u0443\u0436\u0435\u043d\u0438\u0439).  </li> <li>DSL (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439): YAML \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0438 \u0441\u0441\u044b\u043b\u043a\u0430\u043c\u0438 \u043d\u0430 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b (\u0441\u043c. \u0448\u0430\u0431\u043b\u043e\u043d \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438).</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#4-period-close-workflow","title":"4. Period Close Workflow","text":"<p>1) L1: \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 <code>opex</code>, <code>hours</code>, <code>prices</code>, <code>outputs</code> \u0437\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 (\u0441 <code>load_id</code>). 2) L2: \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u2192 <code>fact_opex</code>, <code>fact_prices_rm</code>, <code>fact_prod_budget</code>. 3) L3: \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043f\u0440\u0430\u0432\u0438\u043b <code>rule_set/version</code> \u2192 <code>fact_calc_alloc_out</code>. 4) L3: \u0441\u043e\u0431\u0440\u0430\u0442\u044c <code>fact_cogs_unit</code> (unit cost) \u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u043f\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c. 5) L4: \u0432\u0438\u0442\u0440\u0438\u043d\u044b \u0440\u0430\u0437\u043d\u0438\u0446: <code>v_variance_volume_mix</code>, <code>v_variance_price_usage</code>, <code>v_opex_by_cc_elem_delta</code> (\u043f\u043b\u0430\u043d vs \u0444\u0430\u043a\u0442).</p>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#5-variance-framework-drivers-of-change","title":"5. Variance Framework (drivers of change)","text":"<ul> <li>Volume (\u043e\u0431\u044a\u0451\u043c) \u2014 \u043f\u0435\u0440\u0435\u0441\u0447\u0451\u0442 \u043f\u043b\u0430\u043d\u0430 \u0441 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043e\u0431\u044a\u0451\u043c\u0430\u043c\u0438 (\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u044f \u0446\u0435\u043d\u044b/\u0442\u0430\u0440\u0438\u0444\u044b).  </li> <li>Mix (\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430) \u2014 \u044d\u0444\u0444\u0435\u043a\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b product mix.  </li> <li>Price (\u0446\u0435\u043d\u044b RM/MO) \u2014 \u044d\u0444\u0444\u0435\u043a\u0442 \u0446\u0435\u043d.  </li> <li>Rate/Tariff \u2014 \u0442\u0440\u0443\u0434/\u043e\u0432\u0435\u0440\u0445\u044d\u0434 \u0442\u0430\u0440\u0438\u0444\u044b. \u0412\u0438\u0442\u0440\u0438\u043d\u044b: <code>v_variance_bridge</code> \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438: base, step, effect, result.</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#6-costing-structure-more-articles","title":"6. Costing Structure (more articles)","text":"<ul> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c \u0441\u0442\u0430\u0442\u044c\u0438: RM, MO, Labor, OPR Depreciation, Logistics OH, Admin OH, Building/Facilities, Scrap, Other.  </li> <li>\u041c\u0430\u043f\u043f\u0438\u043d\u0433 elem_id \u2192 article (\u0442\u0430\u0431\u043b\u0438\u0446\u0430 <code>elem_to_article</code>). \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0430\u0442\u0435\u0439 \u0438\u0437 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u2014 \u0447\u0435\u0440\u0435\u0437 <code>split_rules</code> (\u0441\u043c. DSL).</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#7-special-case-buildings-facilities","title":"7. Special Case \u2014 Buildings &amp; Facilities","text":"<ul> <li>\u0412\u0432\u043e\u0434\u0438\u043c \u0434\u043e\u043b\u044e \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0443: <code>driver_area_share(product_id, period)</code> \u0438\u043b\u0438 \u0444\u0438\u043a\u0441 \u043d\u0430 CC.  </li> <li>\u041f\u0440\u0430\u0432\u0438\u043b\u043e: \u0438\u0437 CC \u00abFacilities\u00bb \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0443.</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#8-contracts-views-l4","title":"8. Contracts &amp; Views (L4)","text":"<ul> <li><code>v_cogs_unit(period, product_id, scenario)</code> \u2014 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043f\u043e \u0441\u0442\u0430\u0442\u044c\u044f\u043c.  </li> <li><code>v_alloc_lineage(period, product_id, elem_id, rule_id)</code> \u2014 \u0442\u0440\u0430\u0441\u0441\u0438\u0440\u043e\u0432\u043a\u0430.  </li> <li><code>v_variance_*</code> \u2014 \u043c\u043e\u0441\u0442\u0438\u043a\u0438 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432.  </li> <li><code>v_recon_checks</code> \u2014 \u0441\u0432\u0435\u0440\u043a\u0438: \u0441\u0443\u043c\u043c\u044b \u0434\u043e/\u043f\u043e\u0441\u043b\u0435 \u0430\u043b\u043b\u043e\u043a\u0430\u0446\u0438\u0438, \u043e\u0441\u0442\u0430\u0442\u043a\u0438.</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#9-governance","title":"9. Governance","text":"<ul> <li>ADR \u043d\u0430: \u0437\u0432\u0435\u0437\u0434\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c, \u0434\u0432\u0438\u0436\u043e\u043a \u043f\u0440\u0430\u0432\u0438\u043b, \u043c\u043e\u0441\u0442 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432, \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0443 SCD, \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b <code>v_*</code>.  </li> <li>\u0412\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 <code>rule_set</code>: \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u0438\u044f \u043f\u0435\u0440\u0438\u043e\u0434\u0430.  </li> <li>\u041a\u0430\u0442\u0430\u043b\u043e\u0433 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u043e\u0432 \u2014 \u043a\u0430\u043a \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439 API \u0432\u043d\u0443\u0442\u0440\u0438 <code>calc/driver_lib.py</code>.</li> </ul>"},{"location":"zz_old/backup/ERP_TARGET_ARCHITECTURE/#10-roadmap-5","title":"10. Roadmap (\u043f\u0435\u0440\u0432\u044b\u0435 5 \u0441\u043f\u0440\u0438\u043d\u0442\u043e\u0432)","text":"<p>1) \u0421\u043f\u0440\u0438\u043d\u0442 1: L1/L2 \u044f\u0434\u0440\u043e \u0434\u043b\u044f \u043f\u043b\u0430\u043d\u0430/\u0444\u0430\u043a\u0442\u0430 + dim_ + fact_ (\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440). 2) \u0421\u043f\u0440\u0438\u043d\u0442 2: Allocation Engine v1 (hours/material_cost/qty) + lineage. 3) \u0421\u043f\u0440\u0438\u043d\u0442 3: COGS Unit + <code>v_cogs_unit</code>, <code>v_alloc_lineage</code>. 4) \u0421\u043f\u0440\u0438\u043d\u0442 4: Variance Framework + <code>v_variance_bridge</code>. 5) \u0421\u043f\u0440\u0438\u043d\u0442 5: Buildings/Facilities driver + split_rules (\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0435\u0439).</p>"},{"location":"zz_old/backup/NEXT_STEPS_PhaseA_to_B/","title":"Next Steps \u2014 After Phase A bootstrap","text":"<p>Date: 2025-10-09</p>"},{"location":"zz_old/backup/NEXT_STEPS_PhaseA_to_B/#immediate-today","title":"Immediate (today)","text":"<p>1) Acceptance check (Phase A):    - [ ] Ensure new tables/views exist: <code>drivers</code>, <code>driver_sets</code>, <code>driver_values</code>, <code>cost_rates</code>, <code>fact_measures</code>, hierarchies, rule_*.    - [ ] Run HOURS(PLAN) ETL for a sample month (e.g., <code>2025-09</code>) and set (<code>PLAN_HOURS_SET</code>).    - [ ] Open <code>v_driver_values</code> and confirm HOURS rows for (product_id, cc_id) pairs exist and look sane.    - [ ] Validate coverage: no rows with NULL <code>cc_id</code>; if present \u2014 extend <code>dep_cc_map</code> then rerun ETL.    - [ ] Compare old labor report vs <code>v_labor_cost_unit_total</code> (parity expected).</p> <p>2) Populate driver catalog (data governance):    - [ ] Insert driver cards for <code>HOURS</code>, <code>MATCOST</code>, <code>PAYROLL_OTHER</code> into <code>drivers</code> with: unit, granularity, agg_rule, source_policy.    - [ ] Register driver sets: <code>PLAN_2026</code>, <code>ACT_2026M01</code> (status draft).</p> <p>3) Prepare MATCOST and PAYROLL_OTHER staging plan:    - [ ] Decide exact source for MATCOST (materials per product per month): existing materialization or interim view.    - [ ] Decide source for PAYROLL_OTHER: OPEX groups mapping (elem\u2192group) aggregated to CC or product+CC.</p>"},{"location":"zz_old/backup/NEXT_STEPS_PhaseA_to_B/#this-week-phase-a-completion","title":"This week (Phase A completion)","text":"<p>4) ETL adapters (minimal):    - [ ] Add ETL stubs: <code>populate_matcost_plan_driver_values</code>, <code>populate_payroll_other_plan_driver_values</code> (even for one month).    - [ ] Ensure idempotency keys: <code>(set_id, period, driver_code, product_id, cc_id)</code>.</p> <p>5) Rule matrix skeleton:    - [ ] Fill <code>rule_sets</code> with <code>DEFAULT_2026 v1 (active=false)</code>.    - [ ] Add one rule for CC 25410 \u00d7 elem_group MFC_PRIM_1 \u2192 <code>driver=HOURS</code> (priority=10).    - [ ] Create or finalize <code>v_allocation_rule_effective</code> (specificity\u2192priority + catch\u2011all).</p> <p>6) Docs:    - [ ] Update <code>ERP_TARGET_ARCHITECTURE.md</code> sections: Drivers, Rates, Rule Matrix.    - [ ] Add short Runbook: \u201cHow to populate HOURS/MATCOST/PAYROLL_OTHER\u201d.</p>"},{"location":"zz_old/backup/NEXT_STEPS_PhaseA_to_B/#ready-for-phase-b-when","title":"Ready for Phase B when:","text":"<ul> <li>HOURS and MATCOST exist for the sample month in <code>driver_values</code>.</li> <li><code>rule_sets</code> has a draft set with at least 1 rule (CC 25410 \u00d7 MFC_PRIM_1 \u2192 HOURS).</li> <li>Coverage and sanity checks are green.</li> </ul>"},{"location":"zz_old/backup/PARSERS/","title":"PARSERS","text":""},{"location":"zz_old/backup/PARSERS/#mfcprim","title":"MFCPRIM (\u042d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u0442\u0440\u0430\u0442)","text":"<ul> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c: \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0435 \u0434\u0435\u0440\u0435\u0432\u043e.</li> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438: \u0447\u0438\u0442\u0430\u0435\u043c \u0443\u0440\u043e\u0432\u043d\u0438 <code>Level 0..N</code>, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u0443\u0442\u044c; \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c = \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043b\u0435\u0432\u0430.</li> <li>\u041b\u0438\u0441\u0442: \u0442\u043e\u043b\u044c\u043a\u043e Level 5 (\u043f\u0440\u0430\u0432\u0438\u043b\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430). \u0423 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0442\u0438\u043f \u043f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e 'GROUP'.</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \u0443\u0437\u043b\u043e\u0432 = 830, \u0440\u0451\u0431\u0435\u0440 = 829 (\u0443 \u043a\u043e\u0440\u043d\u044f \u043d\u0435\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f).</li> </ul>"},{"location":"zz_old/backup/PARSERS/#_1","title":"\u041f\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0438","text":"<ul> <li>\u041f\u0443\u0441\u0442\u044b\u0435 \u0438\u043c\u0435\u043d\u0438/description \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b.</li> <li>\u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e Level 5 \u2014 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0431\u0435\u0440\u0451\u0442\u0441\u044f \u0438\u0437 \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0435\u0433\u043e \u043f\u0443\u0442\u0438 \u0432\u044b\u0448\u0435.</li> </ul>"},{"location":"zz_old/backup/PARSERS/#ccg-wru","title":"CCG WRU (\u041c\u0412\u0417)","text":"<ul> <li>\u0424\u0430\u0439\u043b: \u043b\u0438\u0441\u0442 <code>CCG_RU1</code>, \u0447\u0438\u0442\u0430\u0435\u043c <code>header=None</code> (\u043d\u0435\u0440\u043e\u0432\u043d\u0430\u044f \u0448\u0430\u043f\u043a\u0430).</li> <li>\u0413\u0440\u0443\u043f\u043f\u044b: \u043a\u043e\u043b\u043e\u043d\u043a\u0438 1..6, \u043b\u0438\u0441\u0442 (\u043a\u043e\u0434 \u041c\u0412\u0417): 7, \u0438\u043c\u044f: 9, company: 11, person: 12.</li> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c: \u0441\u043a\u043e\u043b\u044c\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c, parent\u2192child \u0446\u0435\u043f\u043e\u0447\u043a\u0430, \u043b\u0438\u0441\u0442\u044b \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a \u043f\u0440\u0430\u0432\u043e\u043c\u0443 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u043c\u0443.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/","title":"Project overview","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-calc","title":"Package <code>calc</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcbudget","title":"Module <code>calc.budget</code>","text":"<ul> <li>func <code>build_budget_frames(conn, months_ym: list[str])</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 dict {sheet_name: DataFrame} \u0434\u043b\u044f Total + \u043f\u043e\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0445 \u043b\u0438\u0441\u0442\u043e\u0432.</li> <li>func <code>export_budget_to_excel(conn, months_ym: list[str], out_xlsx_path: str)</code> \u2014 </li> <li>func <code>unit_cost_breakdown(conn, product_id: str) -&gt; dict</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcefficiency","title":"Module <code>calc.efficiency</code>","text":"<ul> <li>func <code>apply_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', comment: 'str' = 'efficiency normalize', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func <code>compute_efficiency_table(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21') -&gt; 'pd.DataFrame'</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0426\u0417:</li> <li>func <code>plan_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21') -&gt; 'tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcitem_cost","title":"Module <code>calc.item_cost</code>","text":"<ul> <li>func <code>build_unified_compact_table(conn, product_id: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0432\u0438\u0434: \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u0441\u0435\u043a\u0446\u0438\u044f\u043c + TOTAL (\u0438 \u0434\u043e\u043b\u044f \u0441\u0435\u043a\u0446\u0438\u0438 \u043e\u0442 TOTAL).</li> <li>func <code>build_unified_detailed_table(conn, product_id) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u0432\u0438\u0434 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430:</li> <li>func <code>compute_item_cost_unified(conn, product_id)</code> \u2014 \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0432\u0438\u0434: \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0435\u043a\u0446\u0438\u0439 + \u043f\u043e\u0434\u0438\u0442\u043e\u0433\u0438 \u043f\u043e \u0441\u0435\u043a\u0446\u0438\u044f\u043c + GRAND.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calclogger","title":"Module <code>calc.logger</code>","text":"<ul> <li>class <code>RunLogger(conn, scope: str, params: dict)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcmaterialize","title":"Module <code>calc.materialize</code>","text":"<ul> <li>class <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func <code>cleanup_routing_tree(conn, product_id: str | None = None)</code> \u2014 </li> <li>func <code>debug_snapshot(conn, pid: str | None, tag: str)</code> \u2014 </li> <li>func <code>ensure_depr_opr_cost_tables(conn)</code> \u2014 </li> <li>func <code>ensure_labor_cost_table(conn)</code> \u2014 </li> <li>func <code>ensure_labor_hours_table(conn)</code> \u2014 </li> <li>func <code>ensure_ovh_cost_unit_table(conn)</code> \u2014 </li> <li>func <code>ensure_routing_flat_table(conn)</code> \u2014 </li> <li>func <code>ensure_routing_tree_table(conn)</code> \u2014 </li> <li>func <code>ensure_scrap_cost_unit_table(conn)</code> \u2014 </li> <li>func <code>materialize_depr_costs(conn, product_id: str | None = None)</code> \u2014 </li> <li>func <code>materialize_flat_bom_recursive(conn, product_id: str | None = None)</code> \u2014 </li> <li>func <code>materialize_labor_costs(conn, product_id: str | None = None, on_date: str | None = None)</code> \u2014 </li> <li>func <code>materialize_labor_hours(conn, product_id: str | None = None)</code> \u2014 </li> <li>func <code>materialize_mo_cost_unit(conn, *, on_date: str | None = None)</code> \u2014 \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 mo_cost_unit \u0438\u0437 bom_flat \u00d7 mo_last_price (\u043d\u0430 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439).</li> <li>func <code>materialize_mo_cost_unit_monthly(conn, month_code: str)</code> \u2014 \u0414\u043b\u044f \u0431\u044e\u0434\u0436\u0435\u0442\u0430: \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u0442 \u0446\u0435\u043d\u0443 \u043d\u0430 \u043c\u0435\u0441\u044f\u0446 (\u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c \u043c\u0435\u0441\u044f\u0446\u0430).</li> <li>func <code>materialize_opr_costs(conn, product_id: str | None = None)</code> \u2014 </li> <li>func <code>materialize_ovh_costs(conn, product_ids=None, year=2026)</code> \u2014 \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f\u041e\u041f\u0420  = \u03a3 ( mat_cost_g * depr_opr_share_g )</li> <li>func <code>materialize_ovh_flat(conn, product_ids=None)</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 ovh_flat \u0438\u0437 ovh_tree, \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044f \u041c\u0410\u0422\u0415\u0420\u0418\u0410\u041b\u042c\u041d\u0423\u042e \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e alloc_group:</li> <li>func <code>materialize_ovh_tree(conn, product_ids=None, max_depth: int = 20)</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 ovh_tree \u0441 \u043f\u0440\u043e\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u043d\u0438\u0435\u043c alloc_group (\u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0430\u044f \u0441\u0432\u0435\u0440\u0445\u0443 \u0437\u0430\u0434\u0430\u043d\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430).</li> <li>func <code>materialize_routing_flat(conn, product_id: str | None = None)</code> \u2014 \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 routing_flat \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 routing_tree \u0438 routing_operations.</li> <li>func <code>materialize_routing_tree(conn, product_id: str | None = None, max_depth: int = 20)</code> \u2014 </li> <li>func <code>materialize_scrap_cost_unit(conn, product_ids=None, year=2026)</code> \u2014 SCRAP = \u03a3 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c ( mat_cost_group * scrap_share[group] )</li> <li>func <code>run_routing_and_labor_pipeline(conn, product_ids=None, *, on_date=None, max_depth=20, clean_before=True)</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d:</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcpipeline","title":"Module <code>calc.pipeline</code>","text":"<ul> <li>func <code>debug_snapshot(conn, pid: str | None, tag: str)</code> \u2014 </li> <li>func <code>run_full_pipeline(conn, product_ids=None, *, max_depth=20, on_date=None, clean_before=True, dry_run=False) -&gt; str</code> \u2014 \u041c\u0430\u0441\u0441\u043e\u0432\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442:</li> <li>func <code>run_routing_and_labor_pipeline(conn, product_ids=None, *, on_date=None, max_depth=20, clean_before=True)</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d:</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcquality","title":"Module <code>calc.quality</code>","text":"<ul> <li>func <code>check_bom_components_missing_prices(conn)</code> \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 BOM \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 rm_prices (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>func <code>check_bom_unknown_items(conn)</code> \u2014 BOM \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432 items.</li> <li>func <code>check_budget_has_nonproduced(conn)</code> \u2014 \u0412 prod_budget \u0435\u0441\u0442\u044c product_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 items \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a is_produced=0.</li> <li>func <code>check_items_duplicate_article(conn)</code> \u2014 \u0414\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432 (\u043e\u0434\u0438\u043d article \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e item_id).</li> <li>func <code>check_items_nonproduced_has_routing_or_ovh(conn)</code> \u2014 \u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=0) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 routing_group/ovh_group_code (\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e).</li> <li>func <code>check_items_produced_missing_routing_or_ovh(conn)</code> \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=1), \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0443\u0441\u0442\u044b routing_group \u0438\u043b\u0438 ovh_group_code.</li> <li>func <code>check_items_required_fields(conn)</code> \u2014 \u041f\u0443\u0441\u0442\u044b\u0435/\u043d\u0443\u043b\u0435\u0432\u044b\u0435 article, name, uom.</li> <li>func <code>check_ovh_groups_missing_tariffs(conn, year: 'int | None' = None)</code> \u2014 \u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0437 ovh_flat, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 ovh_tariffs (\u043f\u043e \u0433\u043e\u0434\u0443; \u0435\u0441\u043b\u0438 \u0433\u043e\u0434 None \u2014 \u0431\u0435\u0440\u0451\u043c max(year)).</li> <li>func <code>check_routing_flat_missing_rates(conn)</code> \u2014 \u0414\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0438\u0437 routing_flat \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 labor_rates_snapshot.</li> <li>func <code>render_quality_ui(conn, st)</code> \u2014 \u042d\u043a\u0440\u0430\u043d \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0432\u0430\u0448\u0435\u0439 \u0432\u044c\u044e\u0448\u043a\u0435:</li> <li>func <code>run_quality_checks(conn, selected: 'list[str] | None' = None) -&gt; 'dict[str, pd.DataFrame]'</code> \u2014 selected: \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0434\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043e\u043a. \u0415\u0441\u043b\u0438 None \u2014 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calcrates_calc","title":"Module <code>calc.rates_calc</code>","text":"<ul> <li>class <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func <code>amounts_by_cc_for_elemgroup(conn, bud_year: int, cc_list: list[str], elem_list: list[str]) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>compare_with_previous(conn, df_current: pandas.core.frame.DataFrame, component_code: str, base_year: int | None = None) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0415\u0441\u043b\u0438 base_year \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043e\u043d \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e bud_year \u2192 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u043e\u043c base_year.</li> <li>func <code>compute_rates(conn, bud_year: int, months_ym: list[str], cc_root: str, kind: str = 'labor') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043a\u0438 = (\u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) / (\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b) \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0426\u0417.</li> <li>func <code>fetch_last_snapshot(conn, bud_year: int, component_code: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>hours_by_department(conn, months_ym: list[str]) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b \u043f\u043e \u0443\u0447\u0430\u0441\u0442\u043a\u0443 \u0437\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043c\u0435\u0441\u044f\u0446\u044b:</li> <li>func <code>save_rates_snapshot(conn, df_rates: pandas.core.frame.DataFrame, kind: str, replace_year: bool = True) -&gt; int</code> \u2014 \u041f\u0438\u0448\u0435\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u0430 \u043f\u043e kind.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-calctransfers","title":"Module <code>calc.transfers</code>","text":"<ul> <li>func <code>apply_transfer(conn, bud_year: int, rule_id: int, donorshare: float = 1.0, elem_root: str = 'MFC_PRIM_1', recipients_cc: list[str] | None = None, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0431\u0430\u0442\u0447 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u043d\u043e\u0441 (\u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043b\u044c\u0442\u044b).</li> <li>func <code>apply_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func <code>create_transfer_batch(conn, bud_year: int, rule_id: int, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func <code>find_zero_cc(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0426\u0417 \u0441 \u0447\u0430\u0441\u0430\u043c\u0438 &gt; 0 \u0438 \u043d\u0443\u043b\u0435\u0432\u044b\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\u0434\u043e\u0432\u044b\u043c headcount.</li> <li>func <code>get_cc_hours(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>get_opex_by_cc_elem(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>get_opex_by_cc_elem_detailed(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0421\u0443\u043c\u043c\u044b OPEX \u043f\u043e \u0426\u0417 \u0438 \u041a\u0410\u0416\u0414\u041e\u041c\u0423 elem_id \u0432\u043d\u0443\u0442\u0440\u0438 elem_root,</li> <li>func <code>get_personnel_year_base(conn, bud_year: int) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>plan_transfer(conn, bud_year: int, rule_id: int, donorshare: float = 1.0, elem_root: str = 'MFC_PRIM_1', recipients_cc: list[str] | None = None) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0432\u0430 DF: items_personnel, items_opex.</li> <li>func <code>plan_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432:</li> <li>func <code>revert_transfer(conn, batch_id: str)</code> \u2014 \u041e\u0442\u043a\u0430\u0442: \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0435\u043b\u044c\u0442\u044b; \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0435\u043c.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-db","title":"Package <code>db</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-dbconnection","title":"Module <code>db.connection</code>","text":"<ul> <li>class <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>contextmanager(func)</code> \u2014 @contextmanager decorator.</li> <li>func <code>get_table_info(conn, table: str)</code> \u2014 </li> <li>func <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-dbensure_mo","title":"Module <code>db.ensure_mo</code>","text":"<ul> <li>func <code>ensure_mo_tables(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-dbqueries","title":"Module <code>db.queries</code>","text":"<ul> <li>func <code>fetch_flat_bom_for_parent(conn, product_id)</code> \u2014 </li> <li>func <code>fetch_labor_cost_unit(conn, product_id)</code> \u2014 </li> <li>func <code>fetch_labor_total(conn, product_id) -&gt; float</code> \u2014 </li> <li>func <code>fetch_materials_from_bom(conn, product_id)</code> \u2014 </li> <li>func <code>fetch_produced_items(conn)</code> \u2014 </li> <li>func <code>search_items_by_tokens(conn, tokens: str | list[str], limit_per_token: int = 20) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0418\u0449\u0435\u0442 items \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 (\u0430\u0440\u0442\u0438\u043a\u0443\u043b/\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u043a\u043e\u0434).</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-dbschema","title":"Module <code>db.schema</code>","text":"<ul> <li>func <code>add_column_if_missing(conn, table: str, coldef: str)</code> \u2014 </li> <li>func <code>column_exists(conn, table: str, column: str) -&gt; bool</code> \u2014 </li> <li>func <code>ensure_bom_struct_stage_table(conn)</code> \u2014 </li> <li>func <code>ensure_bom_table(conn)</code> \u2014 </li> <li>func <code>ensure_budget_tables(conn)</code> \u2014 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0431\u044e\u0434\u0436\u0435\u0442\u0430 OPEX.</li> <li>func <code>ensure_cc_extra_columns(conn)</code> \u2014 </li> <li>func <code>ensure_depr_opr_cost_tables(conn)</code> \u2014 </li> <li>func <code>ensure_depr_opr_rates(conn)</code> \u2014 </li> <li>func <code>ensure_items_columns(conn)</code> \u2014 </li> <li>func <code>ensure_labor_cost_table(conn)</code> \u2014 </li> <li>func <code>ensure_labor_hours_table(conn)</code> \u2014 </li> <li>func <code>ensure_labor_rates_snapshot_schema(conn)</code> \u2014 </li> <li>func <code>ensure_mo_tables(conn)</code> \u2014 </li> <li>func <code>ensure_ovh_cost_unit_table(conn)</code> \u2014 </li> <li>func <code>ensure_ovh_flat_table(conn)</code> \u2014 </li> <li>func <code>ensure_ovh_tariffs_table(conn)</code> \u2014 </li> <li>func <code>ensure_prod_budget_table(conn)</code> \u2014 </li> <li>func <code>ensure_routing_flat_table(conn)</code> \u2014 </li> <li>func <code>ensure_routing_tree_table(conn)</code> \u2014 </li> <li>func <code>ensure_routings_columns(conn)</code> \u2014 </li> <li>func <code>ensure_run_logging(conn)</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>ensure_scrap_cost_unit_table(conn)</code> \u2014 </li> <li>func <code>ensure_transfers_schema(conn)</code> \u2014 </li> <li>func <code>ensure_unique_routing_group(conn)</code> \u2014 </li> <li>func <code>get_table_info(conn, table: str)</code> \u2014 </li> <li>func <code>table_exists(conn, name: str) -&gt; bool</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-loaders","title":"Package <code>loaders</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersccg_wru_loader","title":"Module <code>loaders.ccg_wru_loader</code>","text":"<ul> <li>class <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func <code>ensure_cc_extra_columns(conn)</code> \u2014 </li> <li>func <code>load_cc_structure_twofiles(conn: 'sqlite3.Connection', groups_path: 'str', leaves_path: 'str', sheet_name: 'str | None' = None)</code> \u2014 </li> <li>func <code>parse_groups_from_ccg(df: 'pd.DataFrame') -&gt; 'Tuple[List[Dict], List[Tuple[str, str]]]'</code> \u2014 </li> <li>func <code>parse_leaves_from_list(df: 'pd.DataFrame') -&gt; 'Tuple[List[Dict], List[Tuple[str, str]]]'</code> \u2014 </li> <li>func <code>upsert_cc(conn: 'sqlite3.Connection', nodes: 'List[Dict]', edges: 'List[Tuple[str, str]]')</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersload_cost_structures","title":"Module <code>loaders.load_cost_structures</code>","text":"<ul> <li>class <code>Any(*args, **kwargs)</code> \u2014 Special type indicating an unconstrained type.</li> <li>func <code>cc_duplicates_report(conn: sqlite3.Connection) -&gt; Dict[str, pandas.core.frame.DataFrame]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 DataFrame:</li> <li>func <code>ensure_schema(conn: sqlite3.Connection) -&gt; None</code> \u2014 </li> <li>func <code>main()</code> \u2014 </li> <li>func <code>parse_ccg(df: pandas.core.frame.DataFrame) -&gt; Tuple[List[Dict], List[Tuple[str, str]]]</code> \u2014 \u0420\u0430\u0437\u0431\u043e\u0440 CCG WRU \u0441 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u043e\u0439 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u043c\u0451\u043d \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0443\u0440\u043e\u0432\u043d\u0435\u0439 (Level0/LEVEL 1/L2/\u0423\u0440\u043e\u0432\u0435\u043d\u044c 3 \u0438 \u0442.\u0434.).</li> <li>func <code>parse_mfc(df: pandas.core.frame.DataFrame, leaf_level: int = 5) -&gt; Tuple[List[Dict], List[Tuple[str, str]]]</code> \u2014 \u0421\u043a\u043e\u043b\u044c\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443 MFCPRIM:</li> <li>func <code>quality_checks(conn: sqlite3.Connection) -&gt; Dict[str, int]</code> \u2014 </li> <li>func <code>upsert_cc(conn: sqlite3.Connection, nodes: List[Dict], edges: List[Tuple[str, str]]) -&gt; None</code> \u2014 </li> <li>func <code>upsert_elem(conn, nodes, edges)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersloader_mo_prices","title":"Module <code>loaders.loader_mo_prices</code>","text":"<ul> <li>class <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersloaders","title":"Module <code>loaders.loaders</code>","text":"<ul> <li>class <code>Decimal(value='0', context=None)</code> \u2014 Construct a new Decimal object. 'value' can be an integer, string, tuple,</li> <li>class <code>InvalidOperation(...)</code> \u2014 Base class for arithmetic errors.</li> <li>func <code>apply_department_suggestions(conn, df_suggestions)</code> \u2014 \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 suggested_dept \u043a \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0441 UNASSIGNED/\u043f\u0443\u0441\u0442\u044b\u043c \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u043e\u043c.</li> <li>func <code>diagnose_routings(conn)</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c DataFrame'\u043e\u0432:</li> <li>func <code>ensure_bom_struct_stage_table(conn)</code> \u2014 </li> <li>func <code>ensure_items_columns(conn)</code> \u2014 </li> <li>func <code>ensure_ovh_tariffs_table(conn)</code> \u2014 </li> <li>func <code>ensure_prod_budget_table(conn)</code> \u2014 </li> <li>func <code>ensure_routings_columns(conn)</code> \u2014 </li> <li>func <code>load_ovh_tariffs_from_xlsx(conn, xlsx_path: 'str', year: 'int')</code> \u2014 \u041e\u0436\u0438\u0434\u0430\u0435\u0442\u0441\u044f 5 \u043a\u043e\u043b\u043e\u043d\u043e\u043a:</li> <li>func <code>load_prod_budget_from_xlsx(conn, xlsx_path: 'str', article_aliases=None, name_aliases=None)</code> \u2014 \u0414\u0432\u0443\u0445\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a: \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c header=[0,1].</li> <li>func <code>normalize_department_code(dept_raw, operation_text: 'str')</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 (dept_code, source), \u0433\u0434\u0435 source \u2208 {\"given\",\"inferred\",\"default\"}.</li> <li>func <code>safe_col(df: pandas.core.frame.DataFrame, name: str, default=None)</code> \u2014 </li> <li>func <code>split_work_type(row) -&gt; 'pd.Series'</code> \u2014 \u0418\u0437 \"\u0412\u0438\u0434 \u0440\u0430\u0431\u043e\u0442\" \u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u044c operation \u0438 department.</li> <li>func <code>sync_bom_struct_from_stage(conn, spec_codes: 'list[str] | None' = None)</code> \u2014 </li> <li>func <code>to_float_ru(x)</code> \u2014 </li> <li>func <code>upsert_bom_general(conn, df: 'pd.DataFrame', allow_stub_items: 'bool' = False)</code> \u2014 </li> <li>func <code>upsert_bom_struct(conn, df: 'pd.DataFrame', *, default_qty_if_blank: 'float' = 1.0, create_stub_items: 'bool' = True, source_batch: 'str | None' = None)</code> \u2014 </li> <li>func <code>upsert_depr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func <code>upsert_items(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func <code>upsert_labor_rates_periodic(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func <code>upsert_labor_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func <code>upsert_opr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func <code>upsert_rm_prices(conn, df: 'pd.DataFrame', filename: 'str')</code> \u2014 </li> <li>func <code>upsert_routings(conn, df: 'pd.DataFrame')</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 routing \u043d\u0430 \u043e\u0434\u0438\u043d routing_group.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersopex_loader","title":"Module <code>loaders.opex_loader</code>","text":"<ul> <li>func <code>commit_opex(conn: sqlite3.Connection, load_id: str, bud_year: int = 2026) -&gt; tuple[int, float]</code> \u2014 </li> <li>func <code>diagnose_opex_stage(conn, load_id: str) -&gt; dict</code> \u2014 </li> <li>func <code>read_opex_excel(path: str, sheet_name: str = 'INPUT') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>stage_opex(conn, df: pandas.core.frame.DataFrame, sheet_name: str, treat_empty_as_zero: bool = False)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loaderspersonnel_loader","title":"Module <code>loaders.personnel_loader</code>","text":"<ul> <li>class <code>BinaryIO()</code> \u2014 Typed version of the return of open() in binary mode.</li> <li>func <code>load_personnel_monthly_from_excel(conn, xls: 'ExcelInput', bud_year: 'int', sheet: 'Optional[str]' = None, clear_year_first: 'bool' = False, source: 'str' = 'file', note: 'str' = None) -&gt; 'tuple[int, pd.DataFrame]'</code> \u2014 \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c (personnel_monthly) \u0438\u0437 xlsx \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a\u0430\u043a \u0432 110_HC_2026.xlsx.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersrules_loader","title":"Module <code>loaders.rules_loader</code>","text":"<ul> <li>func <code>ensure_rules_schema(conn: 'sqlite3.Connection') -&gt; 'None'</code> \u2014 </li> <li>func <code>list_rules(conn: 'sqlite3.Connection', q: 'Optional[str]' = None, limit: 'int' = 500) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func <code>read_rules_excel(xlsx_path: 'str') -&gt; 'Tuple[pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0427\u0438\u0442\u0430\u0435\u0442 \u043e\u0431\u0430 \u043b\u0438\u0441\u0442\u0430 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430: detail_rules \u0438 fallback_rules (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c).</li> <li>func <code>toggle_rule(conn: 'sqlite3.Connection', rule_id: 'int', enabled: 'bool') -&gt; 'None'</code> \u2014 </li> <li>func <code>update_rule_row(conn: 'sqlite3.Connection', row: 'Dict') -&gt; 'None'</code> \u2014 </li> <li>func <code>upsert_rules(conn: 'sqlite3.Connection', df_rules: 'pd.DataFrame', enable: 'bool' = True) -&gt; 'int'</code> \u2014 \u041c\u0430\u0441\u0441\u043e\u0432\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u043f\u0440\u0430\u0432\u0438\u043b. \u0415\u0441\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0441 \u0442\u0435\u043c\u0438 \u0436\u0435 (priority, cost_type, pattern, elem_id) \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u2014</li> <li>func <code>validate_rules(conn: 'sqlite3.Connection', df_rules: 'pd.DataFrame') -&gt; 'pd.DataFrame'</code> \u2014 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430: elem_id \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 elem_nodes; \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0443\u0441\u0442\u044b\u043c cost_type \u0438 pattern \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersupdater","title":"Module <code>loaders.updater</code>","text":"<ul> <li>class <code>datetime(...)</code> \u2014 datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])</li> <li>func <code>apply_items_updates(conn, preview_df: 'pd.DataFrame') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_items_updates; \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 UPDATE \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c.</li> <li>func <code>apply_std_prices(conn, preview_df: 'pd.DataFrame', source_name: 'str') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_std_prices (\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c note IS NULL),</li> <li>func <code>preview_items_updates(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func <code>preview_std_prices(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0, article_col='Material', price_col='STD 2026', uom='\u0428\u0422', currency='RUB') -&gt; 'pd.DataFrame'</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-loadersutils","title":"Module <code>loaders.utils</code>","text":"<ul> <li>func <code>drop_1c_totals(df: pandas.core.frame.DataFrame) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>read_1c_txt(file_bytes: bytes, encoding='auto') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>read_excel(file_bytes: bytes) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>safe_col(df: pandas.core.frame.DataFrame, name: str, default=None)</code> \u2014 </li> <li>func <code>to_float_ru(x)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-app","title":"Package <code>app</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-appapp-import-failed","title":"Module <code>app.app</code> \u2014 import failed","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-appinit_db","title":"Module <code>app.init_db</code>","text":"<ul> <li>class <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> <li>func <code>main()</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-ui","title":"Package <code>ui</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiadmin_table_editor","title":"Module <code>ui.admin_table_editor</code>","text":"<ul> <li>func <code>render_table_editor(conn: sqlite3.Connection)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiapp_streamlit","title":"Module <code>ui.app_streamlit</code>","text":"<ul> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>ensure_unique_routing_group(conn)</code> \u2014 </li> <li>func <code>main()</code> \u2014 </li> <li>func <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func <code>render_admin(db_path: str, encoding='auto')</code> \u2014 </li> <li>func <code>render_budget_run(db_path: str)</code> \u2014 </li> <li>func <code>render_bulk_run(db_path: str)</code> \u2014 </li> <li>func <code>render_item_cost(db_path: str)</code> \u2014 </li> <li>func <code>render_updater(db_path: str)</code> \u2014 </li> <li>func <code>run_nsi_refs()</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-uicomponents","title":"Package <code>ui.components</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uicomponentsitem_picker","title":"Module <code>ui.components.item_picker</code>","text":"<ul> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>item_paste_picker(db_path: str, key_prefix: str = 'picker', title: str = '\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430') -&gt; List[str]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 item_id.</li> <li>func <code>search_items_by_tokens(conn, tokens: str | list[str], limit_per_token: int = 20) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0418\u0449\u0435\u0442 items \u043f\u043e \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 (\u0430\u0440\u0442\u0438\u043a\u0443\u043b/\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u043a\u043e\u0434).</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uicomponentsset_window_title","title":"Module <code>ui.components.set_window_title</code>","text":"<ul> <li>func <code>set_window_title(title: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_admin","title":"Module <code>ui.views_admin</code>","text":"<ul> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>ensure_mo_tables(conn)</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> <li>func <code>materialize_mo_cost_unit(conn, *, on_date: str | None = None)</code> \u2014 \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 mo_cost_unit \u0438\u0437 bom_flat \u00d7 mo_last_price (\u043d\u0430 \u0434\u0430\u0442\u0443 \u0438\u043b\u0438 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0439).</li> <li>func <code>read_1c_txt(file_bytes: bytes, encoding='auto') -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>read_excel(file_bytes: bytes) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>render(db_path: str, encoding='auto')</code> \u2014 </li> <li>func <code>sync_bom_struct_from_stage(conn, spec_codes: 'list[str] | None' = None)</code> \u2014 </li> <li>func <code>upsert_bom_general(conn, df: 'pd.DataFrame', allow_stub_items: 'bool' = False)</code> \u2014 </li> <li>func <code>upsert_bom_struct(conn, df: 'pd.DataFrame', *, default_qty_if_blank: 'float' = 1.0, create_stub_items: 'bool' = True, source_batch: 'str | None' = None)</code> \u2014 </li> <li>func <code>upsert_depr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func <code>upsert_items(conn, df: 'pd.DataFrame')</code> \u2014 </li> <li>func <code>upsert_labor_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func <code>upsert_opr_rates_snapshot(conn, df: 'pd.DataFrame', default_year: 'int | None' = None, source: 'str' = 'file')</code> \u2014 </li> <li>func <code>upsert_rm_prices(conn, df: 'pd.DataFrame', filename: 'str')</code> \u2014 </li> <li>func <code>upsert_routings(conn, df: 'pd.DataFrame')</code> \u2014 \u0415\u0434\u0438\u043d\u044b\u0439 routing \u043d\u0430 \u043e\u0434\u0438\u043d routing_group.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_budget","title":"Module <code>ui.views_budget</code>","text":"<ul> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>load_prod_budget_from_xlsx(conn, xlsx_path: 'str', article_aliases=None, name_aliases=None)</code> \u2014 \u0414\u0432\u0443\u0445\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a: \u0441\u043a\u043b\u0435\u0438\u0432\u0430\u0435\u043c header=[0,1].</li> <li>func <code>normalize_db_path(raw: str | pathlib.Path) -&gt; pathlib.Path</code> \u2014 </li> <li>func <code>render_budget_run(db_path: str)</code> \u2014 </li> <li>func <code>render_rates_calc(conn: sqlite3.Connection)</code> \u2014 </li> <li>func <code>render_transfers(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_bulk_run","title":"Module <code>ui.views_bulk_run</code>","text":"<ul> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>item_paste_picker(db_path: str, key_prefix: str = 'picker', title: str = '\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430') -&gt; List[str]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 item_id.</li> <li>func <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_item_cost","title":"Module <code>ui.views_item_cost</code>","text":"<ul> <li>func <code>build_unified_compact_table(conn, product_id: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0432\u0438\u0434: \u0441\u0443\u043c\u043c\u044b \u043f\u043e \u0441\u0435\u043a\u0446\u0438\u044f\u043c + TOTAL (\u0438 \u0434\u043e\u043b\u044f \u0441\u0435\u043a\u0446\u0438\u0438 \u043e\u0442 TOTAL).</li> <li>func <code>build_unified_detailed_table(conn, product_id) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u0432\u0438\u0434 \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430:</li> <li>func <code>compute_item_cost_unified(conn, product_id)</code> \u2014 \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0432\u0438\u0434: \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0435\u043a\u0446\u0438\u0439 + \u043f\u043e\u0434\u0438\u0442\u043e\u0433\u0438 \u043f\u043e \u0441\u0435\u043a\u0446\u0438\u044f\u043c + GRAND.</li> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>item_paste_picker(db_path: str, key_prefix: str = 'picker', title: str = '\u0412\u044b\u0431\u043e\u0440 \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430') -&gt; List[str]</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 item_id.</li> <li>func <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_mo_loader","title":"Module <code>ui.views_mo_loader</code>","text":"<ul> <li>func <code>load_mo_prices(path: str, conn, *, sheet_name: int | str = 0, vendor: Optional[str] = None, effective_from: Optional[str] = None, effective_to: Optional[str] = None, source: Optional[str] = None, preview_only: bool = True)</code> \u2014 </li> <li>func <code>view_mo_loader(conn)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_quality","title":"Module <code>ui.views_quality</code>","text":"<ul> <li>func <code>check_bom_components_missing_prices(conn)</code> \u2014 \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0438\u0437 BOM \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 rm_prices (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435).</li> <li>func <code>check_bom_unknown_items(conn)</code> \u2014 BOM \u0441 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430\u043c\u0438, \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0432 items.</li> <li>func <code>check_budget_has_nonproduced(conn)</code> \u2014 \u0412 prod_budget \u0435\u0441\u0442\u044c product_id, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 items \u043f\u043e\u043c\u0435\u0447\u0435\u043d \u043a\u0430\u043a is_produced=0.</li> <li>func <code>check_items_duplicate_article(conn)</code> \u2014 \u0414\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432 (\u043e\u0434\u0438\u043d article \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e item_id).</li> <li>func <code>check_items_nonproduced_has_routing_or_ovh(conn)</code> \u2014 \u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=0) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 routing_group/ovh_group_code (\u043f\u043e\u0434\u043e\u0437\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e).</li> <li>func <code>check_items_produced_missing_routing_or_ovh(conn)</code> \u2014 \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (is_produced=1), \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0443\u0441\u0442\u044b routing_group \u0438\u043b\u0438 ovh_group_code.</li> <li>func <code>check_items_required_fields(conn)</code> \u2014 \u041f\u0443\u0441\u0442\u044b\u0435/\u043d\u0443\u043b\u0435\u0432\u044b\u0435 article, name, uom.</li> <li>func <code>check_ovh_groups_missing_tariffs(conn, year: 'int | None' = None)</code> \u2014 \u0413\u0440\u0443\u043f\u043f\u044b \u0438\u0437 ovh_flat, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 ovh_tariffs (\u043f\u043e \u0433\u043e\u0434\u0443; \u0435\u0441\u043b\u0438 \u0433\u043e\u0434 None \u2014 \u0431\u0435\u0440\u0451\u043c max(year)).</li> <li>func <code>check_routing_flat_missing_rates(conn)</code> \u2014 \u0414\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0438\u0437 routing_flat \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 labor_rates_snapshot.</li> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_rates","title":"Module <code>ui.views_rates</code>","text":"<ul> <li>func <code>compare_with_previous(conn, df_current: pandas.core.frame.DataFrame, component_code: str, base_year: int | None = None) -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0415\u0441\u043b\u0438 base_year \u0443\u043a\u0430\u0437\u0430\u043d \u0438 \u043e\u043d \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e bud_year \u2192 \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u043e\u043c base_year.</li> <li>func <code>compute_rates(conn, bud_year: int, months_ym: list[str], cc_root: str, kind: str = 'labor') -&gt; pandas.core.frame.DataFrame</code> \u2014 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u0441\u0442\u0430\u0432\u043a\u0438 = (\u0421\u0443\u043c\u043c\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432) / (\u041f\u043b\u0430\u043d\u043e\u0432\u044b\u0435 \u0447\u0430\u0441\u044b) \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0426\u0417.</li> <li>func <code>fetch_last_snapshot(conn, bud_year: int, component_code: str) -&gt; pandas.core.frame.DataFrame</code> \u2014 </li> <li>func <code>render_rates_calc(conn: sqlite3.Connection)</code> \u2014 </li> <li>func <code>save_rates_snapshot(conn, df_rates: pandas.core.frame.DataFrame, kind: str, replace_year: bool = True) -&gt; int</code> \u2014 \u041f\u0438\u0448\u0435\u0442 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u043d\u0430\u043f\u0448\u043e\u0442\u0430 \u043f\u043e kind.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_transfers","title":"Module <code>ui.views_transfers</code>","text":"<ul> <li>func <code>apply_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21', comment: 'str' = 'efficiency normalize', created_by: 'str | None' = None) -&gt; 'str'</code> \u2014 </li> <li>func <code>apply_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True, comment: str = '', created_by: str = None) -&gt; str</code> \u2014 </li> <li>func <code>compute_efficiency_table(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21') -&gt; 'pd.DataFrame'</code> \u2014 \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0426\u0417:</li> <li>func <code>ensure_transfers_schema(conn)</code> \u2014 </li> <li>func <code>load_personnel_monthly_from_excel(conn, xls: 'ExcelInput', bud_year: 'int', sheet: 'Optional[str]' = None, clear_year_first: 'bool' = False, source: 'str' = 'file', note: 'str' = None) -&gt; 'tuple[int, pd.DataFrame]'</code> \u2014 \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c (personnel_monthly) \u0438\u0437 xlsx \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u043a\u0430\u043a \u0432 110_HC_2026.xlsx.</li> <li>func <code>plan_efficiency_normalization(conn, bud_year: 'int', hours_per_person: 'float' = 1972, elem_root: 'str' = 'MFC_PRIM_1', cc_root: 'str' = 'RU1OP1P21') -&gt; 'tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame]'</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:</li> <li>func <code>plan_transfer_by_rules(conn, bud_year: int, elem_root: str = 'MFC_PRIM_1', cc_root: str = 'RU1OP1P21', allow_fallback_global: bool = True) -&gt; tuple[pandas.core.frame.DataFrame, pandas.core.frame.DataFrame]</code> \u2014 \u0421\u0442\u0440\u043e\u0438\u0442 \u043f\u043b\u0430\u043d \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u043e\u0432:</li> <li>func <code>render_transfers(conn)</code> \u2014 </li> <li>func <code>revert_transfer(conn, batch_id: str)</code> \u2014 \u041e\u0442\u043a\u0430\u0442: \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0434\u0435\u043b\u044c\u0442\u044b; \u0431\u0430\u0437\u043e\u0432\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0435\u043c.</li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-uiviews_updater","title":"Module <code>ui.views_updater</code>","text":"<ul> <li>func <code>apply_items_updates(conn, preview_df: 'pd.DataFrame') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_items_updates; \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 UPDATE \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044f\u043c.</li> <li>func <code>apply_std_prices(conn, preview_df: 'pd.DataFrame', source_name: 'str') -&gt; 'int'</code> \u2014 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u0437 preview_std_prices (\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c note IS NULL),</li> <li>func <code>connect_sqlite(p: str | pathlib.Path) -&gt; sqlite3.Connection</code> \u2014 </li> <li>func <code>ensure_schema(conn)</code> \u2014 </li> <li>func <code>preview_items_updates(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0) -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func <code>preview_std_prices(conn, excel_bytes: 'bytes', sheet: 'str | int' = 0, article_col='Material', price_col='STD 2026', uom='\u0428\u0422', currency='RUB') -&gt; 'pd.DataFrame'</code> \u2014 </li> <li>func <code>render(db_path: str)</code> \u2014 </li> </ul>"},{"location":"zz_old/backup/PROJECT_OVERVIEW/#package-config","title":"Package <code>config</code>","text":""},{"location":"zz_old/backup/PROJECT_OVERVIEW/#module-configsettings","title":"Module <code>config.settings</code>","text":"<ul> <li>class <code>Path(*args, **kwargs)</code> \u2014 PurePath subclass that can make system calls.</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/","title":"\ud83d\udcd8 Mini-ERP \u2014 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435","text":"<p>\u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f ERP-\u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043d\u0430 Python + SQLite + Streamlit \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0451\u0442\u0430 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438, \u0431\u044e\u0434\u0436\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u043a\u0432\u043e\u0437\u043d\u043e\u0439 \u043f\u0443\u0442\u044c: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2192 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f \u2192 \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0439 \u0440\u0430\u0441\u0447\u0451\u0442 \u2192 \u0431\u044e\u0434\u0436\u0435\u0442/\u043e\u0442\u0447\u0451\u0442\u044b. </p>"},{"location":"zz_old/backup/README_BG_Calc/#_1","title":"\ud83d\udcc2 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u043f\u0430\u043f\u043a\u0438/\u043c\u043e\u0434\u0443\u043b\u0438)","text":"<ul> <li><code>ui/</code> \u2014 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Streamlit: \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 <code>app_streamlit.py</code>, \u044d\u043a\u0440\u0430\u043d\u044b \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438, \u043c\u0430\u0441\u0441\u043e\u0432\u044b\u0445 \u043f\u0440\u043e\u0433\u043e\u043d\u043e\u0432, \u0431\u044e\u0434\u0436\u0435\u0442\u043e\u0432. </li> <li><code>calc/</code> \u2014 \u0434\u043e\u043c\u0435\u043d\u043d\u044b\u0435 \u0440\u0430\u0441\u0447\u0451\u0442\u044b: \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432, \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438, \u0431\u044e\u0434\u0436\u0435\u0442, \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d. </li> <li><code>db/</code> \u2014 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>ensure_*</code> \u0434\u043b\u044f \u0441\u0445\u0435\u043c \u0411\u0414. </li> <li><code>loaders/</code> \u2014 \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 XLSX/TXT (\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b, \u0441\u0442\u0430\u0432\u043a\u0438, \u0446\u0435\u043d\u044b, \u0431\u044e\u0434\u0436\u0435\u0442). </li> <li><code>config/</code> \u2014 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0443\u0442\u0435\u0439/\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043e\u043a. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#etl","title":"\ud83d\udd04 \u041f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445 (ETL \u2192 \u0440\u0430\u0441\u0447\u0451\u0442\u044b \u2192 \u043e\u0442\u0447\u0451\u0442\u044b)","text":"<ol> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u2192 SQLite (items, BOM, \u0446\u0435\u043d\u044b, \u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0442.\u0434.).</li> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u0441\u0442\u0440\u043e\u044f\u0442\u0441\u044f <code>routing_tree/routing_flat</code>, \u0442\u0440\u0443\u0434/\u0430\u043c\u043e\u0440\u0442/\u041e\u041f\u0420/overhead, scrap.</li> <li>\u041a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u044f: \u0441\u0431\u043e\u0440 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u043e \u0438\u0437\u0434\u0435\u043b\u0438\u044e \u0432 \u0435\u0434\u0438\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443.</li> <li>\u0411\u044e\u0434\u0436\u0435\u0442: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u043b\u0430\u043d\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0431\u0435\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e, \u044d\u043a\u0441\u043f\u043e\u0440\u0442 \u0432 Excel. </li> </ol> <p>\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: <code>materialize_*</code>, <code>compute_item_cost_unified</code>, <code>build_unified_(detailed|compact)_table</code>, <code>run_full_pipeline</code>, <code>export_budget_to_excel</code>. </p>"},{"location":"zz_old/backup/README_BG_Calc/#_2","title":"\ud83d\uddc4\ufe0f \u0421\u0445\u0435\u043c\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043f\u043e\u043b\u044f)","text":"<p>\u041d\u0438\u0436\u0435 \u2014 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a (\u0444\u0430\u043a\u0442, \u0431\u0435\u0437 \u043b\u0438\u0448\u043d\u0435\u0439 \u0442\u0435\u043e\u0440\u0438\u0438). \u0421\u0441\u044b\u043b\u043a\u0438 \u2014 \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u0440\u0430\u0441\u0447\u0451\u0442\u0430\u0445.</p>"},{"location":"zz_old/backup/README_BG_Calc/#1","title":"1) \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438 \u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0435","text":""},{"location":"zz_old/backup/README_BG_Calc/#items","title":"<code>items</code>","text":"<ul> <li><code>item_id</code> (TEXT, PK) \u2014 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u043a\u043e\u0434 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0441\u0447\u0451\u0442\u0430\u0445 \u0438 \u0441\u0432\u044f\u0437\u044f\u0445).</li> <li><code>article</code> (TEXT, \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439) \u2014 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0430\u0440\u0442\u0438\u043a\u0443\u043b (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 UI \u0438 Excel-\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430\u0445).</li> <li><code>name</code> (TEXT) \u2014 \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435.</li> <li><code>uom</code> (TEXT) \u2014 \u0435\u0434\u0438\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u0440\u0435\u043d\u0438\u044f (\u0428\u0422/\u041a\u0413/\u2026).</li> <li><code>is_produced</code> (INT 0/1) \u2014 \u0444\u043b\u0430\u0433 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438.</li> <li><code>routing_group</code> (TEXT, \u043e\u043f\u0446.) \u2014 \u0433\u0440\u0443\u043f\u043f\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u0437\u0434\u0435\u043b\u0438\u044f (\u0434\u043b\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438/\u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f).</li> <li><code>ovh_group_code</code> (TEXT, \u043e\u043f\u0446.) \u2014 \u043a\u043e\u0434 overhead-\u0433\u0440\u0443\u043f\u043f\u044b \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u0437\u0434\u0435\u043b\u0438\u044f (\u041000/\u2026).</li> </ul> <p>\u0412 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a <code>article</code>, \u0430 \u0432\u0441\u0435 \u0441\u0432\u044f\u0437\u0438 \u0438\u0434\u0443\u0442 \u043f\u043e <code>item_id</code>.</p>"},{"location":"zz_old/backup/README_BG_Calc/#bom","title":"<code>bom</code>","text":"<ul> <li><code>parent_item_id</code> (TEXT) \u2014 \u0443\u0437\u0435\u043b \u0432\u044b\u0448\u0435.</li> <li><code>component_item_id</code> (TEXT) \u2014 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442.</li> <li><code>level</code> (INT) \u2014 \u0433\u043b\u0443\u0431\u0438\u043d\u0430 (1 \u2014 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442).</li> <li><code>path</code> (TEXT) \u2014 \u043f\u0443\u0442\u044c \u043e\u0442 \u043a\u043e\u0440\u043d\u044f: <code>FG \u203a \u2026 \u203a parent_id \u203a component_id</code> (\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u044e\u0442\u0441\u044f).</li> <li><code>qty_per_unit</code> (REAL) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 FG.</li> </ul> <p>\u0412 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u043c \u043e\u0442\u0447\u0451\u0442\u0435 \u0434\u043b\u044f \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0441\u0442\u0440\u043e\u0438\u0442\u0441\u044f <code>context</code>:</p> <ul> <li>\u043d\u0430 <code>level=1</code> \u2014 \u0430\u0440\u0442\u0438\u043a\u0443\u043b FG,</li> <li>\u043d\u0430 <code>level\u22652</code> \u2014 \u0430\u0440\u0442\u0438\u043a\u0443\u043b \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0438\u0437 <code>path</code>.</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#rm_prices","title":"<code>rm_prices</code> \u2014 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0446\u0435\u043d \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432","text":"<ul> <li><code>item_code</code> (TEXT) \u2014 = <code>items.item_id</code>.</li> <li><code>article</code> (TEXT) \u2014 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f.</li> <li><code>uom</code> (TEXT)</li> <li><code>price</code> (REAL) \u2014 \u0446\u0435\u043d\u0430 \u0437\u0430 UOM.</li> <li><code>currency</code> (TEXT, \u043d\u0430\u043f\u0440. <code>RUB</code>).</li> <li><code>source</code> (TEXT) \u2014 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a/\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438.</li> <li><code>loaded_at</code> (TEXT, <code>YYYY-MM-DD HH:MM:SS</code>) \u2014 \u0448\u0442\u0430\u043c\u043f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438.</li> </ul> <p>\u041a\u0430\u043a \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0446\u0435\u043d\u0430: CTE <code>last_price</code> \u0431\u0435\u0440\u0451\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043f\u043e <code>loaded_at</code> \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e <code>item_code</code> (\u0441\u043c. SQL-\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0432 \u0440\u0430\u0441\u0447\u0451\u0442\u0430\u0445). </p> <p>\u26a0\ufe0f \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0446\u0435\u043d: \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043d\u0430 <code>item_code/currency</code>. \u0412 \u043e\u0442\u0447\u0451\u0442\u0430\u0445 \u0432\u0441\u0435\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0430\u043c\u0430\u044f \u0441\u0432\u0435\u0436\u0430\u044f.</p>"},{"location":"zz_old/backup/README_BG_Calc/#routing_flat","title":"<code>routing_flat</code>","text":"<ul> <li><code>product_id</code> (TEXT) \u2014 <code>item_id</code> \u0438\u0437\u0434\u0435\u043b\u0438\u044f.</li> <li><code>routing_name</code> (TEXT) \u2014 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438/\u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430.</li> <li><code>department_code</code> (TEXT) \u2014 \u0446\u0435\u0445/\u0443\u0447\u0430\u0441\u0442\u043e\u043a.</li> <li><code>hours_per_unit</code> (REAL) \u2014 \u0442\u0440\u0443\u0434\u043e\u0451\u043c\u043a\u043e\u0441\u0442\u044c \u043d\u0430 1 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 FG (\u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f). </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#labor_rates_snapshot","title":"<code>labor_rates_snapshot</code>","text":"<ul> <li><code>department_code</code> (TEXT)</li> <li><code>rate_per_hour</code> (REAL)</li> <li><code>currency</code> (TEXT)</li> </ul> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f <code>hours_per_unit</code> \u2192 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u0442\u0440\u0443\u0434\u0430.</p>"},{"location":"zz_old/backup/README_BG_Calc/#2","title":"2) \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 / \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435","text":""},{"location":"zz_old/backup/README_BG_Calc/#labor_cost_unit-depr_cost_unit-opr_cost_unit","title":"<code>labor_cost_unit</code>, <code>depr_cost_unit</code>, <code>opr_cost_unit</code>","text":"<ul> <li><code>product_id</code> (TEXT)</li> <li><code>department_code</code> (TEXT)</li> <li><code>hours_total</code> (REAL)</li> <li><code>rate_per_hour</code> (REAL)</li> <li><code>cost_total</code> (REAL)</li> </ul> <p>\u042d\u0442\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0443\u0436\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u043f\u043e \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u0430\u043c \u2014 \u043e\u0442\u0442\u0443\u0434\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0431\u0435\u0440\u0451\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434, \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e) \u0438 \u041e\u041f\u0420 (\u0446\u0435\u0445\u043e\u0432\u044b\u0435) \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u0447\u0451\u0442\u0430. </p>"},{"location":"zz_old/backup/README_BG_Calc/#scrap_cost_unit","title":"<code>scrap_cost_unit</code>","text":"<ul> <li><code>product_id</code> (TEXT)</li> <li><code>overhead_group_code</code> (TEXT)</li> <li><code>scrap_cost</code> (REAL)</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#ovh_tree-ovh_flat","title":"<code>ovh_tree</code>, <code>ovh_flat</code>","text":"<ul> <li>\u0414\u0435\u0440\u0435\u0432\u043e \u0438 \u043f\u043b\u043e\u0441\u043a\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a overhead-\u0433\u0440\u0443\u043f\u043f \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439.</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#ovh_tariffs","title":"<code>ovh_tariffs</code>","text":"<ul> <li><code>overhead_group</code> (TEXT)</li> <li><code>year</code> (INT)</li> <li>\u043f\u043e\u043b\u044f \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u0410\u043c\u043e\u0440\u0442 \u041e\u041f\u0420, \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0443, \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435 (\u043d\u0430\u0431\u043e\u0440 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0438).</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#ovh_cost_unit","title":"<code>ovh_cost_unit</code>","text":"<ul> <li><code>product_id</code> (TEXT)</li> <li><code>overhead_group_code</code> (TEXT)</li> <li><code>depr_opr_cost</code> (REAL)</li> <li><code>log_cost</code> (REAL)</li> <li><code>adm_cost</code> (REAL)</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#3","title":"3) \u0411\u044e\u0434\u0436\u0435\u0442","text":""},{"location":"zz_old/backup/README_BG_Calc/#prod_budget","title":"<code>prod_budget</code>","text":"<ul> <li><code>product_id</code> (TEXT, = <code>items.item_id</code>)</li> <li><code>month_code</code> (TEXT <code>YYYY-MM</code>)</li> <li><code>qty</code> (REAL) \u2014 \u043f\u043b\u0430\u043d \u0432\u044b\u043f\u0443\u0441\u043a\u0430. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#_3","title":"\ud83e\uddee \u041a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 (\u0447\u0442\u043e \u0438 \u043a\u0430\u043a \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f)","text":""},{"location":"zz_old/backup/README_BG_Calc/#build_unified_detailed_table","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0439 \u043e\u0442\u0447\u0451\u0442 (<code>build_unified_detailed_table</code>)","text":"<p>\u0415\u0434\u0438\u043d\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0441\u0445\u0435\u043c\u0430: <code>section, article, level, context, name, qty, rate, amount, department_code, overhead_group_code, routing_name</code>. </p> <ul> <li> <p>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b:</p> </li> <li> <p>\u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u0437 <code>bom</code> (\u0432\u0441\u0435 \u0443\u0440\u043e\u0432\u043d\u0438), <code>article</code> \u0431\u0435\u0440\u0451\u043c \u0438\u0437 <code>items.article</code>, \u0446\u0435\u043d\u0430 \u2014 <code>rm_prices.last_price</code>, <code>amount = qty * rate</code>;</p> </li> <li><code>context</code>: FG \u0434\u043b\u044f <code>level=1</code>, \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c (\u043f\u043e <code>path</code>) \u0434\u043b\u044f <code>level\u22652</code>;</li> <li>\u0434\u043e\u0431\u0430\u0432\u043e\u0447\u043d\u044b\u0439 \u0432\u044b\u0432\u043e\u0434 <code>path</code> \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f (<code>\u203a</code>, <code>\u2192</code>, <code>/</code>, <code>\\</code> \u2192 <code>&gt;</code>).</li> <li>\u041f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434 / \u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e) / \u041e\u041f\u0420 (\u0446\u0435\u0445\u043e\u0432\u044b\u0435):   <code>context = department_code</code>, <code>article = routing_name</code> (\u0434\u043b\u044f \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0437\u0440\u0435\u0437\u043e\u0432 \u043f\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c).</li> <li>\u041e\u0425\u0420 (\u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430/\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435) \u0438 \u0410\u043c\u043e\u0440\u0442 \u041e\u041f\u0420, \u0411\u0440\u0430\u043a:   <code>context = overhead_group_code</code>, <code>article = overhead_group_code</code>.</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#build_unified_compact_table","title":"\u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u043e\u0442\u0447\u0451\u0442 (<code>build_unified_compact_table</code>)","text":"<ul> <li>\u0421\u0443\u043c\u043c\u044b \u043f\u043e \u0441\u0435\u043a\u0446\u0438\u044f\u043c + TOTAL \u0438 \u0434\u043e\u043b\u0438 \u0441\u0435\u043a\u0446\u0438\u0439, % \u043e\u0442 Total. </li> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438\u0437 BOM \u0441 \u0446\u0435\u043d\u043e\u0439 <code>last_price</code> \u043f\u043e <code>item_id</code>. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#_4","title":"\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0435 \u0441\u0443\u043c\u043c\u044b","text":"<ul> <li><code>GRAND TOTAL = \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b + \u041f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434 + \u0410\u043c\u043e\u0440\u0442 (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e) + \u041e\u041f\u0420 (\u0446\u0435\u0445\u043e\u0432\u044b\u0435) + \u0410\u043c\u043e\u0440\u0442 \u041e\u041f\u0420 + \u041e\u0425\u0420 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430 + \u041e\u0425\u0420 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435 + \u0411\u0440\u0430\u043a</code>. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#_5","title":"\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u0435\u043a\u0446\u0438\u0439 (\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430)","text":"<ol> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b</li> <li>\u0411\u0440\u0430\u043a</li> <li>\u0417\u041f (\u043f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434)</li> <li>\u041e\u041f\u0420 (\u0446\u0435\u0445\u043e\u0432\u044b\u0435)</li> <li>\u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e)</li> <li>\u0410\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f (\u0430\u0434\u043c\u0438\u043d)</li> <li>\u041e\u0425\u0420 (\u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430)</li> <li>\u041e\u0425\u0420 (\u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435)</li> </ol>"},{"location":"zz_old/backup/README_BG_Calc/#excel","title":"\ud83d\udce5 \u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 (Excel)","text":""},{"location":"zz_old/backup/README_BG_Calc/#1-overhead-items","title":"1) \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u043e\u0432 \u0438 overhead-\u0433\u0440\u0443\u043f\u043f (<code>items</code>)","text":"<p>\u0424\u043e\u0440\u043c\u0430\u0442 XLSX: \u043a\u043e\u043b\u043e\u043d\u043a\u0438 <code>item_id</code>, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e <code>routing_group</code>, <code>ovh_group_code</code>. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435: \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u0439 (old vs new), \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437\u043c\u0435\u043d\u0451\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044f.</p>"},{"location":"zz_old/backup/README_BG_Calc/#2-rm_prices","title":"2) \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0446\u0435\u043d (<code>rm_prices</code>)","text":"<p>\u0424\u043e\u0440\u043c\u0430\u0442 XLSX:</p> <ul> <li><code>Material</code> \u2014 \u0430\u0440\u0442\u0438\u043a\u0443\u043b (\u0442\u0435\u043a\u0441\u0442/\u0447\u0438\u0441\u043b\u043e \u2192 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043a \u0442\u0435\u043a\u0441\u0442\u0443, \u0441 \u043e\u0431\u0440\u0435\u0437\u043a\u043e\u0439 \u0441\u0443\u0444\u0444\u0438\u043a\u0441\u0430 <code>.0</code>).</li> <li><code>Material description</code> \u2014 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f.</li> <li><code>STD 2026</code> \u2014 \u043d\u043e\u0432\u0430\u044f \u0446\u0435\u043d\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445.</li> </ul> <p>\u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435:</p> <ul> <li><code>article</code> \u2192 \u0438\u0449\u0435\u043c <code>items.item_id</code> (\u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c <code>item_code</code> \u0438 <code>uom</code>).</li> <li>\u043f\u0438\u0448\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 <code>rm_prices</code> \u0441 <code>source</code> \u0438 <code>loaded_at</code> (\u0438\u0441\u0442\u043e\u0440\u0438\u044f).</li> <li>\u043e\u0442\u0447\u0451\u0442\u044b \u0431\u0435\u0440\u0443\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e <code>item_code</code> \u2192 <code>MAX(loaded_at)</code>. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#quality","title":"\ud83e\uddea \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (quality)","text":"<p>\u042d\u043a\u0440\u0430\u043d \u0441 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u0430\u043c\u0438 \u043f\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\u043c \u0438 \u0432\u044b\u0433\u0440\u0443\u0437\u043a\u043e\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432 Excel (\u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u2014 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u043a\u043b\u0430\u0434\u043a\u0430/\u043a\u043d\u043e\u043f\u043a\u0430):</p> <ul> <li><code>items</code>: \u043f\u0443\u0441\u0442\u044b\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f (<code>article/name/uom</code>)</li> <li><code>items</code>: \u0434\u0443\u0431\u043b\u0438 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u043e\u0432</li> <li>\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (<code>is_produced=1</code>) \u0431\u0435\u0437 <code>routing_group</code>/<code>ovh_group_code</code></li> <li>\u041d\u0435\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b\u0435 (<code>is_produced=0</code>) \u0441 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438 <code>routing_group/ovh_group_code</code></li> <li><code>BOM</code>: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 <code>items</code></li> <li><code>routing_flat</code>: \u0434\u0435\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b \u0431\u0435\u0437 \u0441\u0442\u0430\u0432\u043a\u0438 \u0432 <code>labor_rates_snapshot</code></li> <li><code>BOM</code>: \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0431\u0435\u0437 \u0446\u0435\u043d\u044b \u0432 <code>rm_prices</code> (\u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435)</li> <li><code>OVH</code>: \u0433\u0440\u0443\u043f\u043f\u044b \u0431\u0435\u0437 \u0442\u0430\u0440\u0438\u0444\u0430 \u043d\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439/\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0433\u043e\u0434</li> <li>\u0411\u044e\u0434\u0436\u0435\u0442: \u0432 <code>prod_budget</code> \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0441 <code>is_produced=0</code></li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#_6","title":"\ud83e\udded \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0451\u043d\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>ID vs \u0410\u0440\u0442\u0438\u043a\u0443\u043b: \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0432\u044f\u0437\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c <code>item_id</code>, \u0432 UI \u0438 Excel \u2014 <code>article</code>.</li> <li>\u041f\u0443\u0442\u044c BOM: \u0432 \u0411\u0414 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u043a\u0430\u043a \u0446\u0435\u043f\u043e\u0447\u043a\u0430 <code>item_id</code>, \u0432 UI \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0430 <code>path_article</code> (\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u0430\u0440\u0442\u0438\u043a\u0443\u043b\u0430).</li> <li>\u0426\u0435\u043d\u044b \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432: <code>rm_prices</code> \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u044e; \u00ab\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430\u044f\u00bb \u2014 \u0437\u0430\u043f\u0438\u0441\u044c \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c <code>loaded_at</code>.</li> <li>\u0421\u0442\u0430\u0432\u043a\u0438 \u0442\u0440\u0443\u0434\u0430: \u0431\u0435\u0440\u0443\u0442\u0441\u044f \u0438\u0437 <code>labor_rates_snapshot</code> \u043f\u043e <code>department_code</code>.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u0435\u043a\u0446\u0438\u0439: \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f (\u0441\u043c. \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0448\u0435).</li> <li>\u0415\u0434\u0438\u043d\u0438\u0446\u044b: \u0434\u043b\u044f \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u043e\u043b\u044f \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043a \u0447\u0438\u0441\u043b\u0430\u043c \u0438 \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u044e\u0442\u0441\u044f (<code>qty</code> \u2014 \u0434\u043e 6, <code>amount</code> \u2014 \u0434\u043e 2).</li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#_7","title":"\ud83d\udcc8 \u0411\u044e\u0434\u0436\u0435\u0442","text":"<ul> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043f\u043b\u0430\u043d\u0430 <code>prod_budget</code> (\u0430\u0440\u0442\u0438\u043a\u0443\u043b \u2192 <code>item_id</code>, \u043c\u0435\u0441\u044f\u0446\u044b <code>YYYY-MM</code>).</li> <li>\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043a\u0430\u0434\u0440\u043e\u0432 Total \u0438 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c; \u044d\u043a\u0441\u043f\u043e\u0440\u0442 \u0432 Excel. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#_8","title":"\ud83e\udde9 \u0413\u0434\u0435 \u0438\u0441\u043a\u0430\u0442\u044c \u043a\u043e\u0434","text":"<ul> <li>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043e\u0442\u0447\u0451\u0442\u044b/\u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u044b\u0439 \u0432\u0438\u0434: <code>calc/item_cost.py</code> (\u0435\u0434\u0438\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043f\u043e\u0434\u0438\u0442\u043e\u0433\u0438, \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435).  </li> <li>\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b: <code>calc/materialize.py</code> (\u0434\u0435\u0440\u0435\u0432\u044c\u044f, \u0442\u0440\u0443\u0434, \u0430\u043c\u043e\u0440\u0442, \u041e\u041f\u0420, OVH, scrap). </li> <li>\u041f\u0430\u0439\u043f\u043b\u0430\u0439\u043d \u0438 \u0431\u044e\u0434\u0436\u0435\u0442: <code>calc/pipeline.py</code>, <code>calc/budget.py</code>. </li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438: <code>loaders/*</code> \u0438 \u044d\u043a\u0440\u0430\u043d\u044b <code>ui/views_loader.py</code>. </li> </ul>"},{"location":"zz_old/backup/README_BG_Calc/#-","title":"\u2705 \u0427\u0435\u043a-\u043b\u0438\u0441\u0442 \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u0438","text":"<ul> <li>[ ] \u0417\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u044b <code>items</code>, <code>bom</code>, <code>rm_prices</code>, <code>labor_rates_snapshot</code></li> <li>[ ] \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f <code>routing_*</code>, <code>*_cost_unit</code>, <code>ovh_*</code></li> <li>[ ] \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 (\u0432\u0441\u0435 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u044b \u00ab0 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u00bb \u0438\u043b\u0438 \u043f\u0440\u0438\u043d\u044f\u0442\u044b \u0440\u0435\u0448\u0435\u043d\u0438\u044f)</li> <li>[ ] \u0412 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (\u0446\u0435\u043d\u044b \u043f\u043e\u0434\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442\u0441\u044f)</li> <li>[ ] \u0411\u044e\u0434\u0436\u0435\u0442 \u0441\u043e\u0431\u0440\u0430\u043d \u0438 \u0432\u044b\u0433\u0440\u0443\u0436\u0435\u043d \u0432 Excel</li> </ul>"},{"location":"zz_old/backup/RULES/","title":"RULES","text":""},{"location":"zz_old/backup/RULES/#elem_map_rules","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u0440\u0430\u0432\u0438\u043b: elem_map_rules","text":"<ul> <li>\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442: \u043c\u0435\u043d\u044c\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0440\u0430\u043d\u044c\u0448\u0435 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u044b: 100 \u2014 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0435, 500 \u2014 \u0434\u0435\u0444\u043e\u043b\u0442).</li> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u044b: <code>cost_type</code> \u0438/\u0438\u043b\u0438 <code>account_descr_pattern</code> (SQL LIKE). \u0414\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043e\u0434\u043d\u043e\u0433\u043e.</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: <code>elem_id</code> (\u043b\u0438\u0441\u0442 \u0438\u043b\u0438 \u0433\u0440\u0443\u043f\u043f\u0430, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043b\u043e\u0433\u0438\u043a\u0438 \u043e\u0442\u0447\u0451\u0442\u0430).</li> </ul>"},{"location":"zz_old/backup/RULES/#excel","title":"\u0418\u043c\u043f\u043e\u0440\u0442 \u0438\u0437 Excel","text":"<p>\u041e\u0436\u0438\u0434\u0430\u0435\u043c\u044b\u0435 \u043b\u0438\u0441\u0442\u044b: <code>detail_rules</code>, <code>fallback_rules</code>.  \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438: <code>priority</code>, <code>cost_type</code>, <code>account_descr_pattern</code>, <code>mapped_elem_id</code>/<code>elem_id</code>, <code>note</code>.</p>"},{"location":"zz_old/backup/RULES/#tokenjaccard","title":"\u041f\u043e\u0434\u0431\u043e\u0440 \u043f\u0440\u0430\u0432\u0438\u043b (token\u2011Jaccard)","text":"<p>1) \u041a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 <code>(Cost type, Account descr)</code> \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u00ab\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443\u00bb. 2) \u0418\u0449\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0439 \u043b\u0438\u0441\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e Jaccard(token(Account descr), token(elem_name)). 3) \u0415\u0441\u043b\u0438 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0430 \u043d\u0435\u0442 \u2014 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043b\u0438\u0441\u0442 <code>Plan*</code> \u0432 \u044d\u0442\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435. 4) \u0415\u0441\u043b\u0438 \u0438 <code>Plan*</code> \u043d\u0435\u0442 \u2014 \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u043a\u0430\u043a <code>no_match_no_plan</code> \u0434\u043b\u044f \u0440\u0443\u0447\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0431\u043e\u0440\u0430.</p>"},{"location":"zz_old/backup/RULES/#_1","title":"\u0422\u0435\u0441\u0442\u2011\u043a\u0435\u0439\u0441","text":"<p>\u0412 UI \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0444\u043e\u0440\u043c\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438: \u0432\u0432\u0435\u0441\u0442\u0438 <code>Cost type</code>, <code>Account descr</code> \u2192 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u043e, <code>elem_id</code>, \u043f\u0443\u0442\u044c \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.</p>"},{"location":"zz_old/backup/RUNBOOK/","title":"RUNBOOK","text":""},{"location":"zz_old/backup/RUNBOOK/#_1","title":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0411\u0414","text":"<ol> <li>\u041e\u0442\u043a\u0440\u044b\u0442\u044c <code>\u041d\u0421\u0418 \u2192 \u0421\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a\u0438</code> \u2192 \u0421\u043e\u0437\u0434\u0430\u0442\u044c/\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u044b.</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c MFCPRIM.xlsx (\u043b\u0438\u0441\u0442 <code>MFC_PRIM</code>) \u2192 \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f \u0432 <code>elem_edges &gt; 0</code>.</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c CCG WRU.xlsx (\u043b\u0438\u0441\u0442 <code>CCG_RU1</code>, header=None) \u2192 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c <code>cc_edges &gt; 0</code>.</li> </ol>"},{"location":"zz_old/backup/RUNBOOK/#_2","title":"\u0418\u043c\u043f\u043e\u0440\u0442 \u043f\u0440\u0430\u0432\u0438\u043b","text":"<ol> <li>\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0432\u043a\u043b\u0430\u0434\u043a\u0443 \u041f\u0440\u0430\u0432\u0438\u043b\u0430 \u2192 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c <code>detail_rules</code>.</li> <li>\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c <code>fallback_rules</code> (\u0434\u0435\u0444\u043e\u043b\u0442\u044b \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u0437\u0430\u0442\u0440\u0430\u0442).</li> <li>\u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c/\u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 UI.</li> </ol>"},{"location":"zz_old/backup/RUNBOOK/#_3","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438","text":"<ul> <li>\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 (\u0443\u0437\u043b\u044b/\u0440\u0451\u0431\u0440\u0430, \u043b\u0438\u0441\u0442\u044c\u044f \u0431\u0435\u0437 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f, &gt;1 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f). </li> <li>\u0414\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b: <code>elem_id \u2208 elem_nodes</code> \u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u0430.</li> </ul>"},{"location":"zz_old/backup/TODO/","title":"TODO","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b. \u0421\u0435\u0439\u0447\u0430\u0441 \u0440\u0430\u0441\u0447\u0435\u0442 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u044f\u043c\u043e\u0433\u043e \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u041e\u041f\u0420. \u0413\u0440\u0443\u043f\u043f\u0430 \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0436\u043d\u0435\u0439, \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u0433\u0440\u0443\u043f\u043f\u044b \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0442\u0440\u0430\u0442 \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u044f - MFC_PRIM_3, \u041e\u041f\u0420 - MFC_PRIM_2. \u0417\u0430\u043f\u0438\u0441\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043d\u0430\u043f\u043e\u0448\u043e\u0442\u043e\u0432, \u0437\u0430\u043f\u0440\u043e\u0441\u0438 \u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u0448\u044c \u0432 schema</p>"},{"location":"zz_old/backup/TODO_WiloERP_Migration/","title":"Wilo\u2011ERP Migration \u2014 To\u2011Do (Three Phases)","text":"<p>Owner: Petr Podolyakin Last updated: 2025-10-09</p> <p>Legend: [ ] todo \u00b7 [~] in progress \u00b7 [x] done</p>"},{"location":"zz_old/backup/TODO_WiloERP_Migration/#phase-a-core-compatibility-foundations","title":"Phase A \u2014 Core &amp; Compatibility (foundations)","text":"<ul> <li>[ ] A1. DDL \u2014 Core entities</li> <li>[ ] <code>drivers(driver_code, name, unit, granularity, agg_rule, source_policy, is_ratio)</code></li> <li>[ ] <code>driver_sets(set_id, name, version, valid_from, valid_to, status)</code></li> <li>[ ] <code>driver_values(set_id, period, scenario, driver_code, product_id?, cc_id?, elem_id?, value, unit, source_ref, loaded_at)</code></li> <li>[ ] <code>cost_rates(period_or_year, scenario, component_code, cc_id?, product_id?, rate_value, unit, source, run_id)</code></li> <li>[ ] <code>fact_measures(period, scenario, product_id, component_code, measure_code, value, unit)</code></li> <li>[ ] New hierarchies: <code>item_nodes</code>, <code>routing_nodes</code>, <code>ovh_nodes</code></li> <li>[ ] Bridges: <code>activity_to_routing</code>, <code>elem_to_ovh</code></li> <li>[ ] A2. Migrations &amp; back\u2011compat views</li> <li>[ ] Views that map new long formats to legacy wide ones: <code>v_labor_cost_unit_total</code>, <code>v_opr_cost_unit_total</code>, <code>v_ovh_cost_unit</code></li> <li>[ ] <code>v_driver_catalog</code>, <code>v_driver_values</code></li> <li>[ ] A3. ETL adapters (populate driver_values)</li> <li>[ ] HOURS: prod_budget \u00d7 routing.std_hours (plan) / MES (fact)</li> <li>[ ] MATCOST: material base aggregated to product</li> <li>[ ] PAYROLL_OTHER: payroll+others by CC / product+CC</li> <li>[ ] A4. Rates population</li> <li>[ ] Map existing labor/opr/ovh tariffs into <code>cost_rates</code> (+ snapshots)</li> <li>[ ] A5. Rule matrix skeleton</li> <li>[ ] <code>rule_sets</code>, <code>rules(priority, driver_code, params_json)</code>, <code>rule_scope(cc_node_id?, elem_node_id?)</code></li> <li>[ ] <code>v_allocation_rule_effective</code> (specificity \u2192 priority, catch\u2011all support)</li> <li>[ ] A6. Quality gates</li> <li>[ ] Coverage: CC\u00d7Element pairs in OPEX without effective rule</li> <li>[ ] Driver completeness: recipients without driver values</li> <li>[ ] Recon: \u03a3pools == \u03a3allocated (placeholder for Phase B)</li> <li>[ ] A7. Docs</li> <li>[ ] Update <code>SYSTEM_BLUEPRINT.md</code> / <code>ERP_TARGET_ARCHITECTURE.md</code></li> <li>[ ] Driver Catalog Spec (HOURS, MATCOST, PAYROLL_OTHER)</li> <li>[ ] Readme: \u201cHow to read the system\u201d</li> </ul> <p>Exit criteria (Phase A): - [ ] New core tables exist and are filled for at least HOURS (plan) and one month of MATCOST. - [ ] Legacy reports read via compatibility views with identical numbers on sample month. - [ ] <code>v_allocation_rule_effective</code> returns a single rule per (cc, elem) for sample scope.</p>"},{"location":"zz_old/backup/TODO_WiloERP_Migration/#phase-b-allocation-engine-period-close","title":"Phase B \u2014 Allocation Engine &amp; Period Close","text":"<ul> <li>[ ] Allocation Engine v1 (weights/ratios): apply rules \u2192 <code>cost_allocations</code></li> <li>[ ] Labor direct slice E2E (plan): CC 25410 \u2192 LABOR_DIRECT on products</li> <li>[ ] Lineage: <code>lineage_links(src\u2192dst, rule_id, run_id)</code></li> <li>[ ] Period\u2011close workflow (UI): Load Fact \u2192 Normalize \u2192 Apply Rules \u2192 Checks \u2192 Freeze</li> <li>[ ] <code>cogs_unit</code> + <code>v_cogs_unit</code>, <code>v_alloc_lineage</code>, <code>v_recon_checks</code></li> <li>[ ] Variance framework (volume/mix/price/rate) \u2014 base views</li> </ul> <p>Exit criteria (Phase B): - [ ] End\u2011to\u2011end allocation for at least 1 component (LABOR_DIRECT) with formal recon = 0. - [ ] Close procedure produces frozen snapshots and lineage for audit.</p>"},{"location":"zz_old/backup/TODO_WiloERP_Migration/#phase-c-full-switch-decommission","title":"Phase C \u2014 Full Switch &amp; Decommission","text":"<ul> <li>[ ] Migrate calculators to new sources (driver_values/cost_rates)</li> <li>[ ] Replace old wide tables with views; remove dead code</li> <li>[ ] Expand components (DEPR_OPR, OVH_LOG, OVH_ADM, etc.)</li> <li>[ ] Performance hardening (indexes, caches, batch size)</li> <li>[ ] Test pack: unit + integration + golden datasets</li> </ul> <p>Exit criteria (Phase C): - [ ] All major reports run on new layer with parity. - [ ] Old tables/calculators are deprecated or aliased only via views.</p>"},{"location":"zz_old/backup/mermaid/","title":"Mermaid","text":"<p>\u043e\u0442\u043b\u0438\u0447\u043d\u0430\u044f \u0438\u0434\u0435\u044f. \u041d\u0438\u0436\u0435 \u0434\u0430\u043b ER-\u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 (Mermaid) + \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043f\u043e \u043a\u043b\u044e\u0447\u0430\u043c/\u043a\u0430\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044f\u043c \u0438 \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432/\u0432\u043d\u0435\u0448\u043d\u0438\u0445 \u043a\u043b\u044e\u0447\u0435\u0439 (\u0435\u0441\u043b\u0438 \u0437\u0430\u0445\u043e\u0447\u0435\u0448\u044c \u2014 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 <code>ensure_schema</code>).</p>"},{"location":"zz_old/backup/mermaid/#er","title":"\u0414\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0430 \u0441\u0432\u044f\u0437\u0435\u0439 (ER)","text":"<pre><code>erDiagram\n    ITEMS {\n      TEXT item_id PK\n      TEXT article UNIQUE\n      TEXT name\n      TEXT uom\n      INT  is_produced\n      TEXT routing_group\n      TEXT ovh_group_code\n    }\n\n    BOM {\n      TEXT parent_item_id FK -&gt; ITEMS.item_id\n      TEXT component_item_id FK -&gt; ITEMS.item_id\n      INT  level\n      TEXT path\n      REAL qty_per_unit\n    }\n\n    RM_PRICES {\n      TEXT item_code FK -&gt; ITEMS.item_id\n      TEXT article\n      TEXT uom\n      REAL price\n      TEXT currency\n      TEXT source\n      TEXT loaded_at\n      %% \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u044e\u0447 \u0432 \u0442\u0432\u043e\u0435\u0439 \u0411\u0414 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c (item_code, currency) \u0418\u041b\u0418 \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f, \u0435\u0441\u043b\u0438 \u0445\u0440\u0430\u043d\u0438\u043c \u0438\u0441\u0442\u043e\u0440\u0438\u044e\n    }\n\n    ROUTING_FLAT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT routing_name\n      TEXT department_code\n      REAL hours_per_unit\n    }\n\n    LABOR_RATES_SNAPSHOT {\n      TEXT department_code PK\n      REAL rate_per_hour\n      TEXT currency\n    }\n\n    LABOR_COST_UNIT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT department_code FK -&gt; LABOR_RATES_SNAPSHOT.department_code\n      REAL hours_total\n      REAL rate_per_hour\n      REAL cost_total\n    }\n\n    DEPR_COST_UNIT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT department_code FK -&gt; LABOR_RATES_SNAPSHOT.department_code\n      REAL hours_total\n      REAL rate_per_hour\n      REAL cost_total\n    }\n\n    OPR_COST_UNIT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT department_code FK -&gt; LABOR_RATES_SNAPSHOT.department_code\n      REAL hours_total\n      REAL rate_per_hour\n      REAL cost_total\n    }\n\n    OVH_FLAT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT overhead_group\n      REAL mat_cost\n    }\n\n    OVH_TARIFFS {\n      TEXT overhead_group\n      INT  year\n      REAL scrap_share\n      REAL depr_opr_share\n      REAL log_share\n      REAL adm_share\n      %% (overhead_group, year) \u043a\u0430\u043a \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u044e\u0447\n    }\n\n    OVH_COST_UNIT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT overhead_group_code\n      REAL depr_opr_cost\n      REAL log_cost\n      REAL adm_cost\n    }\n\n    SCRAP_COST_UNIT {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT overhead_group_code\n      REAL scrap_cost\n    }\n\n    PROD_BUDGET {\n      TEXT product_id FK -&gt; ITEMS.item_id\n      TEXT month_code\n      REAL qty\n    }\n\n    %% --------- \u0441\u0432\u044f\u0437\u0438 ---------\n    ITEMS ||--o{ BOM : \"parent_item_id\"\n    ITEMS ||--o{ BOM : \"component_item_id\"\n\n    ITEMS ||--o{ RM_PRICES : \"item_code\"\n    ITEMS ||--o{ ROUTING_FLAT : \"product_id\"\n\n    LABOR_RATES_SNAPSHOT ||--o{ ROUTING_FLAT : \"department_code\"\n    LABOR_RATES_SNAPSHOT ||--o{ LABOR_COST_UNIT : \"department_code\"\n    LABOR_RATES_SNAPSHOT ||--o{ DEPR_COST_UNIT  : \"department_code\"\n    LABOR_RATES_SNAPSHOT ||--o{ OPR_COST_UNIT   : \"department_code\"\n\n    ITEMS ||--o{ LABOR_COST_UNIT : \"product_id\"\n    ITEMS ||--o{ DEPR_COST_UNIT  : \"product_id\"\n    ITEMS ||--o{ OPR_COST_UNIT   : \"product_id\"\n\n    ITEMS ||--o{ OVH_FLAT : \"product_id\"\n    OVH_TARIFFS ||--o{ OVH_FLAT : \"overhead_group\"\n\n    ITEMS ||--o{ OVH_COST_UNIT   : \"product_id\"\n    ITEMS ||--o{ SCRAP_COST_UNIT : \"product_id\"\n\n    ITEMS ||--o{ PROD_BUDGET : \"product_id\"</code></pre>"},{"location":"zz_old/backup/mermaid/#_1","title":"\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c/\u043a\u0430\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044f\u043c","text":"<ul> <li><code>items</code> \u2014 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u0439 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u0438\u043a. \u0412\u043e \u0432\u0441\u0435\u0445 \u0441\u0432\u044f\u0437\u044f\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c <code>item_id</code>. \u0414\u043b\u044f UI/Excel \u043f\u043e\u043a\u0430\u0437/\u043f\u043e\u0438\u0441\u043a \u043f\u043e <code>article</code>.</li> <li><code>bom</code> \u2014 \u043c\u043d\u043e\u0433\u0438\u0435-\u043a-\u043e\u0434\u043d\u043e\u043c\u0443 \u043a <code>items</code> \u0438 \u043f\u043e <code>parent_item_id</code>, \u0438 \u043f\u043e <code>component_item_id</code>. <code>path</code> \u0445\u0440\u0430\u043d\u0438\u0442 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 <code>item_id</code> (\u0432 UI \u0432\u044b\u0432\u043e\u0434\u0438\u043c <code>path_article</code> \u2014 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c id \u2192 article).</li> <li><code>rm_prices</code> \u2014 \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u0446\u0435\u043d \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432. \u0412 \u043e\u0442\u0447\u0435\u0442\u0430\u0445 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u043f\u043e <code>loaded_at</code> \u0434\u043b\u044f <code>(item_code, currency)</code>.</li> <li><code>routing_flat</code> \u2014 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438/\u0442\u0440\u0443\u0434\u043e\u0435\u043c\u043a\u043e\u0441\u0442\u044c \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438\u0437\u0434\u0435\u043b\u0438\u044f. \u0421\u0442\u0430\u0432\u043a\u0430 \u0442\u0440\u0443\u0434\u0430 \u0431\u0435\u0440\u0451\u0442\u0441\u044f \u0438\u0437 <code>labor_rates_snapshot</code> \u043f\u043e <code>department_code</code>.</li> <li><code>*_cost_unit</code> \u2014 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u044b \u00ab\u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438\u0437\u0434\u0435\u043b\u0438\u044f\u00bb: \u043f\u0440\u044f\u043c\u043e\u0439 \u0442\u0440\u0443\u0434, \u0430\u043c\u043e\u0440\u0442 (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u043e), \u041e\u041f\u0420 (\u0446\u0435\u0445).</li> <li><code>ovh_flat</code> \u2014 \u0431\u0430\u0437\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u043e\u0432\u0435\u0440\u0445\u0435\u0434-\u0433\u0440\u0443\u043f\u043f\u0430\u043c (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u0430\u0442. \u0431\u0430\u0437\u0430), \u0442\u0430\u0440\u0438\u0444\u044b \u2014 \u0432 <code>ovh_tariffs</code> \u043f\u043e <code>(overhead_group, year)</code>.</li> <li><code>ovh_cost_unit</code> / <code>scrap_cost_unit</code> \u2014 \u0443\u0436\u0435 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u0441\u0443\u043c\u043c\u044b \u043d\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443 (\u0430\u0434\u043c\u0438\u043d-\u0430\u043c\u043e\u0440\u0442, \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u043a\u0430, \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435; \u0431\u0440\u0430\u043a).</li> <li><code>prod_budget</code> \u2014 \u043f\u043b\u0430\u043d \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u043d\u0430 <code>product_id</code>.</li> </ul>"},{"location":"zz_old/backup/mermaid/#sqlite","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b/\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f (SQLite)","text":"<p>\u041d\u0438\u0436\u0435 \u2014 \u043d\u0430\u0431\u043e\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u0451\u0442 \u0431\u044b\u0441\u0442\u0440\u044b\u0435 \u0434\u0436\u043e\u0439\u043d\u044b \u0438 \u0437\u0430\u0449\u0438\u0449\u0430\u0435\u0442 \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c. \u041f\u0440\u043e\u0433\u043e\u043d\u0438\u043c \u0438\u0445 \u0432 <code>ensure_schema(conn)</code> (\u0432\u0441\u0435 \u0441 <code>IF NOT EXISTS</code> \u2014 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e):</p> <pre><code>-- ITEMS\nCREATE UNIQUE INDEX IF NOT EXISTS ux_items_article ON items(article);\n\n-- BOM\nCREATE INDEX IF NOT EXISTS ix_bom_parent  ON bom(parent_item_id);\nCREATE INDEX IF NOT EXISTS ix_bom_comp    ON bom(component_item_id);\n-- (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u0435\u0441\u043b\u0438 path \u0447\u0430\u0441\u0442\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0435\u0444\u0438\u043a\u0441\u0443:\n-- CREATE INDEX IF NOT EXISTS ix_bom_path ON bom(path);\n\n-- PRICES (\u0438\u0441\u0442\u043e\u0440\u0438\u044f)\nCREATE INDEX IF NOT EXISTS ix_rm_prices_item_cur_dt ON rm_prices(item_code, currency, loaded_at);\n-- \u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c \u0436\u0451\u0441\u0442\u043a\u043e \u043e\u0434\u043d\u0443 \u0446\u0435\u043d\u0443 \u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u0443: UNIQUE(item_code, currency)\n-- CREATE UNIQUE INDEX IF NOT EXISTS ux_rm_prices_item_cur ON rm_prices(item_code, currency);\n\n-- ROUTING / RATES\nCREATE INDEX IF NOT EXISTS ix_routing_flat_prod  ON routing_flat(product_id);\nCREATE INDEX IF NOT EXISTS ix_routing_flat_dept  ON routing_flat(department_code);\nCREATE UNIQUE INDEX IF NOT EXISTS ux_labor_rates_dept ON labor_rates_snapshot(department_code);\n\n-- COST UNITS\nCREATE INDEX IF NOT EXISTS ix_labor_unit_prod_dept ON labor_cost_unit(product_id, department_code);\nCREATE INDEX IF NOT EXISTS ix_depr_unit_prod_dept  ON depr_cost_unit(product_id, department_code);\nCREATE INDEX IF NOT EXISTS ix_opr_unit_prod_dept   ON opr_cost_unit(product_id, department_code);\n\n-- OVH\nCREATE INDEX IF NOT EXISTS ix_ovh_flat_prod_group   ON ovh_flat(product_id, overhead_group);\nCREATE UNIQUE INDEX IF NOT EXISTS ux_ovh_tariffs_group_year ON ovh_tariffs(overhead_group, year);\nCREATE INDEX IF NOT EXISTS ix_ovh_cost_unit_prod    ON ovh_cost_unit(product_id);\nCREATE INDEX IF NOT EXISTS ix_scrap_cost_unit_prod  ON scrap_cost_unit(product_id);\n\n-- BUDGET\nCREATE INDEX IF NOT EXISTS ix_budget_prod_month ON prod_budget(product_id, month_code);\n</code></pre> <p>\u0412\u043d\u0435\u0448\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0438 \u0432 SQLite \u043d\u0443\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c <code>PRAGMA foreign_keys=ON;</code>. \u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043c\u044f\u0433\u043a\u0438\u0435 FK-\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0432 <code>ensure_schema</code> (\u0438\u043b\u0438 \u00ab\u043f\u0441\u0435\u0432\u0434\u043e-FK\u00bb \u0447\u0435\u0440\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0432 <code>quality.py</code>).</p>"},{"location":"zz_old/backup/mermaid/#_2","title":"\u0413\u0434\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443","text":"<ul> <li>\u0412\u0441\u0442\u0430\u0432\u044c \u0431\u043b\u043e\u043a <code>mermaid</code> \u0432 <code>README_BG_Calc.md</code> \u2192 GitHub/Streamlit-Markdown \u043e\u0442\u0440\u0438\u0441\u0443\u044e\u0442 \u0441\u0445\u0435\u043c\u0443.</li> <li>\u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c, \u0432\u044b\u043d\u0435\u0441\u0435\u043c \u0432 <code>docs/db_schema.md</code> \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0435\u0449\u0451 \u043e\u0434\u043d\u0443 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u043e\u0442\u043e\u043a\u0430 \u0440\u0430\u0441\u0447\u0451\u0442\u043e\u0432 (ETL \u2192 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u2192 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0446\u0438\u0438 \u2192 \u043e\u0442\u0447\u0451\u0442\u044b).</li> </ul> <p>\u041d\u0443\u0436\u043d\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0445\u0435\u043c\u0443 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u043c\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>routings</code>, <code>routing_tree</code>) \u2014 \u0441\u043a\u0430\u0436\u0438, \u0432\u043a\u043b\u044e\u0447\u0443 \u0438\u0445 \u0438 \u0441\u0432\u044f\u0437\u0438 \u0441 <code>routing_flat</code>.</p>"}]}